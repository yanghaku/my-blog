<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YangBo</title>
  
  <subtitle>君子曰:学不可以已</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanghaku.github.io/"/>
  <updated>2020-02-28T15:57:23.869Z</updated>
  <id>https://yanghaku.github.io/</id>
  
  <author>
    <name>杨博</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# 语言基础</title>
    <link href="https://yanghaku.github.io/2020/02/26/cs%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>https://yanghaku.github.io/2020/02/26/cs%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-26T04:39:00.000Z</published>
    <updated>2020-02-28T15:57:23.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p>Hello World!:<br><a id="more"></a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this is an example code for c#</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] arg</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// print hello world!</span></span><br><span class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C#是一个面向对象的语言，并且吸收了java，c++等语言的某些优点。内部的Program类的写法非常像java，static void Main函数为程序的入口。<br>static与java的一样，为静态函数的关键字。<br>注释符也与java、c++的一样，两种：行内注释<code>//</code> 和多行注释 <code>/**  */</code></p><p>然后就是命名空间的问题：</p><h3 id="namespace-与-using"><a href="#namespace-与-using" class="headerlink" title="namespace 与 using"></a>namespace 与 using</h3><p>在c#中，每一个类应该都在一个命名空间里面。功能上与c++的namespace，java里的package一样，用于变量标识符的冲突，区别不同的属性等。<br>在java中，每个packet，类都与文件系统的文件夹（包名与文件夹名字相同）、文件（类名要和文件名相同）相对应，整个可以发布成一个jar包供人使用。而c#不必要与文件相对应，一个文件里面可以有多个类，也可以有多个命名空间（也可以嵌套）。同一个命名空间下的类可以包装成一个<strong>程序集</strong>供用户调用。编译后的程序集可以是.exe 或者.dll,具体取决于是开发的应用程序还是开发的库。</p><p>调用的时候直接加<code>.</code>即可。<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] arg</span>)</span> &#123;</span><br><span class="line">            myName1.C.F();</span><br><span class="line">            myName2.C.F();</span><br><span class="line">            myName1.myname2.C.F();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">myName1</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"myName1::C::f()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">namespace</span> <span class="title">myname2</span> &#123;</span><br><span class="line">            <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"myname1::myName2::C::F()"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">myName2</span> &#123; </span><br><span class="line">        <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"myName2::C::F()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myName1::C::f()</span><br><span class="line">myName2::C::F()</span><br><span class="line">myname1::myName2::C::F()</span><br></pre></td></tr></table></figure></p><p>从上面这个例子就可以学到命名空间的使用和命名空间的嵌套。</p><p>当调用其他namespace程序集的时候，每次都是namespace1.subnamespace1.subsub…..这个样子的肯定写起来也非常麻烦，所以就有了using关键字。(像java的import)<br>using可以直接引入某个命名空间，然后使用这个命名空间里的所有类<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Namespace1.SubNamespace;</span><br></pre></td></tr></table></figure><br>using也可以用来起别名：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Syyys = System;</span><br></pre></td></tr></table></figure><br>using static 指令可以直接引入static变量<br>比如要使用System.Math类的静态变量，可以每次写System.Math.PI,<br>也可以使用<code>using static System.Math</code>引入Math类的静态变量，这样每次使用都可以直接用PI这个变量了：<code>double xx=PI;</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C#中，变量有三种类型：值类型（Value types），引用类型（Reference types），指针类型（Pointer types）。</p><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>值类型变量是变量本身直接包含数据（存储在栈中），值类型每一个变量都有一个自己的数据副本，对一个变量执行操作不会影响其他变量（当然，ref与out的时候除外）。</p><p>值类型的还可以细分类：</p><ul><li>简单类型：int,double,bool,char等内置类型</li><li>枚举类型：enum E{} 等用户自定义的类型</li><li>结构类型：struct S{} 等用户自定义的类型</li><li>可以为null的类型</li></ul><h4 id="简单类型（内置值类型）"><a href="#简单类型（内置值类型）" class="headerlink" title="简单类型（内置值类型）"></a>简单类型（内置值类型）</h4><p>在C#中，内置类型的变量都是继承自System.ValueType类,相当于一种特殊的，不是引用类型变量的类，在分配的时候，会将变量的实例（值）复制。<br><strong>（但是继承后的Int32是结构类型，而不是类类型）</strong>，这个可以详细看后面的struct结构类型。<br>比如int类型其实就是System.Int32类型的<strong>别名</strong>，这两个是一个效果：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p = <span class="number">10</span>;</span><br><span class="line">System.Int32 p = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 两者等价</span></span><br></pre></td></tr></table></figure></p><p>简单类型都可以使用const关键字来声明简单类型的常数，可以用文字来为简单类型提供值。<br>其中分为四种类型：整数值类型、浮点数值类型、布尔值类型、char字符类型</p><h5 id="整数值类型"><a href="#整数值类型" class="headerlink" title="整数值类型"></a>整数值类型</h5><p>整数值类型有</p><ul><li>8位整数：sbyte（System.SByte）(有符号)、byte（System.Byte）(无符号)</li><li>16位整数：short（System.Int16）(有符号)、ushort（System.UInt16）(无符号)</li><li>32位整数：int（System.Int32）(有符号)、uint（System.UInt32）(无符号)</li><li>64位整数：long（System.Int64）(有符号)、ulong（System.UInt64）(无符号)<br>每种类型都有两个静态变量MinValue和MaxValue，提供这个类型的最大值和最小值</li></ul><p>整数文本可以有三种表示：10进制（无前缀），16进制（0x/0X），2进制（0b/0B）<br>(下划线可以作为数字的分隔符)<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> decimalLiteral = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> hexLiteral = <span class="number">0x2A</span>;</span><br><span class="line"><span class="keyword">int</span> binaryLiteral = <span class="number">0b</span>_0010_1010;</span><br></pre></td></tr></table></figure></p><h5 id="浮点数值类型"><a href="#浮点数值类型" class="headerlink" title="浮点数值类型"></a>浮点数值类型</h5><ul><li>4个字节：float（System.Single）</li><li>8个字节：double（System.Double）</li><li>16个字节：decimal（System.Decimal）<br>每个类型都有两个常量：MinValue、MaxValue值<br>其中float和double还提供了三个常量：NAN（非数字）、NegativeInfinity（负无穷）、PositiveInfinity（正无穷）。<br>decimal相比double，表示范围小，但是精度高（可以精确到28-29位）。</li></ul><p>数值文本中，用后缀来区分三种表示：</p><ul><li>float：f/F</li><li>double: d/D/不带后缀</li><li>decimal: m/M</li></ul><p>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> x1 = <span class="number">1.111f</span>;</span><br><span class="line"><span class="keyword">float</span> x2 = <span class="number">1.111F</span>;</span><br><span class="line"><span class="keyword">double</span> p1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> p2 = <span class="number">3.14</span>d;</span><br><span class="line"><span class="keyword">double</span> p3 = <span class="number">3.14</span>D;</span><br><span class="line"><span class="keyword">decimal</span> s1 = <span class="number">456.333e13</span>m;</span><br><span class="line"><span class="keyword">decimal</span> s2 = <span class="number">456.333</span>M;</span><br></pre></td></tr></table></figure></p><h5 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h5><p>bool类型关键字，是System.Boolean的别名，值为<code>true</code>或<code>false</code></p><p>用文本赋值的时候，也是true和false<br>example:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">System.Boolean b = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p><h5 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h5><p>char类型关键字，是System.Char的别名，与其他语言的char不同的是，c#的char是双字节（16位）表示的是<strong>Unicode UTF-16</strong>字符。<br>string类型就是char的序列（所以也是Unicode UTF-16编码）<br>char的默认值是’\0’,即 U+0000。</p><p>用文本指定char值的时候，可以是字符文本、Unicode转义字符(\u)、十六进制文本(\x)<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'h'</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'\u0068'</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'\x0068'</span>;</span><br><span class="line"><span class="keyword">char</span> ch = (<span class="keyword">char</span>)<span class="number">104</span>;</span><br></pre></td></tr></table></figure><br>这4种ch的声明是一样的。</p><p>简单值类型的四种就完事了，接下来就是介绍第二种值类型：枚举类型</p><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><p>枚举类型是用一组整数数值的命名常量定义的值类型。<br>用enum来定义<br>比如：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Days&#123;</span><br><span class="line">     Sun, Mon, tue, Wed, thu, Fri, Sat</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>默认情况下关联的数值都是int类型，从0开始，并且往后递增1。也可以显式指定：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Port : <span class="keyword">ushort</span>&#123;</span><br><span class="line">    http = <span class="number">80</span>,</span><br><span class="line">    https = <span class="number">443</span>,</span><br><span class="line">    ftp = <span class="number">20</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>枚举类型的抽象基类是System.Enum,提供多种方法获取有关枚举类型的值和信息。</p><p>第三种值类型就是struct{} 定义的结构类型了。</p><h4 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a><strong>结构类型</strong></h4><p>结构类型是值类型，定义的结构体实例化之后，值是存在<strong>栈</strong>中的。<br>在c#中的结构与其他的不一样，结构只是一种简单的，与class相比功能少很多的类型。<br>特点：</p><ul><li>结构可以带方法、字段、索引、属性、运算符方法和事件</li><li>结构可定义构造函数，但是不能定义析构函数。而且不能定义无参构造函数（因为已经默认定义好了）。</li><li>结构不能继承，不能被继承，也就是结构不能成为其他结构或者类的基础结构。</li><li>结构可以实现接口</li><li>结构成员不能为abstract、virtual、protected</li><li>new 操作符创建结构对象时，会调用对应的构造函数，但是在new之前已经被实例化（分配空间了）。</li><li>不使用new操作符时，只有所有字段都被初始化后，才能使用这个结构对象。</li></ul><blockquote><p>内置类型int，double，bool，char都是属于结构类型（所以内置简单类型都是值类型）。所以说，struct类型是所有值类型的基础。<br>struct类型是不可以继承的，其父类 System.ValueType 只是内置简单类型的<strong>隐式基类</strong>（而不是显式继承）。<br>ValueType是一个抽象类，可以用来传参的时候，将类型限定在ValueType的子类（值类型）<br>隐式继承是不指明继承的父类的时候，自动继承的类。比如自定义的class隐式继承Object，自定义的struct和内置简单类型int等struct都是隐式继承ValueType。 具体可以看: <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tutorials/inheritance#implicit-inheritance" target="_blank">c#中的隐式继承</a><br>所以，struct虽然不能继承和被继承，但是所有自定义的struct都有一个父类ValueType。</p></blockquote><p>example:<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point&#123;</span><br><span class="line">    <span class="comment">// struct 中不能为属性设置初始值，比如 double x=1d; (class才可以)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> X &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Y &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="keyword">double</span> x,<span class="keyword">double</span> y</span>)</span> &#123;</span><br><span class="line">        X = x;</span><br><span class="line">        Y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结构虽然不能继承，但是可以作为其他结构的一个属性</span></span><br><span class="line"><span class="keyword">struct</span> Line &#123;</span><br><span class="line">    <span class="keyword">public</span> Point P1 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Point P2 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Line</span>(<span class="params">Point p1,Point p2</span>)</span> &#123;</span><br><span class="line">        P1 = p1;</span><br><span class="line">        P2 = p2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>像Point这种数据特别小的类型，声明成struct，实例保存在栈中而不使用堆，可以提高效率。</p><h4 id="可为空的值类型"><a href="#可为空的值类型" class="headerlink" title="可为空的值类型"></a>可为空的值类型</h4><p>在默认情况下，C#中所有引用类型可以赋值为null，意味着该类型没有任何的值。但是值类型没有null这个值域，所以说<code>int x=null</code>这种语句就会编译报错。<br>C#提供了一种特殊的数据类型，可以为值类型做扩展，让其在原有值的域的基础上外加一个<code>null</code>的值，这样值类型也可以用null来赋值表示其意义了。</p><p>实现的这个类是一个泛型struct：Nullable<T></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Nullable&lt;T&gt; <span class="keyword">where</span> T : <span class="keyword">struct</span></span><br><span class="line"><span class="comment">// T 表示的是任意类型</span></span><br><span class="line"><span class="comment">// where T ： struct 表示T的类型只能是struct的值类型</span></span><br></pre></td></tr></table></figure><p>例如其中一个具体的Nullable<int> 类，这就使int值域从原先的[$-2^{31}$,$2^{31}$]之外，增加了null。<br>可以直接<code>Nullable&lt;int&gt; x = null;</code><br>Nullable<T>重载了T的运算符，可以像T一样使用它。Nullable<T>里面有两个属性：</p><ol><li>布尔类型的HasValue，也就是保存着这个实例的值是不是null</li><li>T 类型的Value，保存着T的值。</li></ol><p>当HasValue为true时，Value就是这个实例的值，可以直接访问获取或修改；当HasValue为false时，这个实例的值就是null，Value不可访问，否则就会出现异常而终止。</p><p>Nullable<T>声明的时候，可以直接简写为 <code>T?</code> 类型，也就是在值类型之后加一个?就可以表示这个值类型增加了null值域。<br>example:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;<span class="comment">//cc</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] arg</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 简单内置值类型的可为空</span></span><br><span class="line">            <span class="keyword">int</span>? x = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span>? y = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (x.HasValue) Console.WriteLine(<span class="string">"x = "</span> + x);</span><br><span class="line">            <span class="keyword">else</span> Console.WriteLine(<span class="string">"x = null"</span>);</span><br><span class="line">            <span class="keyword">if</span> (y.HasValue) Console.WriteLine(<span class="string">"y = "</span> + y);</span><br><span class="line">            <span class="keyword">else</span> Console.WriteLine(<span class="string">"y = null"</span>);</span><br><span class="line">            <span class="keyword">int</span>  i1;<span class="comment">//默认值为0</span></span><br><span class="line">            <span class="keyword">int</span>? i2;<span class="comment">//默认值为 null</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自定义的值类型的可为空</span></span><br><span class="line">            Point? p = <span class="literal">null</span>;</span><br><span class="line">            Point? p1 = <span class="keyword">new</span> Point(<span class="number">3</span>d, <span class="number">4</span>d);</span><br><span class="line">            Console.WriteLine(p1.Value.X);</span><br><span class="line">            Console.WriteLine(p1.Value.Y);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可为空的值类型的数组</span></span><br><span class="line">            <span class="keyword">int</span>?[] list = <span class="keyword">new</span> <span class="keyword">int</span>?[<span class="number">10</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Point&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> X &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> Y &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Point</span>(<span class="params"><span class="keyword">double</span> x,<span class="keyword">double</span> y</span>)</span> &#123;</span><br><span class="line">            X = x;</span><br><span class="line">            Y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>null 合并运算符: <code>??</code></p><p>需要获取可为空的值的时候，可能需要分配指定的值来代替null，Nullable<T>.GetValueOrDefault(T)这个方法就可以实现这个目的。参数T是传入的默认值。<br>为了简便，两个问号操作符也可以达到这个目的(也作为一种简写)：<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>? x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>? y = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">int</span> p1 = x ?? <span class="number">20</span>; <span class="comment">//等价于 x.GetValueOrDefault(20);</span></span><br><span class="line"><span class="keyword">int</span> p2 = y ?? <span class="number">20</span>; <span class="comment">//等价于 y.GetValueOrDefault(20);</span></span><br><span class="line"><span class="comment">// p1=10,p2=20;</span></span><br></pre></td></tr></table></figure></p><p><hr/></p><h4 id="值类型总结"><a href="#值类型总结" class="headerlink" title="值类型总结"></a><strong>值类型总结</strong></h4><p>总之，值类型的继承链为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|-- <span class="class"><span class="keyword">class</span> <span class="title">Object</span>（所有的父类）</span></span><br><span class="line"><span class="class">|     |</span></span><br><span class="line"><span class="class">|     | --(显)-- <span class="title">class</span> <span class="title">ValueType</span> （所有值类型的父类）</span></span><br><span class="line"><span class="class">|     |            | --(显)-- <span class="title">class</span> <span class="title">Enum</span> </span></span><br><span class="line"><span class="class">|     |            |            | --(隐)-- <span class="title">enum</span> &#123;</span>&#125; 自定义枚举值类型</span><br><span class="line">|     |            |</span><br><span class="line">|     |            | --(隐)-- <span class="class"><span class="keyword">struct</span> <span class="title">Int32</span>等 （<span class="title">int</span>，<span class="title">double</span>，<span class="title">char</span> 等内置值类型）</span></span><br><span class="line"><span class="class">|     |            |</span></span><br><span class="line"><span class="class">|     |            | --(隐)-- <span class="title">struct</span> <span class="title">Nullable</span>&lt;T&gt; 实例是为可空值类型</span></span><br><span class="line"><span class="class">|     |            |</span></span><br><span class="line"><span class="class">|     |            | --(隐)-- <span class="title">struct</span> &#123;</span>&#125;（自定义结构体值类型）</span><br></pre></td></tr></table></figure><p>（最终的实例都是struct，struct都是从上面的隐性继承）。</p><hr/><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型与值类型不同，变量存储的是引用的值的地址，对应的引用的值存在于堆中由CLR进行管理。多个变量可以引用同一个值，所以其中一个变量改变值的时候可能会改变另一个变量引用的对象。引用类型中变量赋值的时候，只是复制变量里的地址，也是引用的数据不会复制，复制后的变量与原先的变量指向同一块数据。</p><p>C#中，引用类型分为四类：</p><ul><li>类类型：类类型有三种，其中两种为内置的类型（object和string）<ul><li>所有的类型的基类： <code>object(System.Object)</code></li><li>Unicode字符串：<code>string(System.String)</code></li><li>自定义类: 格式为 <code>class C {...}</code> 用户自定义的类类型</li></ul></li><li>接口类型：格式为 <code>interface I {...}</code> 的用户自定义接口类型</li><li>数组类型：n维数组类型,如 <code>int[],int[][],int[][][]</code>….</li><li>委托类型：格式为 <code>delegate type D(...)</code> 的用户自定义类型</li></ul><hr/><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="隐式与显式类型转换"><a href="#隐式与显式类型转换" class="headerlink" title="隐式与显式类型转换"></a>隐式与显式类型转换</h3><p>隐式类型转换是C#默认的安全方式的转换，不会导致数据丢失。比如从小的整数转化为大的整数，从派生类转化为基类。<br>例如：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> y = x;<span class="comment">//隐式转换</span></span><br></pre></td></tr></table></figure></p><p>大类型一般不能转化为小类型，比如long转化为int的时候就可能会丢失数据，强制类型的转换可能会导致溢出等问题。<br>强制转换可以用<code>(type)var</code> ，也可以用<code>System.Convert</code>类的静态函数：<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">1.34455555555</span>;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="keyword">int</span>)d;</span><br><span class="line"><span class="keyword">int</span> y = System.Convert.ToInt32(d);<span class="comment">//两者效果一样</span></span><br><span class="line">Console.WriteLine(<span class="string">"x = &#123;0&#125;, y = &#123;1&#125;"</span>,x,y);</span><br></pre></td></tr></table></figure></p><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p><strong>装箱</strong>操作是把值类型转换为引用类型<br><strong>拆箱</strong>操作是把引用类型转化为值类型<br>利用装箱和拆箱功能，允许值类型的任何值都与object类的值相互转化，让引用类型和值类型连接起来。</p><p>装箱会在堆上分配内存，将值类型的值复制到堆里，生成的引用变量指向这个产生的副本。复制之后就与原先装箱的值变量没有关系了，所以说不会影响到原先的值类型的值。<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> val = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">object</span> obj1 = val;<span class="comment">//隐式装箱，变为引用类型</span></span><br><span class="line"><span class="keyword">object</span> obj2 = (<span class="keyword">object</span>)val; <span class="comment">//显式装箱</span></span><br></pre></td></tr></table></figure><br>拆箱是将装箱之后的引用变量的值（在堆里），复制到给定的值变量中，也是拷贝一个副本。<br>注：（只有装箱后的引用变量才能拆箱！！）。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> val = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">object</span> obj = val;<span class="comment">// 隐式装箱</span></span><br><span class="line"><span class="keyword">int</span> copy = (<span class="keyword">int</span>)obj;<span class="comment">// 显式拆箱（不可隐式拆箱）</span></span><br></pre></td></tr></table></figure><br>拆箱和装箱都是对值的副本的拷贝，操作拷贝后的副本对原先的值不会造成影响。</p><p>可为空的值类型的装箱：如果HasValue为False，那就会返回null的引用；否则就跟正常装箱一样，将Value复制到堆里，然后引用变量指向这个复制的位置。<br>拆箱的时候，可以将原先的值类型拆成可为空的值类型。<br>可以看官网上的example：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">41</span>;</span><br><span class="line"><span class="keyword">object</span> aBoxed = a;</span><br><span class="line"><span class="keyword">int</span>? aNullable = (<span class="keyword">int</span>?)aBoxed;</span><br><span class="line">Console.WriteLine(<span class="string">$"Value of aNullable: <span class="subst">&#123;aNullable&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> aNullableBoxed = aNullable;</span><br><span class="line"><span class="keyword">if</span> (aNullableBoxed <span class="keyword">is</span> <span class="keyword">int</span> valueOfA)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"aNullableBoxed is boxed int: <span class="subst">&#123;valueOfA&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Value of aNullable: 41</span></span><br><span class="line"><span class="comment">// aNullableBoxed is boxed int: 41</span></span><br></pre></td></tr></table></figure><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p>一个变量只不过是供程序操作的存储区的名字，在C#中，每个变量都有一个特定的类型，类型决定着变量的内存大小和布局。<br>C#中的变量定义与初始化与C++、java的一样，左值和右值的区分也相同。</p><p>其中<strong><em>var</em></strong>关键字可以让编译器自动识别类型（类似于c++的auto关键字），需要定义的时候就初始化，而且类型是不可改变的。<br>example<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">"123456"</span>; <span class="comment">//x 类型为string</span></span><br></pre></td></tr></table></figure></p><p>C#常量可以使用字面常量（内置的值类型,具体见上面的值类型介绍），也可以用<code>const</code>关键词来定义一个常量。<br>example：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">string</span> str = <span class="string">"stringstring"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>C#中的运算符与c++的类似，算术运算符、关系运算符、逻辑运算符、位运算符，赋值运算符都一样，只不过多了一些特殊的运算符：</p><ul><li>类型测试is运算符：is ， 如<code>E is T</code>，测试E是否与给定类型T相兼容<br>有匹配的测试：<code>E is T v</code>,如果E is T的表达式是true，那么就将E转换的结果分配给变量v。</li><li>as运算符：as运算符将结果强制转化为给定的引用，如果不能转换就返回null，永远不会造成异常。如<code>obj = E as T</code></li><li>()强制转换运算符：用括号来进行显式强制转换，如果转换失败就会引发异常。<br>如<code>int x = (int)d;</code></li><li>typeof()运算符：用于获取某个类型的System.Type实例。运行的时候可以用obj.GetType()方法来获取实例的Type。</li><li>! (null包容)运算符：（skip）</li><li><p>=&gt; 运算符：有两种形式：作为lambda运算符、作为成员名称的分隔符和表达式主体定义  的成员实现（这里只说第二种，lambda往后会再介绍）。<br>表达式主体定义：<code>member =&gt; expression</code><br>其中expression是有效表达式，返回类型必须可隐式转化为成员的返回类型<br>example：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span> =&gt; <span class="string">$"<span class="subst">&#123;fname&#125;</span> <span class="subst">&#123;lname&#125;</span>"</span>.Trim();</span><br></pre></td></tr></table></figure><p>这个是以下代码的简写：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">$"<span class="subst">&#123;fname&#125;</span> <span class="subst">&#123;lname&#125;</span>"</span>.Trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>声明语句： var x = 10;</p><p>表达式语句：(x+1)/10;</p><p>选择语句：</p><ul><li>if(){}</li><li>if(){}else{}</li><li>if(){}else if(){}else{}</li><li>switch(){}</li><li>三目运算符： exp1 ? exp2 : exp3;</li></ul><p>迭代语句：</p><ul><li>while(){}</li><li>do{}while();</li><li>for(;;;){}</li><li><strong>foreach语句</strong>,如： <code>foreach (var s in list){}</code></li></ul><p>跳转语句：</p><ul><li>break</li><li>continue</li><li>default</li><li>goto</li><li>return</li><li>yield</li></ul><p>异常处理：</p><ul><li>throw</li><li>try{}catch(){}finally{}</li></ul><p>空语句： 只含分号 ;</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><hr/></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.runoob.com/csharp/csharp-tutorial.html" target="_blank">C#菜鸟教程</a></li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/index" target="_blank">C#文档</a></li><li><a href="https://docs.microsoft.com/zh-cn/xamarin/android/get-started/java-developers" target="_blank">介绍面向 Java 开发人员的 C# 编程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序结构&quot;&gt;&lt;a href=&quot;#程序结构&quot; class=&quot;headerlink&quot; title=&quot;程序结构&quot;&gt;&lt;/a&gt;程序结构&lt;/h2&gt;&lt;p&gt;Hello World!:&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>.NET Framework 与 CLR 概述</title>
    <link href="https://yanghaku.github.io/2020/02/25/NET%20Framework%E6%A6%82%E8%BF%B0/"/>
    <id>https://yanghaku.github.io/2020/02/25/NET%20Framework%E6%A6%82%E8%BF%B0/</id>
    <published>2020-02-25T09:39:00.000Z</published>
    <updated>2020-02-26T10:28:18.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h2><p>.NET Framework 是 .NET 框架的一种实现（在windows平台上），用于代码编译和执行的集成托管环境。它包括两个部分：CLR（Common Language Runtime，公共语言运行时）和 FCL（Framework Class Library,.NET Framework Library类库）。公共语言运行时是.NET Framework 的基础。CLR可以看做一个执行时管理代码的代理，能够提供内存管理、线程管理等核心服务，并且还能强制实施严格的类型安全等来保证代码的准确性。以运行时为目标的代码称为托管代码，不以运行时为目标的代码称为非托管代码。类库是一个综合性的面向对象的可重用类型集合，可以用来开发命令行、GUI、基于ASP.NET的web窗体等应用。<br>环境的结构图：<br><a id="more"></a><br><img src="1.png" alt=""><br>这样的框架，使得不同的语言可以同时在一个项目里，支持多平台，而且提供了更安全的执行环境。</p><h2 id="Common-Language-Runtime"><a href="#Common-Language-Runtime" class="headerlink" title="Common Language Runtime"></a>Common Language Runtime</h2><h3 id="CIL"><a href="#CIL" class="headerlink" title="CIL"></a>CIL</h3><p>CIL(Common Intermediate Language，也叫IL，公共中间语言)是.NET 兼容语言的源码编译成的中间语言，可以在任意的.NET运行时上运行，并且有安全的内存和类型检查。</p><h3 id="CLR"><a href="#CLR" class="headerlink" title="CLR"></a>CLR</h3><p>CLR是 .NET framework 的核心，提供管理内存、线程执行、代码执行、代码安全验证、编译以及其他的系统服务。类似于JVM虚拟机，为IL提供运行环境。对于CLR来说，只看IL即可，而不用管IL由哪种语言编译而来的。CLR主要有JIT（实时编译器），GC（垃圾收集器）和BCL（基类库）等部分组成。<br>JIT：just in time，即时编译器，运行的时候将IL编译成二进制的本地语言<br>GC：垃圾收集器，实现内存管理回收垃圾等<br>BCL（base class Library）基础类库，一个公共的编程框架，实现了网络操作，I/O操作，文本操作，数据库操作，XML操作等最基础的类，为所有的框架提供基础支持。</p><h3 id="CLI与CTS、CLS"><a href="#CLI与CTS、CLS" class="headerlink" title="CLI与CTS、CLS"></a>CLI与CTS、CLS</h3><p>由于过去语言和平台的不同，编译语言的内置类型各不相同，为了统一协作，必须有一组标准，这个标准就是CLI（Common Language Infrastructure，公共语言基础结构）。核心是<br>CTS（Common Type System，通用类型系统）和CLS（Common Language Specification，公共语言规范）。<br>CTS定义了在托管代码中一定会使用的类型特征，比如定义了一组内置类型以及每种类型的固有的独有的特征。<br>CLS详细说明了一个.NET兼容编程语言的规则、属性、行为，其主题包括数据类型、类结构、参数传递等。<br>遵循这个标准的语言，能够编译成IL，并可以在.NET框架里面就可以实现相互调用。<br>（CLI是一个国际标准，.NET只是CLI的一个具体实现）</p><h3 id="托管代码与非托管代码"><a href="#托管代码与非托管代码" class="headerlink" title="托管代码与非托管代码"></a>托管代码与非托管代码</h3><p>托管代码（managed code）与非托管代码（unmanaged code）：托管代码是IL，由CLR来运行管理，可以在不同的平台之间兼容，享受CLR提供的垃圾回收等服务。非托管代码是直接编译成的机器码，依赖于平台和语言，而且要自己实现垃圾回收等操作。<br>在.NET里的JIT和java的不一样，在.NET程序被载入内存后，如果某段IL是第一次被运行，JIT就会编译这段IL代码，全部编译成本地代码再执行（所以第一次启动很慢）。微软还附带了可以事先将IL编译成本地代码保存起来的工具，这样执行的效率也就跟静态编译的一样了。（而java是解释器，两者效率根本不同）。JIT的优化可以针对本地的CPU，在编译的时候进行优化。而非托管的代码提前编译的时候为了兼容通常使用通用的指令集。所以JIT充分利用CPU的附加指令，效率的提升是很可观的。</p><h2 id="NET-Framework-Class-Library-（FCL）"><a href="#NET-Framework-Class-Library-（FCL）" class="headerlink" title=".NET Framework Class Library （FCL）"></a>.NET Framework Class Library （FCL）</h2><p>.NET Framework Library是一个与公共语言运行时密切结合的可重用的类型集合。一个面向对象的类库，大部分实现都引用了BCL的东西，是一个大粒度的类库，针对不同的应用程序设计的框架。<br>可以通过GCL用.NET framework开发以下应用：</p><ul><li>Console控制台应用</li><li>Windows GUI 窗体应用</li><li>Windows Presentation（WPF）应用</li><li>ASP.NET 应用</li><li>windows服务</li><li>etc….</li></ul><hr/><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>.NET Framework 概述：<a href="https://docs.microsoft.com/zh-cn/dotnet/framework/get-started/overview">https://docs.microsoft.com/zh-cn/dotnet/framework/get-started/overview</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NET-Framework&quot;&gt;&lt;a href=&quot;#NET-Framework&quot; class=&quot;headerlink&quot; title=&quot;.NET Framework&quot;&gt;&lt;/a&gt;.NET Framework&lt;/h2&gt;&lt;p&gt;.NET Framework 是 .NET 框架的一种实现（在windows平台上），用于代码编译和执行的集成托管环境。它包括两个部分：CLR（Common Language Runtime，公共语言运行时）和 FCL（Framework Class Library,.NET Framework Library类库）。公共语言运行时是.NET Framework 的基础。CLR可以看做一个执行时管理代码的代理，能够提供内存管理、线程管理等核心服务，并且还能强制实施严格的类型安全等来保证代码的准确性。以运行时为目标的代码称为托管代码，不以运行时为目标的代码称为非托管代码。类库是一个综合性的面向对象的可重用类型集合，可以用来开发命令行、GUI、基于ASP.NET的web窗体等应用。&lt;br&gt;环境的结构图：&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
      <category term=".NET Framework" scheme="https://yanghaku.github.io/tags/NET-Framework/"/>
    
  </entry>
  
  <entry>
    <title>SDN中简单模拟DDOS检测与防御</title>
    <link href="https://yanghaku.github.io/2020/02/21/sflowmininet%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9Fddos/"/>
    <id>https://yanghaku.github.io/2020/02/21/sflowmininet%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9Fddos/</id>
    <published>2020-02-21T03:20:00.000Z</published>
    <updated>2020-02-21T12:40:42.446Z</updated>
    
    <content type="html"><![CDATA[<p>使用自定义python脚本，自动利用mininet构建虚拟网络并且设置sflow-rt流量监控，ryu为控制器。</p><h2 id="架构："><a href="#架构：" class="headerlink" title="架构："></a>架构：</h2><a id="more"></a><p><img src="a.png" alt="a.png"></p><p>从上图中可以看到，mininet基于OVS构建出网络之后，由ryu通过南向协议控制，交换机设置sFlow agent之后，采集的flow信息传给sflow-rt收集，然后用户通过REST API实现与ryu和sflow-rt进行通信，从sflow-rt获取流量信息或者向ryu请求添加/删除某些流表。</p><hr/><h3 id="REST-API-介绍"><a href="#REST-API-介绍" class="headerlink" title="REST API 介绍"></a>REST API 介绍</h3><p>REST是Representational State Transfer（表现层状态转移）的缩写，它是由罗伊·菲尔丁（Roy Fielding）提出的，是用来描述创建HTTP API的标准方法的，他发现这四种常用的行为（查看（view），创建（create），编辑（edit）和删除（delete））都可以直接映射到HTTP 中已实现的GET,POST,PUT和DELETE方法。<br>REST API也就是通过HTTP协议实现规定了这四大行为，实现“表现层的状态转化”。每一个URL对应着一个资源，客户与服务端之间传递某种资源的表现层。返回的数据的形式可以是html，json，xml等。</p><p>ryu的app实现了某些REST API，默认的端口是8080，sFlow-rt实现的的默认端口是8008<br>比如说ryu的ofctl_rest.py 里面实现的REST API，在源码里都有对应介绍（详见最下面的附录）。<br>sflow-rt的API（需要启动sflow-rt后查看） <a href="http://(sflow_rt_IP):8008/api/index.html">http://(sflow_rt_IP):8008/api/index.html</a></p><p>访问这些api就通过http请求即可<br>比如用python的request库或者命令行curl</p><p>例：curl查看sflow agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yb@sdn-server:~$ curl http:/127.0.0.1:8008/agents/json</span><br><span class="line">&#123;<span class="string">"127.0.0.1"</span>: &#123;</span><br><span class="line"> <span class="string">"sFlowDatagramsLost"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowDatagramSource"</span>: [<span class="string">"127.0.0.1"</span>],</span><br><span class="line"> <span class="string">"firstSeen"</span>: 1137756,</span><br><span class="line"> <span class="string">"sFlowFlowDuplicateSamples"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowDatagramsReceived"</span>: 451732,</span><br><span class="line"> <span class="string">"sFlowCounterDatasources"</span>: 9,</span><br><span class="line"> <span class="string">"sFlowFlowOutOfOrderSamples"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowFlowSamples"</span>: 4506494,</span><br><span class="line"> <span class="string">"sFlowDatagramsOutOfOrder"</span>: 2,</span><br><span class="line"> <span class="string">"uptime"</span>: 973000,</span><br><span class="line"> <span class="string">"sFlowCounterDuplicateSamples"</span>: 0,</span><br><span class="line"> <span class="string">"lastSeen"</span>: 156756,</span><br><span class="line"> <span class="string">"sFlowDatagramsDuplicates"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowFlowDrops"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowFlowLostSamples"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowCounterSamples"</span>: 867,</span><br><span class="line"> <span class="string">"sFlowCounterLostSamples"</span>: 0,</span><br><span class="line"> <span class="string">"sFlowFlowDatasources"</span>: 7,</span><br><span class="line"> <span class="string">"sFlowCounterOutOfOrderSamples"</span>: 0</span><br><span class="line">&#125;&#125;</span><br><span class="line">yb@sdn-server:~$</span><br></pre></td></tr></table></figure><h3 id="工具的默认端口："><a href="#工具的默认端口：" class="headerlink" title="工具的默认端口："></a>工具的默认端口：</h3><ul><li>控制器：6653，6633</li><li>控制器REST API：8080</li><li>sflow agent：6343</li><li>sflow-rt REST API：8008</li></ul><p>下面就是具体操作了：</p><hr/><h2 id="启动sflow-rt"><a href="#启动sflow-rt" class="headerlink" title="启动sflow-rt"></a>启动sflow-rt</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yb@sdn-server:~$ ./sflow-rt/start.sh</span><br><span class="line">2020-02-21T03:14:32Z INFO: Starting sFlow-RT 3.0-1448</span><br><span class="line">2020-02-21T03:14:36Z INFO: Version check, 3.0-1469 available</span><br><span class="line">2020-02-21T03:14:36Z INFO: Listening, sFlow port 6343</span><br><span class="line">2020-02-21T03:14:36Z INFO: Listening, HTTP port 8008</span><br><span class="line">2020-02-21T03:14:37Z INFO: app/mininet-dashboard/scripts/metrics.js started</span><br><span class="line">2020-02-21T03:14:37Z INFO: app/dashboard-example/scripts/metrics.js started</span><br><span class="line">2020-02-21T03:14:37Z INFO: app/flow-graph/scripts/graph.js started</span><br><span class="line">2020-02-21T03:14:37Z INFO: app/world-map/scripts/countries.js started</span><br><span class="line">2020-02-21T03:14:37Z INFO: app/flow-trend/scripts/top.js started</span><br><span class="line">2020-02-21T03:14:37Z INFO: app/ix-metrics/scripts/metrics.js started</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此时sflow监听开启</p><h2 id="启动ryu"><a href="#启动ryu" class="headerlink" title="启动ryu"></a>启动ryu</h2><p>在这里需要用到ryu的两个app:<br>simple_switch_13.py 实现交换机(OpenFlow1.3协议)的转发功能<br>ofctl_rest.py 用于通过REST API进行添加/删除流表，实现阻止DDOS的流量<br>两个都在ryu安装目录的app里面</p><p>启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yb@sdn-server:~$ ryu-manager ryu/app/simple_switch_13.py ryu/app/ofctl_rest.p y</span><br><span class="line">loading app ryu/app/simple_switch_13.py</span><br><span class="line">loading app ryu/app/ofctl_rest.py</span><br><span class="line">loading app ryu.controller.ofp_handler</span><br><span class="line">instantiating app None of DPSet</span><br><span class="line">creating context dpset</span><br><span class="line">creating context wsgi</span><br><span class="line">instantiating app ryu/app/simple_switch_13.py of SimpleSwitch13</span><br><span class="line">instantiating app ryu.controller.ofp_handler of OFPHandler</span><br><span class="line">instantiating app ryu/app/ofctl_rest.py of RestStatsApi</span><br><span class="line">(10379) wsgi starting up on http://0.0.0.0:8080</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="启动mininet构建虚拟网络"><a href="#启动mininet构建虚拟网络" class="headerlink" title="启动mininet构建虚拟网络"></a>启动mininet构建虚拟网络</h2><p>这个是最关键的，使用python脚本，实现自定义的拓扑，并且将每个交换机都设置好控制器和sflow代理。</p><blockquote><p>如果不需要自定义的话，简单一个命令就可以搞定， —custom来设定的sflow-rt/extras里面的sflow.py就是可以自动将mininet里的交换机设置代理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mn --controller=remote,ip=127.0.0.1,port=6633 --custom</span><br><span class="line">sflow-rt/extras/sflow.py --switch ovs,protocols=OpenFlow13</span><br></pre></td></tr></table></figure></p></blockquote><p>但是，为了可以实现复杂的网络拓扑，还有其他特性的设置，编写自定义的脚本还是非常非常重要的。</p><p>下面就是实现的一个自定义脚本：</p><p>首先是实现一个自定义的拓扑类（继承mininet.topo.Topo）,构造函数的参数是交换机的个数和主机个数，建边的函数就决定了拓扑的复杂性（这里只是简单测试，所以写的建边函数只是线性连接的）。</p><p>customTopology.py(具体看注释):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mininet.topo <span class="keyword">import</span> Topo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义拓扑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTopology</span><span class="params">(Topo)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造函数,s_num为交换机个数,h_num为主机个数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, switch_num, host_num)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'*** Class CustomTopology init'</span></span><br><span class="line"></span><br><span class="line">        self.switch_list = []  <span class="comment"># 交换机列表初始化</span></span><br><span class="line">        self.host_list = []  <span class="comment"># 主机列表初始化</span></span><br><span class="line">        Topo.__init__(self)  <span class="comment"># 父类构造函数</span></span><br><span class="line">        self.create_nodes(switch_num, host_num)  <span class="comment"># 创建节点</span></span><br><span class="line">        self.create_links()  <span class="comment"># 创建链路</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'*** Class CustomTopology init Success'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建节点的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_nodes</span><span class="params">(self, switch_num, host_num)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'*** Add switches and hosts to Topology'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, switch_num + <span class="number">1</span>):</span><br><span class="line">            self.switch_list.append(self.addSwitch(<span class="string">"s%d"</span> % i))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, host_num + <span class="number">1</span>):</span><br><span class="line">            self.host_list.append(self.addHost(<span class="string">'h%d'</span> % i))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建链路的函数, 建边函数决定了自定义拓扑的复杂度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_links</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'*** Add links to Topology'</span></span><br><span class="line">        self.addLink(self.switch_list[<span class="number">0</span>],self.switch_list[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(self.host_list)):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line">                self.addLink(self.switch_list[<span class="number">0</span>], self.host_list[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.addLink(self.switch_list[<span class="number">1</span>], self.host_list[i])</span><br></pre></td></tr></table></figure></p><p>然后就是创建网络的脚本了，需要import上面的<code>customTopology.py</code><br>具体顺序是：创建拓扑 -&gt; 根据拓扑创建网络 -&gt; 将交换机openflow协议设置成1.3版本 -&gt; 设置sflow代理，将所有交换机加入代理 -&gt; 将mininet的拓扑通过REST API发送给sflow-rt -&gt; 创建完成，打开mininet的CLI。</p><p>具体可以看代码createNet.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Mininet自定义脚本</span></span><br><span class="line"><span class="string">通过Mininet的API实现构建自定义网络，并设置sflow代理</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mininet.net <span class="keyword">import</span> Mininet</span><br><span class="line"><span class="keyword">from</span> mininet.node <span class="keyword">import</span> RemoteController</span><br><span class="line"><span class="keyword">from</span> mininet.cli <span class="keyword">import</span> CLI</span><br><span class="line"><span class="keyword">from</span> mininet.link <span class="keyword">import</span> TCLink</span><br><span class="line"><span class="keyword">from</span> mininet.util <span class="keyword">import</span> quietRun, customClass</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入request，通过REST API 与 sflow-rt 通信</span></span><br><span class="line"><span class="keyword">from</span> customTopology <span class="keyword">import</span> CustomTopology  <span class="comment"># 导入自定义的拓扑类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置交换机的OpenFlow协议版本</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configOpenFlow</span><span class="params">(net, protocol)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'*** set ovs protocols ='</span> + protocol</span><br><span class="line">    cmd = <span class="string">'ovs-vsctl set bridge %s protocols='</span> + protocol</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> net.switches:</span><br><span class="line">        quietRun(cmd % s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置sflow agent</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configSFlow</span><span class="params">(net, agent_ifname, collector, sampling, polling)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'*** config SFlow agent'</span></span><br><span class="line">    cmd = <span class="string">'ovs-vsctl -- --id=@sflow create sflow agent=%s target=%s sampling=%d polling=%d --'</span> % \</span><br><span class="line">          (agent_ifname, collector, sampling, polling)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> net.switches:</span><br><span class="line">        cmd += <span class="string">' -- set bridge %s sflow=@sflow'</span> % s</span><br><span class="line">    quietRun(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向sFlow-rt 发送当前拓扑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendTopology</span><span class="params">(net, agent_ip, collector)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"*** Sending topology"</span></span><br><span class="line">    nodes = &#123;&#125;</span><br><span class="line">    links = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> net.switches:</span><br><span class="line">        nodes[s.name] = &#123;<span class="string">'agent'</span>: agent_ip, <span class="string">'ports'</span>: &#123;&#125;&#125;</span><br><span class="line">    path = <span class="string">'/sys/devices/virtual/net/'</span>  <span class="comment"># 虚拟网络存储的位置</span></span><br><span class="line">    pattern = re.compile(<span class="string">'(^.+)-(.+)'</span>)  <span class="comment"># 编译正则表达式，用于匹配所有 s1-eth1 这种设备</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> os.listdir(path):  <span class="comment"># 遍历这个文件夹， 获取每个交换机的端口</span></span><br><span class="line">        parts = pattern.match(child)</span><br><span class="line">        <span class="comment"># 如果存在匹配并且交换机在node列表里，就加入配置</span></span><br><span class="line">        <span class="comment"># 比如s1-eth1, parts.group(0)='s1-eth1' , parts.group(1)='s1', parts.group(2)='eth1'</span></span><br><span class="line">        <span class="keyword">if</span> parts <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> parts.group(<span class="number">1</span>) <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="comment"># 获取端口的id</span></span><br><span class="line">            ifindex = open(path + child + <span class="string">'/ifindex'</span>).read().strip(<span class="string">'\n'</span>)</span><br><span class="line">            nodes[parts.group(<span class="number">1</span>)][<span class="string">'ports'</span>][child] = &#123;<span class="string">'ifindex'</span>: ifindex&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计交换机两两之间是不是有连接link</span></span><br><span class="line">    length = len(net.switches)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(i + <span class="number">1</span>, length):</span><br><span class="line">            s1 = net.switches[i]</span><br><span class="line">            s2 = net.switches[j]</span><br><span class="line">            intfs = s1.connectionsTo(s2)  <span class="comment"># 两个交换机直接的连接</span></span><br><span class="line">            <span class="keyword">for</span> intf <span class="keyword">in</span> intfs:</span><br><span class="line">                link = <span class="string">'%s-%s'</span> % (s1.name, s2.name)</span><br><span class="line">                links[link] = &#123;</span><br><span class="line">                    <span class="string">'node1'</span>: s1.name,</span><br><span class="line">                    <span class="string">'node2'</span>: s2.name,</span><br><span class="line">                    <span class="string">'port1'</span>: intf[<span class="number">0</span>].name,  <span class="comment"># 两个端口，一个属于s1，一个属于s2</span></span><br><span class="line">                    <span class="string">'port2'</span>: intf[<span class="number">1</span>].name</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向sFlow-rt 发送拓扑信息， sFlow-rt 端口默认8008</span></span><br><span class="line">    requests.put(<span class="string">'http://%s:8008/topology/json'</span> % collector, json=&#123;<span class="string">'nodes'</span>: nodes, <span class="string">'links'</span>: links&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络的主函数, 参数分别是:控制器的ip, sFlow收集器(sFlow-rt)的ip, sFlow agent的网卡, Sflow agent的ip</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNet</span><span class="params">(controller_ip, sFlow_collector, sFlow_agent_ifname, sFlow_agent_ip)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化拓扑</span></span><br><span class="line">    topology = CustomTopology(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># Rate limit links to 10Mbps</span></span><br><span class="line">    link = customClass(&#123;<span class="string">'tc'</span>: TCLink&#125;, <span class="string">'tc,bw=10'</span>)</span><br><span class="line">    <span class="comment"># 根据初始化网络</span></span><br><span class="line">    net = Mininet(topo=topology, link=link, controller=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 增加控制器，控制器端口默认都是6633和6653</span></span><br><span class="line">    net.addController(<span class="string">'ryu-controller'</span>, controller=RemoteController, ip=controller_ip, port=<span class="number">6633</span>)</span><br><span class="line">    <span class="comment"># 启动网络</span></span><br><span class="line">    net.start()</span><br><span class="line">    <span class="comment"># 设置交换机的OpenFlow版本</span></span><br><span class="line">    configOpenFlow(net, <span class="string">'OpenFlow13'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置sFlow agent</span></span><br><span class="line">    configSFlow(net, sFlow_agent_ifname, sFlow_collector, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向sFlow-rt 发送当前拓扑</span></span><br><span class="line">    sendTopology(net, sFlow_agent_ip, sFlow_collector)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 互相ping测试连通</span></span><br><span class="line">    net.pingAll()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试带宽</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"*** Testing bandwidth between h1 and h4"</span></span><br><span class="line">    h1, h4 = net.get(<span class="string">'h1'</span>, <span class="string">'h4'</span>)</span><br><span class="line">    net.iperf((h1, h4))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开启命令行</span></span><br><span class="line">    CLI(net)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后关闭网络</span></span><br><span class="line">    net.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> os.getuid() != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'You are not root!!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 预先定义的变量</span></span><br><span class="line">        controller_ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">        sFlow_collector = <span class="string">'127.0.0.1'</span></span><br><span class="line">        sFlow_agent_ifname = <span class="string">'lo'</span>  <span class="comment"># 因为虚拟网络和收集器是在同一个主机，所以直接用环回测试网卡做agent即可</span></span><br><span class="line">        sFlow_agent_ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">        createNet(controller_ip, sFlow_collector, sFlow_agent_ifname, sFlow_agent_ip)</span><br></pre></td></tr></table></figure><p>然后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x *.py</span><br><span class="line">sudo ./createNet.py</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">yb@sdn-server:~/code$ sudo ./createNet.py</span><br><span class="line">*** Class CustomTopology init</span><br><span class="line">*** Add switches and hosts to Topology</span><br><span class="line">*** Add links to Topology</span><br><span class="line">*** Class CustomTopology init Success</span><br><span class="line">*** <span class="built_in">set</span> ovs protocols =OpenFlow13</span><br><span class="line">*** config SFlow agent</span><br><span class="line">*** Sending topology</span><br><span class="line">*** Ping: testing ping reachability</span><br><span class="line">h1 -&gt; h2 h3 h4</span><br><span class="line">h2 -&gt; h1 h3 h4</span><br><span class="line">h3 -&gt; h1 h2 h4</span><br><span class="line">h4 -&gt; h1 h2 h3</span><br><span class="line">*** Results: 0% dropped (12/12 received)</span><br><span class="line">*** Testing bandwidth between h1 and h4</span><br><span class="line">*** Iperf: testing TCP bandwidth between h1 and h4</span><br><span class="line">*** Results: [<span class="string">'9.34 Mbits/sec'</span>, <span class="string">'10.0 Mbits/sec'</span>]</span><br><span class="line">mininet&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>脚本产生了一个4个host，2个switch的网络，s1连接着h1,h2,s2连接着h3,h4，s1和s2连接。</p><p>这个时候，就可以用浏览器打开sflow-rt的ip:8008, 点开任意的app可以看到对应监控的信息了,比如点开dashboard-example：</p><p><img src="1.png" alt=""></p><h2 id="流量检测与处理脚本"><a href="#流量检测与处理脚本" class="headerlink" title="流量检测与处理脚本"></a>流量检测与处理脚本</h2><p>接下来就是通过sflow-rt获取流量数据进行处理判断了。<br>流程是：在sflow-rt 定义一个流，然后注册这个流的阈值，这个流超过阈值的时候sflow-rt就会生成对应的事件，然后脚本一直等待得到这个事件，得到后进行处理即可。</p><p>假设模拟的是UDP的泛洪攻击（源端口不变）的检测与防御，那么就向sflow-rt 定义监控 目的ip和源udp端口两个特征。<br>如果超过了这个值，那么就向ryu控制器发送信息（也是通过REST API），增加一个流表项：将这个流的处理动作变成drop，就实现了一次防御。</p><p>具体可以看代码和注释 ddosDection.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">构建网络后, 通过REST API从sFlow-rt获取flow信息, 发现ddos攻击的时候, 通过REST API给控制器信息修改流表，实现防御</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">测试udp</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理事件的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(controller_ip, event)</span>:</span></span><br><span class="line">    ryu = <span class="string">'http://'</span> + controller_ip + <span class="string">':8080/'</span>  <span class="comment"># ryu的默认端口是8080</span></span><br><span class="line">    flowKey = event[<span class="string">'flowKey'</span>]</span><br><span class="line">    dest_ip, source_udp = flowKey.split(<span class="string">','</span>)</span><br><span class="line">    msg = &#123;  <span class="comment"># 定义向控制器发送的信息，添加新的流表项</span></span><br><span class="line">        <span class="string">"dpid"</span>: <span class="number">1</span>,  <span class="comment"># Datapath ID</span></span><br><span class="line">        <span class="comment"># 没有action，默认就是丢掉</span></span><br><span class="line">        <span class="string">'priority'</span>: <span class="number">4000</span>,  <span class="comment"># 优先级调到最高</span></span><br><span class="line">        <span class="string">"hard_timeout"</span>: <span class="number">120</span>,  <span class="comment"># 设置硬生存时间，使当前阻塞只持续两分钟</span></span><br><span class="line">        <span class="string">"match"</span>: &#123;  <span class="comment"># 流表项的匹配域</span></span><br><span class="line">            <span class="string">"dl_type"</span>: <span class="number">0x800</span>,  <span class="comment"># 以太网头的类型0x80，也就是ip协议</span></span><br><span class="line">            <span class="string">"nw_dst"</span>: dest_ip + <span class="string">'/32'</span>,  <span class="comment"># 目的ip</span></span><br><span class="line">            <span class="string">"nw_proto"</span>: <span class="number">17</span>,  <span class="comment"># ip 头的协议类型17， 也就是udp</span></span><br><span class="line">            <span class="string">"tp_src"</span>: source_udp  <span class="comment"># udp的源端口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(ryu + <span class="string">'stats/flowentry/add'</span>, data=json.dumps(msg))</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'handle event: blocking the flowKey=%s\n'</span> % flowKey</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'handle event %s fail\n'</span> % flowKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(controller_ip, collector_ip)</span>:</span></span><br><span class="line">    rt = <span class="string">'http://'</span> + collector_ip + <span class="string">':8008'</span>  <span class="comment"># sFlow-rt的默认端口是8008</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个流的信息, keys为记录的特征，现在设定是 ip目的地址，udp源端口</span></span><br><span class="line">    <span class="comment">#  value 设置的是统计单位为 帧</span></span><br><span class="line">    flow = &#123;<span class="string">'keys'</span>: <span class="string">'ipdestination,udpsourceport'</span>, <span class="string">'value'</span>: <span class="string">'frames'</span>&#125;</span><br><span class="line">    <span class="comment"># 设置流的名字是 udp_test_flow</span></span><br><span class="line">    flow_name = <span class="string">'udp_test_flow'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用REST API 发送给sFlow-rt</span></span><br><span class="line">    status_code = requests.put(<span class="string">'%s/flow/%s/json'</span> % (rt, flow_name), data=json.dumps(flow)).status_code</span><br><span class="line">    <span class="keyword">if</span> status_code != <span class="number">204</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'PUT flow ERROR! status_code is '</span> + str(status_code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个阈值信息作为度量值，如果超过了这个阈值就会生成事件发送过来</span></span><br><span class="line">    <span class="comment"># metric 为定义的流名字, value为阈值, byFlow是以流为统计基础</span></span><br><span class="line">    threshold = &#123;<span class="string">'metric'</span>: flow_name, <span class="string">'value'</span>: <span class="number">100</span>, <span class="string">'byFlow'</span>: <span class="literal">True</span>, <span class="string">'timeout'</span>: <span class="number">2</span>&#125;</span><br><span class="line">    <span class="comment"># 设置这个阈值事件的名字为 udp_test</span></span><br><span class="line">    threshold_name = <span class="string">'udp_test'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用REST API 发送给sFlow-rt</span></span><br><span class="line">    status_code = requests.put(<span class="string">'%s/threshold/%s/json'</span> % (rt, threshold_name), data=json.dumps(threshold)).status_code</span><br><span class="line">    <span class="keyword">if</span> status_code != <span class="number">204</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'PUT threshold ERROR! status_code is '</span> + str(status_code)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义这个阈值之后，超过了就会生成一个事件，所以一直循环监控这个事件就可以了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 事件的url, get参数里指明之前定义的阈值名字， 最大的返回事件个数等</span></span><br><span class="line">    event_url = <span class="string">'%s/events/json?thresholdID=%s&amp;maxEvents=10&amp;timeout=60'</span> % (rt, threshold_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># eventID 指明的是下一个接收的event 为 这个eventID 之后的，所以第一次的时候为 -1</span></span><br><span class="line">    eventID = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'listening event %s start'</span> % threshold_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = requests.get(event_url + <span class="string">'&amp;eventID='</span> + str(eventID))</span><br><span class="line">        <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'GET events Error! HTTP response code is '</span> + str(r.status_code)</span><br><span class="line">            <span class="keyword">print</span> r.text</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        events = r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(events) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># events 为json解析后的一个event的list，序号越小的eventID越大</span></span><br><span class="line">        eventID = events[<span class="number">0</span>][<span class="string">"eventID"</span>]</span><br><span class="line">        events.reverse()</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> events:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'---------------------'</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'time: '</span> + time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,</span><br><span class="line">                                           time.localtime(e[<span class="string">'timestamp'</span>] / <span class="number">1000</span>))  <span class="comment"># 毫秒级时间戳除以1000变成秒级</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'event: id=%d, thresholdID=%s, metric=%s'</span> % (e[<span class="string">'eventID'</span>], e[<span class="string">'thresholdID'</span>], e[<span class="string">'metric'</span>])</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'threshold = %d , value = %d'</span> % (e[<span class="string">'threshold'</span>], e[<span class="string">'value'</span>])</span><br><span class="line">            ip, udp = e[<span class="string">'flowKey'</span>].split(<span class="string">','</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'flowKey: ipdestination = %s, udpsourceport = %s'</span> % (ip, udp)</span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理这个事件</span></span><br><span class="line">            handle(controller_ip, e)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 等待1s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run(<span class="string">'127.0.0.1'</span>, <span class="string">'127.0.0.1'</span>)</span><br></pre></td></tr></table></figure><p>先在刚才mininet的CLI运行：<br>(hping3工具是可以模拟ddos工具，使用前需要先<code>sudo apt install hping3</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1 hping3 --flood --udp -k -s 53 h3</span><br></pre></td></tr></table></figure><p>—flood 是尽可能快得发送， —udp是构造udp模式， -k 保持源端口 -s 53 基础源端口设置53</p><p>然后再运行检测防御的脚本<code>python ddosDection.py</code><br>可以看到, 开始的时候出现流量暴增，当运行了脚本之后，流量下降一大半:<br><img src="3.png" alt=""></p><p>脚本的输出：<br><img src="4.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，实现了脚本自动构建网络，设置sflow代理等。</p><p>在这个架构上，控制器ryu，sFlow收集器sflow-rt，mininet构建的虚拟网络都可以在不同的主机上，设置好ip地址即可。</p><p>不足/需要完善的地方:</p><ul><li>sflow-rt 和 mininet搭建的网络还不能分散在不同的主机上（因为代理用的lo环回测试网卡）</li><li>sflow-rt的REST API和ryu REST API调用还没有熟悉</li></ul><p>附： ryu/app/ofctl_rest.py 提供的REST API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># REST API</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve the switch stats</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get the list of all switches</span></span><br><span class="line"><span class="comment"># GET /stats/switches</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get the desc stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/desc/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get flows desc stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/flowdesc/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get flows desc stats of the switch filtered by the fields</span></span><br><span class="line"><span class="comment"># POST /stats/flowdesc/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get flows stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/flow/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get flows stats of the switch filtered by the fields</span></span><br><span class="line"><span class="comment"># POST /stats/flow/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get aggregate flows stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/aggregateflow/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get aggregate flows stats of the switch filtered by the fields</span></span><br><span class="line"><span class="comment"># POST /stats/aggregateflow/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get table stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/table/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get table features stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/tablefeatures/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get ports stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/port/&lt;dpid&gt;[/&lt;port&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of port number is optional</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get queues stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/queue/&lt;dpid&gt;[/&lt;port&gt;[/&lt;queue_id&gt;]]</span></span><br><span class="line"><span class="comment"># Note: Specification of port number and queue id are optional</span></span><br><span class="line"><span class="comment">#       If you want to omitting the port number and setting the queue id,</span></span><br><span class="line"><span class="comment">#       please specify the keyword "ALL" to the port number</span></span><br><span class="line"><span class="comment">#       e.g. GET /stats/queue/1/ALL/1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get queues config stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/queueconfig/&lt;dpid&gt;[/&lt;port&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of port number is optional</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get queues desc stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/queuedesc/&lt;dpid&gt;[/&lt;port&gt;[/&lt;queue_id&gt;]]</span></span><br><span class="line"><span class="comment"># Note: Specification of port number and queue id are optional</span></span><br><span class="line"><span class="comment">#       If you want to omitting the port number and setting the queue id,</span></span><br><span class="line"><span class="comment">#       please specify the keyword "ALL" to the port number</span></span><br><span class="line"><span class="comment">#       e.g. GET /stats/queuedesc/1/ALL/1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get meter features stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/meterfeatures/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get meter config stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/meterconfig/&lt;dpid&gt;[/&lt;meter_id&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of meter id is optional</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get meter desc stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/meterdesc/&lt;dpid&gt;[/&lt;meter_id&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of meter id is optional</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get meters stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/meter/&lt;dpid&gt;[/&lt;meter_id&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of meter id is optional</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get group features stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/groupfeatures/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get groups desc stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/groupdesc/&lt;dpid&gt;[/&lt;group_id&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of group id is optional (OpenFlow 1.5 or later)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get groups stats of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/group/&lt;dpid&gt;[/&lt;group_id&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of group id is optional</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># get ports description of the switch</span></span><br><span class="line"><span class="comment"># GET /stats/portdesc/&lt;dpid&gt;[/&lt;port_no&gt;]</span></span><br><span class="line"><span class="comment"># Note: Specification of port number is optional (OpenFlow 1.5 or later)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update the switch stats</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># add a flow entry</span></span><br><span class="line"><span class="comment"># POST /stats/flowentry/add</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modify all matching flow entries</span></span><br><span class="line"><span class="comment"># POST /stats/flowentry/modify</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modify flow entry strictly matching wildcards and priority</span></span><br><span class="line"><span class="comment"># POST /stats/flowentry/modify_strict</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># delete all matching flow entries</span></span><br><span class="line"><span class="comment"># POST /stats/flowentry/delete</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># delete flow entry strictly matching wildcards and priority</span></span><br><span class="line"><span class="comment"># POST /stats/flowentry/delete_strict</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># delete all flow entries of the switch</span></span><br><span class="line"><span class="comment"># DELETE /stats/flowentry/clear/&lt;dpid&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># add a meter entry</span></span><br><span class="line"><span class="comment"># POST /stats/meterentry/add</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modify a meter entry</span></span><br><span class="line"><span class="comment"># POST /stats/meterentry/modify</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># delete a meter entry</span></span><br><span class="line"><span class="comment"># POST /stats/meterentry/delete</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># add a group entry</span></span><br><span class="line"><span class="comment"># POST /stats/groupentry/add</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modify a group entry</span></span><br><span class="line"><span class="comment"># POST /stats/groupentry/modify</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># delete a group entry</span></span><br><span class="line"><span class="comment"># POST /stats/groupentry/delete</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modify behavior of the physical port</span></span><br><span class="line"><span class="comment"># POST /stats/portdesc/modify</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modify role of controller</span></span><br><span class="line"><span class="comment"># POST /stats/role</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># send a experimeter message</span></span><br><span class="line"><span class="comment"># POST /stats/experimenter/&lt;dpid&gt;</span></span><br></pre></td></tr></table></figure><hr/>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用自定义python脚本，自动利用mininet构建虚拟网络并且设置sflow-rt流量监控，ryu为控制器。&lt;/p&gt;
&lt;h2 id=&quot;架构：&quot;&gt;&lt;a href=&quot;#架构：&quot; class=&quot;headerlink&quot; title=&quot;架构：&quot;&gt;&lt;/a&gt;架构：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/categories/SDN/"/>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>SDN实验环境搭建</title>
    <link href="https://yanghaku.github.io/2020/02/19/SDN%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://yanghaku.github.io/2020/02/19/SDN%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-02-19T13:20:00.000Z</published>
    <updated>2020-02-22T06:02:43.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具选择列表"><a href="#工具选择列表" class="headerlink" title="工具选择列表"></a>工具选择列表</h2><p>操作系统：ubuntu_19.10</p><p>数据平面（虚拟交换机）：OpenvSwitch（OVS）<br>控制器：ryu</p><p>mininet组网工具：mininet是一个用python实现的，可以很快地模拟出OpenFlow交换机（基于Openvswitch）、host以及自定义各种网络拓扑结构。提供命令行CLI和python的API</p><p>sflow-rt：sFlow技术是以设备端口为基本单元的数据流随机采样的流量监控技术。sflow分为sflow agent和sflow collector, sflow agent内嵌在网络设备中将采集的信息封装成sFlow报文发送给sflow collector， sflow-rt为 sflow collector实现的一种工具。</p><a id="more"></a><p>…</p><hr/><h2 id="下载系统，安装，更换源"><a href="#下载系统，安装，更换源" class="headerlink" title="下载系统，安装，更换源"></a>下载系统，安装，更换源</h2><p>清华镜像源下载 ubuntu desktop 19.10<br>VMware安装…</p><p>安装之后首先更换源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><br>改成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ eoan main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ eoan main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ eoan-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ eoan-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ eoan-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ eoan-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ eoan-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ eoan-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ eoan-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ eoan-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后更新系统和软件仓库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>首先安装的软件是vim, 并且设置vim配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim vim-gtk</span><br><span class="line">sudo vim /etc/vim/vimrc.local</span><br></pre></td></tr></table></figure></p><p>添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax on</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="built_in">set</span> cindent</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ssh net-tools python python-pip m4 autoconf libtool git</span><br></pre></td></tr></table></figure><h2 id="安装mininet"><a href="#安装mininet" class="headerlink" title="安装mininet"></a>安装mininet</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mininet</span><br></pre></td></tr></table></figure><p>然后测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yb@ubuntu:~$ mn --version</span><br><span class="line">2.2.2</span><br></pre></td></tr></table></figure><h2 id="安装OpenvSwitch"><a href="#安装OpenvSwitch" class="headerlink" title="安装OpenvSwitch"></a>安装OpenvSwitch</h2><p>从官网下载最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openvswitch.org/releases/openvswitch-2.12.0.tar.gz</span><br><span class="line">tar -zxvf openvswitch-2.12.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openvswitch-2.12.0/</span><br><span class="line">sudo ./boot.sh</span><br><span class="line">sudo ./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc</span><br><span class="line">sudo make &amp; sudo make install</span><br></pre></td></tr></table></figure><p>启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/share/openvswitch/scripts</span><br><span class="line">ovs-ctl start</span><br></pre></td></tr></table></figure></p><p>配置数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /usr/<span class="built_in">local</span>/etc/openvswitch</span><br><span class="line">sudo ovsdb-tool create /usr/<span class="built_in">local</span>/etc/openvswitch/conf.db /usr/share/openvswitch/vswitch.ovsschema</span><br></pre></td></tr></table></figure></p><p>初始化数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ovs-vsctl --no-wait init</span><br></pre></td></tr></table></figure></p><p>最后查看安装状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yb@ubuntu:/var/run/openvswitch$ sudo ovs-vsctl show</span><br><span class="line">0e0bf153-77d4-43ff-9795-5085d959712e</span><br><span class="line">    ovs_version: <span class="string">"2.12.0"</span></span><br><span class="line">yb@ubuntu:/var/run/openvswitch$</span><br></pre></td></tr></table></figure></p><h2 id="安装Ryu"><a href="#安装Ryu" class="headerlink" title="安装Ryu"></a>安装Ryu</h2><h3 id="安装之前"><a href="#安装之前" class="headerlink" title="安装之前"></a>安装之前</h3><p>安装之前需要注意pip下载的包的位置的问题：<br>pip下载的时候会保存到用户的 <code>~/.local/lib/python2.7/site-packets</code>，而当用sudo 运行的时候，包的位置没有包含这个位置，所以就会报错。<br>可以用python -m site看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">yb@ubuntu:~/Downloads$ python -m site</span><br><span class="line">sys.path = [</span><br><span class="line">    <span class="string">'/home/yb/Downloads'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/plat-x86_64-linux-gnu'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/lib-tk'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/lib-old'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/lib-dynload'</span>,</span><br><span class="line">    <span class="string">'/home/yb/.local/lib/python2.7/site-packages'</span>,</span><br><span class="line">    <span class="string">'/usr/local/lib/python2.7/dist-packages'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/dist-packages'</span>,</span><br><span class="line">]</span><br><span class="line">USER_BASE: <span class="string">'/home/yb/.local'</span> (exists)</span><br><span class="line">USER_SITE: <span class="string">'/home/yb/.local/lib/python2.7/site-packages'</span> (exists)</span><br><span class="line">ENABLE_USER_SITE: True</span><br><span class="line">yb@ubuntu:~/Downloads$ sudo python -m site</span><br><span class="line">sys.path = [</span><br><span class="line">    <span class="string">'/home/yb/Downloads'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/plat-x86_64-linux-gnu'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/lib-tk'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/lib-old'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/lib-dynload'</span>,</span><br><span class="line">    <span class="string">'/usr/local/lib/python2.7/dist-packages'</span>,</span><br><span class="line">    <span class="string">'/usr/lib/python2.7/dist-packages'</span>,</span><br><span class="line">]</span><br><span class="line">USER_BASE: <span class="string">'/root/.local'</span> (doesn<span class="string">'t exist)</span></span><br><span class="line"><span class="string">USER_SITE: '</span>/root/.<span class="built_in">local</span>/lib/python2.7/site-packages<span class="string">' (doesn'</span>t exist)</span><br><span class="line">ENABLE_USER_SITE: True</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">可见两者差别。</span><br><span class="line"></span><br><span class="line">所以要在安装任何python包之前，将这个用户自己的包位置关掉，就不会出现这个问题了！</span><br><span class="line">```bash</span><br><span class="line">sudo vim /usr/lib/python2.7/site.py</span><br></pre></td></tr></table></figure><p>将ENABLE_USER_SITE的值改为False，即<code>NABLE_USER_SITE = False</code>.</p><hr/><p>修改后就可以安装了，这里选择从github上面获取<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/osrg/ryu.git</span><br><span class="line"><span class="built_in">cd</span> ryu</span><br><span class="line">pip install -r tools/pip-requires   <span class="comment">#安装依赖</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><br>装完之后可以输入命令<code>ryu-manager</code>查看是否安装成功</p><h2 id="安装sflow-rt"><a href="#安装sflow-rt" class="headerlink" title="安装sflow-rt"></a>安装sflow-rt</h2><p>首先需要安装java环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jre-headless openjdk-8-jdk-headless</span><br></pre></td></tr></table></figure><p>然后下载安装sflow-rt<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://inmon.com/products/sFlow-RT/sflow-rt.tar.gz</span><br><span class="line">tar -zxvf sflow-rt.tar.gz</span><br><span class="line"><span class="built_in">cd</span> sflow-rt</span><br><span class="line">./start.sh <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure><br>然后访问 127.0.0.1:8008/ 可以看到sflow的监控页面，安装成功</p><p>可以选择安装sflow-rt的app，可以看官网<a href="https://sflow-rt.com/download.php">https://sflow-rt.com/download.php</a> 对每个app的介绍<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./get-app.sh sflow-rt flow-trend</span><br><span class="line">./get-app.sh sflow-rt mininet-dashboard</span><br><span class="line">./get-app.sh sflow-rt ix-metrics</span><br></pre></td></tr></table></figure></p><p>至此工具安装完成</p><p>mininet安装目录：<code>/usr/lib/python2.7/dist-packages/mininet</code></p><p>Ryu安装目录：<code>/usr/local/lib/python2.7/dist-packages/ryu</code></p><p>(可以直接用pip show modules 命令查看安装位置)</p><p>sflow-rt安装目录就是解压的目录</p><hr/><h2 id="搭建一个简单的SDN网络"><a href="#搭建一个简单的SDN网络" class="headerlink" title="搭建一个简单的SDN网络"></a>搭建一个简单的SDN网络</h2><p>首先启动sflow-rt监控<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(path_to_sflow-rt)/start.sh</span><br></pre></td></tr></table></figure></p><p>然后启动ryu的内建app：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ryu-manager (path_to_ryu)/app/simple_switch_13.py</span><br></pre></td></tr></table></figure></p><p>最后用mininet组网，设置控制器为ryu（默认端口6653或6633），openflow版本为1.3，交换机为ovs。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  mn --switch ovs,protocols=OpenFlow13 --controller=remote,ip=127.0.0.1,port=6653 --custom sflow-rt/extras/sflow.py --topo=tree,depth=3,fanout=2</span><br></pre></td></tr></table></figure><p>pingall，可以看到创建成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">b@ubuntu:~$ sudo  mn --switch ovs,protocols=OpenFlow13 --controller=remote,ip=127.0.0.1,port=6653 --custom sflow-rt/extras/sflow.py --topo=tree,depth=3,fanout=2</span><br><span class="line">*** Creating network</span><br><span class="line">*** Adding controller</span><br><span class="line">*** Adding hosts:</span><br><span class="line">h1 h2 h3 h4 h5 h6 h7 h8 </span><br><span class="line">*** Adding switches:</span><br><span class="line">s1 s2 s3 s4 s5 s6 s7 </span><br><span class="line">*** Adding links:</span><br><span class="line">(s1, s2) (s1, s5) (s2, s3) (s2, s4) (s3, h1) (s3, h2) (s4, h3) (s4, h4) (s5, s6) (s5, s7) (s6, h5) (s6, h6) (s7, h7) (s7, h8) </span><br><span class="line">*** Configuring hosts</span><br><span class="line">h1 h2 h3 h4 h5 h6 h7 h8 </span><br><span class="line">*** Starting controller</span><br><span class="line">c0 </span><br><span class="line">*** Starting 7 switches</span><br><span class="line">s1 s2 s3 s4 s5 s6 s7 ...</span><br><span class="line">*** Enabling sFlow:</span><br><span class="line">s1 s2 s3 s4 s5 s6 s7</span><br><span class="line">*** Sending topology</span><br><span class="line">*** Starting CLI:</span><br><span class="line">mininet&gt; pingall</span><br><span class="line">*** Ping: testing ping reachability</span><br><span class="line">h1 -&gt; h2 h3 h4 h5 h6 h7 h8 </span><br><span class="line">h2 -&gt; h1 h3 h4 h5 h6 h7 h8 </span><br><span class="line">h3 -&gt; h1 h2 h4 h5 h6 h7 h8 </span><br><span class="line">h4 -&gt; h1 h2 h3 h5 h6 h7 h8 </span><br><span class="line">h5 -&gt; h1 h2 h3 h4 h6 h7 h8 </span><br><span class="line">h6 -&gt; h1 h2 h3 h4 h5 h7 h8 </span><br><span class="line">h7 -&gt; h1 h2 h3 h4 h5 h6 h8 </span><br><span class="line">h8 -&gt; h1 h2 h3 h4 h5 h6 h7 </span><br><span class="line">*** Results: 0% dropped (56/56 received)</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure></p><p>ryu-manager的控制台输出packet in 包</p><p>访问本地的 127.0.0.1:8008 ，可以用sflow的app mininet-dashboard看到拓扑和流量监控：</p><p><img src="1.png" alt=""></p><p><img src="2.png" alt=""></p><p>至此简单的SDN实验环境搭建完成。</p><hr/><p>（附：ubuntu server18.04.4版本安装）<br>其实这些工具都用不到图形界面的，所以说安装server是最省资源的方法。</p><p>首先从清华镜像源下载ubuntu18.04.4-server.iso,用vmware新建虚拟机安装<br>安装的时候会选择源，将默认的改成 <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> 即可。</p><p>安装后先修改字体（控制台字体太小了，看不清），当然，一直用ssh远程访问也行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure console-setup</span><br></pre></td></tr></table></figure><br>弹出之后依次选择 UTF-8，latin1 and latin5 -western Europe and Turkic languages字体，terminusBlod，大小为 11*22 或者别的即可.</p><p>安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim gcc ssh net-tools python python-pip python-dev m4 autoconf libtool git  openjdk-8-jre-headless openjdk-8-jdk-headless uml-utilities python-qt4 python-twisted-conch debhelper python-all</span><br></pre></td></tr></table></figure></p><p>配置vim:<code>sudo vim /etc/vim/vimrc.local</code><br>添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax on</span><br><span class="line"><span class="built_in">set</span> smartindent</span><br><span class="line"><span class="built_in">set</span> cindent</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br></pre></td></tr></table></figure></p><p>配置python包位置：<code>sudo vim /usr/lib/python2.7/site.py</code><br>将line76 ， <code>ENABLE_USER_SITE = None</code> 改为 <code>ENABLE_USER_SITE = False</code></p><p>安装mininet：<code>sudo apt install mininet</code></p><p>安装sflow-rt：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://inmon.com/products/sFlow-RT/sflow-rt.tar.gz</span><br><span class="line">tar -zxvf sflow-rt.tar.gz</span><br><span class="line"><span class="built_in">cd</span> sflow-rt</span><br><span class="line">./get-app.sh sflow-rt flow-trend <span class="comment"># 安装app</span></span><br><span class="line">./get-app.sh sflow-rt mininet-dashboard</span><br><span class="line">./get-app.sh sflow-rt ix-metrics</span><br><span class="line">./start.sh <span class="comment"># 启动</span></span><br></pre></td></tr></table></figure></p><p>安装ryu：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/osrg/ryu.git</span><br><span class="line"><span class="built_in">cd</span> ryu</span><br><span class="line">pip install -r tools/pip-requires   <span class="comment">#安装依赖</span></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure></p><p>安装ovs：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openvswitch.org/releases/openvswitch-2.12.0.tar.gz</span><br><span class="line">tar -zxvf openvswitch-2.12.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openvswitch-2.12.0/</span><br><span class="line">sudo ./boot.sh</span><br><span class="line">sudo ./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line">sudo make install </span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/share/openvswitch/scripts</span><br><span class="line">ovs-ctl start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库</span></span><br><span class="line">sudo mkdir -p /usr/<span class="built_in">local</span>/etc/openvswitch</span><br><span class="line">sudo ovsdb-tool create /usr/<span class="built_in">local</span>/etc/openvswitch/conf.db /usr/share/openvswitch/vswitch.ovsschema</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库：</span></span><br><span class="line">sudo ovs-vsctl --no-wait init</span><br></pre></td></tr></table></figure><p>最后查看安装状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yb@sdn-server:~$ sudo ovs-vsctl show</span><br><span class="line">[sudo] password <span class="keyword">for</span> yb:</span><br><span class="line">fd6b05e7-0737-4230-9c6e-9d8b71816e02</span><br><span class="line">    ovs_version: <span class="string">"2.12.0"</span></span><br><span class="line">yb@sdn-server:~$</span><br></pre></td></tr></table></figure></p><hr/>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工具选择列表&quot;&gt;&lt;a href=&quot;#工具选择列表&quot; class=&quot;headerlink&quot; title=&quot;工具选择列表&quot;&gt;&lt;/a&gt;工具选择列表&lt;/h2&gt;&lt;p&gt;操作系统：ubuntu_19.10&lt;/p&gt;
&lt;p&gt;数据平面（虚拟交换机）：OpenvSwitch（OVS）&lt;br&gt;控制器：ryu&lt;/p&gt;
&lt;p&gt;mininet组网工具：mininet是一个用python实现的，可以很快地模拟出OpenFlow交换机（基于Openvswitch）、host以及自定义各种网络拓扑结构。提供命令行CLI和python的API&lt;/p&gt;
&lt;p&gt;sflow-rt：sFlow技术是以设备端口为基本单元的数据流随机采样的流量监控技术。sflow分为sflow agent和sflow collector, sflow agent内嵌在网络设备中将采集的信息封装成sFlow报文发送给sflow collector， sflow-rt为 sflow collector实现的一种工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/categories/SDN/"/>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>SDN架构与实现4--SDN控制平面与控制器</title>
    <link href="https://yanghaku.github.io/2020/02/19/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B04-SDN%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>https://yanghaku.github.io/2020/02/19/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B04-SDN%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
    <published>2020-02-19T12:25:00.000Z</published>
    <updated>2020-02-19T08:53:23.371Z</updated>
    
    <content type="html"><![CDATA[<p>SDN技术将交换设备的控制平面迁移到集中化的控制器中，利用标准化的南向接口替换了交换设备中的控制平面，并在控制器中增加了可编程的北向接口供上层调用。</p><a id="more"></a><h2 id="南向网络控制技术"><a href="#南向网络控制技术" class="headerlink" title="南向网络控制技术"></a>南向网络控制技术</h2><p>控制器的网络控制技术主要包括通过南向接口协议进行链路发现、拓扑管理、策略制定、表项下发等。其中链路发现和拓扑管理主要是控制器利用南向接口的上行通道对底层交换设备上报信息进行统一监控而统计的技术，而策略制定和表项下发则是控制器利用南向接口的下行通道对网络设备实施统一控制的技术。</p><ul><li>链路发现：链路发现是获得SDN全网信息的关键，由控制器统一完成。SDN控制器主要是使用了LLDP链路层发现协议来进行，通过每个交换机传来的信息，创建出完备的网络拓扑图。</li><li>拓扑管理：最主要的就是随时监控和采集网络中SDN交换机的信息，及时反馈网络中的设备工作状态和链路连接状态。为了实现这一目标，控制器需要定时发送LLDP的数据包获知交换机信息。另一个工作是对逻辑组网进行记录，最典型的应用场景是云计算环境下多租户共享网络资源。这些租户网络相关的信息都要在拓扑管理中保存和展现，以反映真实的网络利用状况。</li><li>策略制定：流表是SDN交换机进行数据处理的最基本依据，直接影响了数据转发效率和网络的性能。控制器流表的生成算法成了影响控制器智能化水平的关键因素。<strong>SDN交换机中的流表机制打破了传统网络中的层次化概念，无论是源MAC等二层信息，还是目的IP等三层信息，都统一封装在一个流表项中。</strong>因此，控制器就需要针对不同层次上的网络需求，制定相应的网络转发策略：<ul><li>对于二层网络数据的转发，传统设备的主要工作是学习MAC地址和基于MAC的转发。而SDN中，MAC学习已经在链路控制中实现，所以只需要以目的MAC为依据，将对应的交换机转发端口号写入相应交换机的流表项即可。</li><li>对于三层网络数据的转发，传统设备通常采用“一次路由多次转发”的机制，即交换设备在接受来自源IP的数据包后，查询路由表确定到达目的IP的路由，并通过一定的机制确立源MAC与目的MAC以及转发端口的对应关系，后续在源和目的之间产生的通信由二层模块直接处理。在SDN中，核心是控制器利用相关的路由算法计算出源和目的之间的路由信息，并以IP地址、MAC地址为依据将对应的交换机转发端口写入相应的流表中。</li><li>对于四层网络数据的转发，最主要的是额外考虑每个数据包中包含哪个应用协议的TCP/UDP端口信息。以TCP/UDP端口、IP地址、MAC地址为依据，写入对应交换机流表中。</li></ul></li><li>表项下发：SDN流表下发有主动和被动两种模式<ul><li>主动：在数据包到达交换机之前就进行流表设置，数据包到达的时候交换机已经知道如何处理，消除了数据传输中流表项设置的延迟。</li><li>被动：交换机收到一个数据包且没有与之匹配的流表项时，只能将其送给控制器处理。一旦控制器确定后，相关的信息就返回并缓存在交换机上。</li></ul></li></ul><h2 id="北向业务支撑技术"><a href="#北向业务支撑技术" class="headerlink" title="北向业务支撑技术"></a>北向业务支撑技术</h2><p>通过北向接口，网络业务的开发者能够以软件编程的方式调用局域网、广域网等各种各样的网络资源能力。同时网络资源管理系统可以通过控制器提供的北向接口获知网络资源的工作状态并对网络资源进行调度，实现资源的统一交付，更好地支持云计算等新业务对网络资源的需求。</p><h2 id="东西向控制器扩展技术"><a href="#东西向控制器扩展技术" class="headerlink" title="东西向控制器扩展技术"></a>东西向控制器扩展技术</h2><p>控制器复制对整个SDN的集中化控制，对于把握全局资源视图、改善网络资源交付质量具有非常重要的作用。但控制能力集中化，也使控制器具有了更大的责任，一旦控制器在性能上或安全上得不到保障，随之而来的就是整个SDN的服务能力降级甚至全网瘫痪。另外，从组网架构上来看，单一的控制器也无法应对跨越多个地域的SDN问题。所以需要多台控制器形成的分布式集群，避免单一控制节点造成的可靠性、可扩展性、性能方面的问题。目前用于多个控制器之间的沟通和联系的东西向接口还没有被定义为标准，但是之前的一些集群技术已经可以被用于解决上述的问题。</p><h2 id="开源控制器"><a href="#开源控制器" class="headerlink" title="开源控制器"></a>开源控制器</h2><p>主要的一些开源控制器：</p><div class="table-container"><table><thead><tr><th>名称</th><th>编程语言</th><th>简介</th></tr></thead><tbody><tr><td>Beacon</td><td>java</td><td>Stanford大学开发，采用模块化设计</td></tr><tr><td>Floodlight</td><td>java</td><td>基于Beacon开发，一个企业级的经典SDN控制器</td></tr><tr><td>NodeFlow</td><td>javascript</td><td>基于Nodejs的控制器</td></tr><tr><td>NOX</td><td>C++</td><td>业界第一个SDN控制器</td></tr><tr><td>POX</td><td>python</td><td>NOX的兄弟版本</td></tr><tr><td>Ryu</td><td>python</td><td>NTT公司开发，具有丰富的控制器API</td></tr><tr><td>OpenDaylight</td><td>java</td><td>支持多种南向协议的广义SDN控制平台</td></tr></tbody></table></div><h3 id="Ryu"><a href="#Ryu" class="headerlink" title="Ryu"></a>Ryu</h3><p>Ryu是由日本的NTT公司开发的python的开源SDN控制器，代码的模块清晰，可拓展性强。<br>架构与其他的SDN控制器相似，大致分为控制层和应用层。<br>控制层主要包括协议解析、事件系统、基本网络报文库类等。应用层是基于控制层提供的API编写的网络应用，以及支持Ryu和其他系统协同工作的模块。而且提供了REST API和RPC接口，允许外界进程与Ryu进行通信。可以作为OpenStack的插件，也支持和Snort协同合作。</p><p><img src="ryu.png" alt=""></p><p>Ryu主要组件：</p><ul><li>基本组件</li></ul><div class="table-container"><table><thead><tr><th>组件名</th><th>功能</th></tr></thead><tbody><tr><td>base.app_manager</td><td>对其他组件的管理，由ryu-manager自动调用</td></tr><tr><td>controller.dpset</td><td>管理of交换机的组件</td></tr><tr><td>controller.ofp_handler</td><td>对控制器、交换机之间握手、协商过程的处理</td></tr><tr><td>controller.ofp_event</td><td>完成OF消息-事件的转换，提供北向接口 api</td></tr><tr><td>controller.controller</td><td>控制器组件，管理与of交换机连接的安全通道，接受of消息，调用ofp_event并发布相应的事件</td></tr></tbody></table></div><ul><li>与of协议相关的组件</li></ul><div class="table-container"><table><thead><tr><th>组件名</th><th>功能</th></tr></thead><tbody><tr><td>ofproto.v_1_X</td><td>相应协议版本的参数</td></tr><tr><td>ofproto.v_1_X_parser</td><td>定义了相应协议版本消息的封装格式</td></tr></tbody></table></div><ul><li>内建应用</li></ul><div class="table-container"><table><thead><tr><th>组件名</th><th>功能</th></tr></thead><tbody><tr><td>app.gui_topology.gui_topology</td><td>拓扑发现的GUI模块</td></tr><tr><td>app.simple_vlan</td><td>基本的vlan</td></tr><tr><td>app.tunnel</td><td>多种隧道策略</td></tr><tr><td>app.simple_switch</td><td>简单2层交换机交换策略</td></tr></tbody></table></div><ul><li>其他</li></ul><div class="table-container"><table><thead><tr><th>组件名</th><th>功能</th></tr></thead><tbody><tr><td>cmd.*</td><td>命令行相关功能</td></tr><tr><td>lib.*</td><td>报文相关的定义，比如IP，TCP等</td></tr><tr><td>topology.*</td><td>拓扑相关的事件和数据结构，提供对应的API</td></tr><tr><td>app.rest*</td><td>基础的REST API 接口</td></tr><tr><td>app.ofp_rest</td><td>of相关的REST API</td></tr></tbody></table></div><hr/><p>至此，基本理论就大体学完了，下面就开始进行实践了！</p><hr/>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SDN技术将交换设备的控制平面迁移到集中化的控制器中，利用标准化的南向接口替换了交换设备中的控制平面，并在控制器中增加了可编程的北向接口供上层调用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/categories/SDN/"/>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>SDN架构与实现3--SDN数据平面与交换机</title>
    <link href="https://yanghaku.github.io/2020/02/19/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B03--SDN%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <id>https://yanghaku.github.io/2020/02/19/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B03--SDN%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA/</id>
    <published>2020-02-19T10:25:00.000Z</published>
    <updated>2020-02-19T06:32:39.786Z</updated>
    
    <content type="html"><![CDATA[<p>传统网络设备的功能模块在生产时就已经固定，只支持有限的用户配置，而不支持用户自定义编程。在传统的路由器和交换机的转发处理都是协议相关的，每个模块都是为了特定的网络协议而设计的，一旦设计完成就只能处理固定格式的网络数据包，无法根据用户需求来支持新的网络协议。所以SDN才有了数控分离的设计，提供了可编程能力。在SDN中，决定网络可编程能力的因素在于数据平面可编程，只有数据平面有了足够的可编程能力，控制平面才能通过南向接口来对网络进行灵活的编程控制。</p><a id="more"></a><p>通用的可编程数据平面支持网络用户通过软件编程的方式任意定义数据平面的功能，包括数据包的解析和数据包的处理等功能，可以实现真正意义上的软件定义网络。为了提供更好的拓展性，通用可编程数据平面设备中所有的网络处理模块，包括包解析器、包转发和包调度，都是可以可编程重配置或者协议无关的，都具有足够的可编程能力。<br>理想的转发模型应该具有以下三个条件：</p><ol><li>清晰的软硬件接口</li><li>简介的硬件接口</li><li>灵活有效的功能实现</li></ol><p><em>The McKeown Group</em>在这个基础上定义了一种可编程通用转发抽象模型：OpenFlow Switch。在SDN可编程数据平面的发展过程中，OpenFlow Switch通用转发模型是现在通用可编程数据平面的代表。到目前为止，业界主流的SDN硬件交换机都实现了OpenFlow Switch通用转发模型的支持，还有业界使用最多的开源软件交换机Openvswitch。</p><h2 id="通用可编程转发模型"><a href="#通用可编程转发模型" class="headerlink" title="通用可编程转发模型"></a>通用可编程转发模型</h2><p>OpenFlow Switch将网络数据转发处理抽象成通用的Match-Action过程，同时对网络系统中各种查找表进行了通用化处理，抽象成一种新的通用表转发模型结构。每个流表都可以实现用户定义的网格处理功能，从而实现可编程的网络数据转发处理。这种模型有四个特征：</p><ol><li>转发行文由控制平面指定</li><li>由基础转发原语组成</li><li>支撑高性能和低功耗</li><li>避免厂商锁定控制程序</li></ol><p>OpenFlow Switch模型主要包括“通用硬件模型”和“通用处理指令”两部分，通用硬件模型由一组网络通用硬件子模型组成。通用处理指令包含了一组用户可编程的网络处理操作和处理指令。</p><h3 id="通用硬件模型"><a href="#通用硬件模型" class="headerlink" title="通用硬件模型"></a>通用硬件模型</h3><p>通用的硬件模型处理流程为：数据包从某个端口进入 $\rightarrow$ 通用模型的协议解析模块完成包头分析 $\rightarrow$ 根据分析结果选择对应的流表处理。<br>在流表内部，解析出的数据包会与每个表项进行比较。如果匹配到了，就执行相应的指令，否则就会按照相应的指令丢弃或者转发给控制器。</p><p>网络通用的处理指令分为三种类型：操作指令、跳转指令和专用指令。操作指令通常是对数据包的具体操作，比如修改转发丢弃等；跳转指令实现在多个流表直接的跳转；专用指令实现某种特定的网络数据流的处理。完成处理之后，将数据包从某个指定端口发出去。</p><h4 id="流水线处理"><a href="#流水线处理" class="headerlink" title="流水线处理"></a>流水线处理</h4><p>“多级流表”优势：因为现有的交换芯片内部通常有多个查找表，比如二层转发表，三层路由表和访问接入控制等，“多级流表”的概念使得芯片更容易支持，资源利用率也高。多个网络应用会根据不同包头域组合，对数据包进行关联处理。并且单一流表会使表非常大，信息冗余。<br>在支持多级流表的OpenFlow Switch通用硬件模型中，每个数据包在进入流水线之前，都将分配一个对应的操作指令集。然后从第0个流表开始，匹配查找，根据定义的操作传给下一个流表或者执行对数据包的处理。</p><h4 id="流表"><a href="#流表" class="headerlink" title="流表"></a>流表</h4><p>OpenFlow Switch通过流（flow）的概念来描述具有相同特征的数据包集合。然后对于flow的处理，OpenFlow Switch定义了流表项（flow Entry）来处理对应的数据流。每个流表有多个流表项组成，用户通过对这些表项进行编程区分flow，同时定义对应的处理指令。<br>每个流表项主要内容有：匹配域，指令集，计数器，优先级，失效时间，cookie，flags等</p><ul><li>匹配域：用来与每个数据包的指定包头标识集合进行比较，包括输入端口，包头标识域和Metadata三部分。</li><li>指令集：指定该flow中的数据包的跳转操作，同时也包括对流表项的操作指令</li><li>计数器：实时统计与流表项匹配成功的数据包数目信息，是分析用户流量的关键信息</li><li>优先级：说明该流表的匹配优先级，当数据包与多个流表项匹配成功时，需要按照优先级来选择出一个流表项。</li><li>失效时间： 指定流表项的失效时间。包括硬生存时间和软生存时间。硬生存时间是超过这个时间就被删除。软生存时间是在规定时间内没有匹配到数据包就被删除。</li></ul><p>在流水线中，流表的跳转指令只能沿着流水线方向进行处理，而不能回退到之前的流表。当流表没有跳转指令时，就对数据包进行具体的操作。所以流水线的最后一个流表不能有跳转指令，从而停止流水线。</p><p>流表子模型本质上是一个面向flow的转发表。</p><h4 id="组表"><a href="#组表" class="headerlink" title="组表"></a>组表</h4><p>组表是一种转发表的抽象子模型，具备给一组端口定义某种指定操作的抽象能力，从而便捷实现组播，负载均衡，重定向等功能。</p><p>每个流表项包括：组号（Group Identifier），计数器（Counters），组类型（Group Type），操作桶（Action Buckets）。<br>组类型有四种：</p><ul><li>全选类型（All）：执行Action Buckets里所有的操作动作集，可以用来实现网络中的组播和广播功能。对应的flow数据包会直接复制到每个Action Bucket里。如果某个Action Buckets将数据包直接转发给输入端口就不复制这个包。</li><li>选择类型（Select）：只选择执行一个Action Buckets的动作集，通常用交换机自己的算法来选择。</li><li>间接类型（Indirect）：只能支持一个Action Buckets，用来实现多个流表项或多个组表项指向单一组表ID的情况。</li><li>快速恢复类型（Fast Failover）：只执行第一个激活的Action Bucket。能让转发模型自己调整转发操作，不需要每次请求控制器。多用于容灾备份的场景。</li></ul><p>组表子模型也是一种转发表，只是表项定义与流表的内容不同。</p><h4 id="Meter表"><a href="#Meter表" class="headerlink" title="Meter表"></a>Meter表</h4><p>Meter表是第三种转发表类型的抽象子模型，其使得OpenFlow Switch模型具备测量Flow的能力，可以用来实现速率控制等简单的Qos服务，也可以实现相对复杂的Qos服务。</p><p>每个Meter表项由三个部分：计量标识（Meter Idendifier），计数器（Counters），计量带（Meter Bands）。<br>每一个计量带有bandtype，rate，counters和band type可选参数四部分组成。rate为一个网络数据流的传输速率阈值。Band Type定义了一种对应的包处理方式，通常只有网络数据流当前流量速率超过这个速率阈值时，才会执行BandType的操作。</p><h4 id="状态信息表"><a href="#状态信息表" class="headerlink" title="状态信息表"></a>状态信息表</h4><p>OPenFlow模型里面定义了大量的计数器，分别由流表、流表项、端口、队列、Group、Group Bucket、Meter和计量带维护着。这些计数器合起来就构成了一个状态信息表。其中有一个特殊的计数器Duration计数器，记录流表项、端口、队列、Group和Meter的存活时间，精度通常是纳秒。计数器的实现可以用软件，也可以用硬件。</p><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口子模型是网络设备常见的模型，是其他网络设备和OpenFlow Switch的网络接口，通用硬件模型通过端口连接在一起（逻辑上的连接）。<br>OpenFlow Switch模型定义了物理端口（Physical Port）、逻辑端口（Logical Port）和保留端口（Reserved Port）三种端口类型。所有物理端口、逻辑端口和保留端口中的本地类型统称为标准端口，只有这些端口才能用作网络数据包的输入和输出端口，才能在组表中使用并且拥有端口计数器、端口状态和配置信息。<br>物理端口是物理网络中的真实网络接口，与网络中的物理接口一一对应；逻辑端口是一种抽象的端口，用作描述链路聚合组、隧道和回环接口等逻辑概念；保留端口是OpenFlow Switch模型中预留的虚拟端口类型。</p><p>总之，OpenFlow Switch通用硬件模型定义了一组抽象的子模型来描述这个网络通用转发模型。其中包括三种特殊的转发表（流表、组表、Meter表），计数器组成的状态信息表和端口子模型。</p><h3 id="通用处理指令"><a href="#通用处理指令" class="headerlink" title="通用处理指令"></a>通用处理指令</h3><p>OpenFlow Switch通用处理指令包括：网络处理控制指令Instructions，网络数据操作指令Actions和专用网络处理指令三部分。</p><h4 id="网络处理控制指令"><a href="#网络处理控制指令" class="headerlink" title="网络处理控制指令"></a>网络处理控制指令</h4><p>OpenFlow Switch定义的第一种是基于Flow的网络处理流程控制指令Instructions，这种指令控制数据包在通用硬件模型流水线上的处理流程。<br>控制指令有两种：</p><ol><li>对Flow数据包的操作指令集的写入，应用删除等修改操作指令，比如写操作（Write-Actions），应用操作指令（Apply-Actions）。</li><li>指定flow数据包在多个表中的处理顺序和跳转指令，比如Goto-Table指令。</li></ol><p>每个流表项包括多个控制指令，组成对应的指令集和。</p><h4 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h4><p>OpenFlow Switch定义的第二种是基于Flow的网络处理操作指令Actions。这种操作指令完成对数据包的丢弃、复制、转发和修改等操作。每一个数据包进入流水线后就分配一个Action Set，用于保存处理数据的动作，其集合中同一类型的动作只有一个。此外还可以是Action List，同一类型的动作数目不受限制。</p><p>包含的指令主要有：Output <em>port num</em> 转发到某个端口，Group <em>group id</em> 发送到指定的group表项处理，Drop 丢掉….</p><h4 id="专用指令"><a href="#专用指令" class="headerlink" title="专用指令"></a>专用指令</h4><p>第三种是基于flow的专用指令。这种专用指令通过一条指令实现特定网络的处理功能。<br>典型有Table Miss指令。Table Miss定义了在流表中匹配不成功时，网络数据包的处理行为。</p><p>总之，OpenFlow Switch只是定义了一种通用的可编程转发模型，对于数据包解析协议和包调度模块还不具备编程能力，所以依然有很大的发展空间。</p><h2 id="通用的可编程数据平面"><a href="#通用的可编程数据平面" class="headerlink" title="通用的可编程数据平面"></a>通用的可编程数据平面</h2><p>当下的OpenFlow Switch模型还不具备协议无关网络数据处理，还不能成为完全的通用可编程数据转发模型。P4编程语言框架、POX协议无关转发等，都在不断探索完善中。</p><h2 id="白盒交换机"><a href="#白盒交换机" class="headerlink" title="白盒交换机"></a>白盒交换机</h2><p>白盒交换机（White Box Switch），又称开放网络交换机，只有硬件而软件需要自定义安装，是网络交换机硬件和操作系统解耦合的结果。在网络领域，通常是交换机硬件和操作系统紧紧绑定在一起销售，在SDN架构的推动下，White Box Switch模式使得用户可以自主选择交换机硬件和操作系统。在近几年的SDN发展中，白盒交换机成为了新的发展趋势。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统网络设备的功能模块在生产时就已经固定，只支持有限的用户配置，而不支持用户自定义编程。在传统的路由器和交换机的转发处理都是协议相关的，每个模块都是为了特定的网络协议而设计的，一旦设计完成就只能处理固定格式的网络数据包，无法根据用户需求来支持新的网络协议。所以SDN才有了数控分离的设计，提供了可编程能力。在SDN中，决定网络可编程能力的因素在于数据平面可编程，只有数据平面有了足够的可编程能力，控制平面才能通过南向接口来对网络进行灵活的编程控制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/categories/SDN/"/>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>SDN架构与实现2--SDN南向协议</title>
    <link href="https://yanghaku.github.io/2020/02/17/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B02--SDN%E5%8D%97%E5%90%91%E5%8D%8F%E8%AE%AE/"/>
    <id>https://yanghaku.github.io/2020/02/17/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B02--SDN%E5%8D%97%E5%90%91%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-17T09:25:00.000Z</published>
    <updated>2020-02-19T03:11:53.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SDN南向协议"><a href="#SDN南向协议" class="headerlink" title="SDN南向协议"></a>SDN南向协议</h2><p>SDN架构中，网络的控制平面和数据平面相分离，通过南向协议进行通信。南向协议提供的可编程能力是SDN可编程能力的决定因素，所以南向协议是SDN最核心、最重要的接口标准之一。<br>南向协议尝试为网络数据平面提供统一的、开放的和具有更多编程能力的接口，使得控制器可以基于这些接口对数据平面设备进行编程控制，指导网络流量的转发等行为。<br>南向协议可以根据可编程能力分为狭义的南向协议和广义的南向协议。<br>狭义的南向协议是具有确切的对数据平面的编程能力，指导数据平面设备的转发操作等行为。典型的是Openflow协议。POF协议和P4协议也属于狭义的南向协议的范围，但是这两个比SDN南向协议更具有通用的抽象能力，能力范围已经超越了狭义南向协议的定义，所以并不能简单归类到这里（分类是完全可编程的南向协议）。<br>广义的南向协议主要是三种类型：</p><ol><li>仅具有对数据平面配置能力的南向协议，如：OF-Config，OVSDB，NET-CONF</li><li>具有部分可编程能力的协议，如：OpFlex</li><li>本来就存在，不限于应用在SDN控制平面和数据平面通信的协议，如：PCEP，XMPP</li></ol><a id="more"></a><h2 id="狭义SDN南向协议"><a href="#狭义SDN南向协议" class="headerlink" title="狭义SDN南向协议"></a>狭义SDN南向协议</h2><p>狭义南向协议的代表是Openflow，2008年<em>Nick McKeown</em>教授在论文中第一次介绍了这个协议，论文介绍了Openflow的原理，包括Openflow交换机和Openflow控制器的设计。Openflow是第一个SDN控制平面和数据平面交互的通信接口，也是目前最流行的SDN南向协议。</p><p>在Openflow 1.0版本中定义了Openflow交换机，流表和Openflow通道，到了1.3版本又增加了组表和Meter表这两种新表。</p><h3 id="Openflow表"><a href="#Openflow表" class="headerlink" title="Openflow表"></a>Openflow表</h3><h4 id="流表"><a href="#流表" class="headerlink" title="流表"></a>流表</h4><p>流表（Flow Table）是交换机用于存储流表项的表。在Openflow1.0版本中仅有一张流表（单流表）。由于单流表可以支持的程序逻辑太简单，无法满足复杂的业务逻辑，所有在Openflow1.1版本中又增加了多级流表的概念。多级流表使数据包的处理逻辑划分成多个子逻辑，分成多个表来处理，使数据包的处理变成了一条流水线。<br>流表中由匹配域、指令集和计数器三个主要部分及其他部分组成（优先级、计时器等）。<br><strong>网络数据表进入交换机之后会匹配流表中的流表项，匹配到同一条流表的数据包称为数据流Data Flow，简称Flow。</strong><br>匹配域用于区分不同的数据流，匹配成功之后执行对应的指令，完成对数据的处理。</p><p>匹配域原先叫做包头域，（1.0协议里）包括12个元组：入端口（Ingress Port），源MAC地址（Ether Source），目的MAC地址（Ether Des），以太网类型（Ether Type），VLAN ID（VLAN ID），VLAN优先级（VLAN Priority），源IP地址（IP Src），目的IP地址（IP Dst），IP协议（IP Proto），IP TOS位（IP Tos bits），TCP/UDP源端口（TCP/UDP Src Port）,TCP/UDP目的端口（TCP/UDP Dst Port）</p><h4 id="组表"><a href="#组表" class="headerlink" title="组表"></a>组表</h4><p>组表（Group Table）是定义一组动作，且这组动作可被多条流表项共同使用，从而实现组播、负载均衡、聚合等功能。结构有：组表号，类型，计数器和动作桶。 组表的存在降低了流表的逻辑复杂度，也减少了流表的存储空间。</p><h4 id="Meter表"><a href="#Meter表" class="headerlink" title="Meter表"></a>Meter表</h4><p>Meter表（Meter Table）用于计量和限速，其结构有：计量表号，计量带和计数器。Meter表项针对流制定对应的限速等规则，从而实现丰富的Qos功能。Meter表是面向流的，更细致灵活。</p><h3 id="Openflow通道"><a href="#Openflow通道" class="headerlink" title="Openflow通道"></a>Openflow通道</h3><p>Openflow通道是控制器和交换机通信的通道，通道中转发的数据为Openflow消息（Openflow报文）。 Openflow报文分为 <strong>Controller-to-Switch、Asynchronous、Symmetric</strong>三大类。Controller-to-Switch类型的报文主要是由控制器初始化并发送给交换机，Asynchronous类型报文主要是交换机异步上报给控制器的报文，Symmetric类报文是无需等待对方请求、双方都可以任意发送的报文。</p><h4 id="Controller-to-Switch报文"><a href="#Controller-to-Switch报文" class="headerlink" title="Controller-to-Switch报文"></a>Controller-to-Switch报文</h4><p>Controller-to-Switch 报文是控制器初始化并下发给交换机的报文类型。其可能会要求交换机回复对应的报文。主要类型：</p><ul><li>Features：Features类型的报文主要分Request和Reply两种，其中控制器可以主动初始化并发送Feature_Request 报文，请求交换机回复其特性信息，交换机收到后将通过Feature_Reply报文回复交换机的特性和交换机端口特性信息。通常控制器会在交换机的Openflow连接建立完成之后马上发送一个请求报文来获取交换机的特征信息。</li><li>Configuration： 其包含请求、回复和设置三种报文。控制器可以设置和请求交换机的配置信息，交换机则需执行配置和回复配置报文。</li><li>Modify-State：读取状态信息，由控制器发出，用于获取交换机的状态信息，包括流表、组表、Meter表及端口的统计信息。</li><li>Packet-out：由控制器发出，用于将数据包发送到交换机的指定端口。一般用于相应Packet-in报文的处理，经常跟在Flow-mod报文之后，用于指挥交换机将缓存数据发送或直接发送数据。Packet-out还需要携带指导数据处理的动作集，如果动作集为空则交换机会将数据包丢弃。</li><li>Barrier：Barrier Request/Reply 用于确保操作顺序执行。控制器可以向交换机发送Request报文，交换机收到后将request报文之前的报文处理完成之后，再处理Barrier Request请求。回复控制器一个Barrier Reply报文，其报文ID和请求报文一致，告知控制器在Barrier Request报文之前到来的报文已经处理完成。类似于设置一个障碍或触发器，确保动作执行顺序，保持策略的一致性。</li><li>Role-Request： 用于控制器请求其自身在交换机端的角色，也用于设置控制器的角色。一般用于交换机在与多控制器有连接的场景。</li><li>Asynchronous-Configuration：异步配置报文可以用来配置异步报文的过滤器，从而使得在多控制器场景下，控制器可以选择性过滤异步报文，只接收感兴趣的报文。</li></ul><h4 id="Asynchronous报文"><a href="#Asynchronous报文" class="headerlink" title="Asynchronous报文"></a>Asynchronous报文</h4><p>Asynchronous报文是由交换机异步发送给控制器的报文，无须等待控制器请求。交换机通过异步报文告知控制器新数据包的到达和交换机状态的改变。主要类型：</p><ul><li>Packet-in：将数据包发给控制器。在支持单流表的Openflow协议中，触发Packet-in 的原因可能是流表项的动作指导，也可能是因为匹配不到流表项。但在高版本的多级流表设计下，将默认下发一条Table-Miss流表项。其匹配域均为空，任何报文都能匹配成功。Table-Miss作用是将匹配其他流表失败的数据发给控制器。若交换机配置信息中指示将数据包缓存在交换机上，则Packet-in报文还将携带着指定长度的数据包数据及其在交换机上缓存的Buffer_id，携带的数据包默认长度是128字节。若交换机不缓存数据包，则Packet-in会携带全部数据并发送给控制器。Packet-in通常会触发Packet-out报文或者Flow-mod报文。</li><li>Flow-Removed：当OFPFF_SEND_FLOW_REM标志位被置位的时候，交换机将会在流表项失效时通知控制器流表项被移除的消息。触发流表项失效的原因可以是控制器主动删除或者流表项超时。</li><li>Port-status：当端口配置或者状态变化时，用于告知控制器端口状态发生改变。</li><li>Pole-status：当控制器角色发生变换时，交换机告知控制器其角色变换。</li><li>Controller-Status：当Openflow连接发生变化时，通知控制器。</li><li>Flow-monitor：告知控制器流表的改变。控制器可以设置一系列监视器来追踪流表的变化。</li></ul><h4 id="Symmetric报文"><a href="#Symmetric报文" class="headerlink" title="Symmetric报文"></a>Symmetric报文</h4><p>控制器和交换机双方都可以发送，无须得到对方的许可或请求。主要类型：</p><ul><li>Hello：Openflow通道建立初期，用于协商版本等内容。</li><li>Echo：Echo Request/Reply 任意一方发出，每个Request都需要Reply回复，主要是保持连接的活性，也可以支持携带消息内容，用于时延或带宽测试。</li><li>Error：错误报文用于告知对方错误。一般多用于交换机告知控制器请求发生的错误。</li><li>Experimenter： 实验报文是报文功能范围之外的标准方式，可以用于实验场景。</li></ul><h3 id="Openflow通信流程"><a href="#Openflow通信流程" class="headerlink" title="Openflow通信流程"></a>Openflow通信流程</h3><p>交换机和控制器建立完socket通信之后，会相互发送Hello报文，协商版本协议。当版本协议协商之后，控制器会向交换机下发Feature Requet报文，交换机需回复Feature Reply报文。控制器根据交换机支持的特性，可以完成交换机的相关配置。配置完成之后，进入正常的通信状态。如果Openflow版本支持多流表，控制器还会下发Table-Miss流表项到交换机。<br>当交换机匹配流表失败或者匹配到Table-Miss时，交换机会将其Packet-in到控制器，控制器根据当前逻辑选择回复Packet-out或者下发Flow-mod指导交换机处理数据流。如果配置了Flow-Removed标志位，则当流表过期时，交换机会向控制器回复Flow-Removed报文。<br>其他异步报文发生在任意时刻。为了保持连接活性，会周期性地发出Echo报文。</p><h2 id="广义的SDN南向协议"><a href="#广义的SDN南向协议" class="headerlink" title="广义的SDN南向协议"></a>广义的SDN南向协议</h2><h3 id="OF-Config"><a href="#OF-Config" class="headerlink" title="OF-Config"></a>OF-Config</h3><p>在Openflow协议的规范中，控制器需要和配置完成的交换机进行通信。交换机正常工作前需要对其功能、特性及资源进行配置才能正常工作。这些配置超出了Openflow协议的范围。OF-Config（Openflow Management and Configuration Protocol）协议就是一种Openflow 交换机配置协议。<br>作为Openflow的伴侣协议，OF-config很好填补了Openflow协议之外的内容。在Openflow协议的SDN框架中，需要如OF-Config这样的配置协议来完成交换机的配置工作，包括配置控制器信息等内容。当交换机和控制器建立连接之后，将通过Openflow协议来传递信息。OF-Config是对Openflow协议的补充，但是设计动机、设计目的和实现方式都不一样。有些Openflow逻辑交换机的属性均可以通过Openflow协议和OF-Config协议来配置，所以两个协议有一些重叠的功能。</p><h3 id="OVSDB"><a href="#OVSDB" class="headerlink" title="OVSDB"></a>OVSDB</h3><p>OVSDB（The Open vSwitch Database Management Protocol, OVS的数据库管理协议）是专门用于Openvswitch的管理和配置的协议。OVSDB和OF-Config类似，都是Openflow交换机配置协议，但两者也有区别：OVSDB仅用于OVS的配置和管理，而OF-Config可以用于所有支持OpenFlow的软件和硬件的交换机。<br>随着虚拟机及Docker等虚拟化技术在数据中心及实验环境中越来越普及，OVS作为虚拟机和Docker与物理网络通信的关键节点越来越重要，所以专门用来配置OVS的协议OVSDB在未来也越来越重要。</p><h3 id="NETCONF"><a href="#NETCONF" class="headerlink" title="NETCONF"></a>NETCONF</h3><p>为了弥补SNMP的不足，IETF提出的一个基于XML的NETCONF协议，具有很强的数据描述能力和良好的扩展性。因为在网络配置方面高效，所以成为了许多网络设备的配置协议，被多种SDN控制器支持。但是它无法指导交换机进行数据转发处理，它的定位还是和OVSDB，OF-Config类似。对于传统设备而言，NETCONF可以配置之后即可工作，对于SDN设备而言，还需要Openflow等协议来指导交换机的数据交换功能。</p><h4 id="OpFlex"><a href="#OpFlex" class="headerlink" title="OpFlex"></a>OpFlex</h4><p>OpFlex是思科提出来的一个可扩展的SDN南向协议，用于控制器和数据平面设备直接交换网络策略。OpFlex是一种声明式控制协议，而Openflow则是一种命令式控制。声明式控制是只通知对象要达到一种要求状态，但是没有规定其通过指定的方式去达到这个状态。本质上是一种SDN南向协议，但是其具有的可编程能力不强，且采用OpFlex架构的终端依然是底层的智能设备，所以OpFlex只能归类于广义的SDN南向协议范畴。</p><h4 id="XMPP"><a href="#XMPP" class="headerlink" title="XMPP"></a>XMPP</h4><p>XMPP（Extensible Messaging and Presence Protocol）是一种以XML为基础的开放式即时通讯协议。由于其自身具有良好的扩展性，从而可以被灵活应用到即使通讯、网络设备管理等多种场合。XMPP不是专门为SDN设计的，因为其良好的扩展性，逐渐成为SDN南向协议的一种。优点是可以统一管理传统设备和SDN设备。用户的网络可能存在大量的传统设备，采用兼容性良好的XMPP可以统一管理，从而保护用户的已有资产，这是XMPP作为南向协议最大优势之一。不过功能粒度相比于Openflow还很粗。</p><h4 id="PCEP"><a href="#PCEP" class="headerlink" title="PCEP"></a>PCEP</h4><p>PECP（Path Computation Element Communication Protocol）是由IETF提出的路径计算单元通信协议，常为流量工程提供路径计算服务。PECP的设计具有很好的弹性和可扩展性，易于拓展。PCEP把路径计算的控制逻辑从转发设备抽离到远端，实现了部分的数据平面和控制平面的分离。通过远端服务器的软件编程，可以指导底层路由或转发设备实现数据的转发和路由，所以也属于一种广义的SDN南向协议。但PECP可编程能力还不完善，也不是专门为SDN设计的。</p><h3 id="完全可编程的南向协议"><a href="#完全可编程的南向协议" class="headerlink" title="完全可编程的南向协议"></a>完全可编程的南向协议</h3><h4 id="POF"><a href="#POF" class="headerlink" title="POF"></a>POF</h4><p>POF（Protocol Oblivious Forwarding）是由华为宋浩宇等人提出来的SDN南向协议，是一种实现方式。与OpenFlow相似，在POF定义的架构中分为控制平面的POF控制器和数据平面的POF转发元件。POF是协议无关的协议，在POF架构中，POF交换机没有协议的概念，仅仅是在POF控制器的指导下通过{offset,length}来定位数据、匹配并执行对应的操作。此举使交换机在不关心网络协议的情况下完成网络数据的处理，使得在支持新协议的时候无须岁交换机进行升级，只需要升级控制平面即可。</p><p>在原先的OpenFlow协议里，1.0版本12个匹配域，1.3版本40个匹配域。随着技术的发展，还会有更多的协议需要支持，那匹配域也需要增加。不断增加的匹配域使得OpenFlow协议越来越复杂，而且设备厂家需要开发出新的交换机来支持新的协议。原先OpenFlow数据平面和控制平面分离不够彻底，数据平面交换机依然需要掌握协议的语义等控制信息才能完成数据匹配。</p><p>POF通过通用指令集来实现协议无关转发的设计，使交换机具有完全的可编程能力。控制器通过南向协议对交换机进行编程，包括协议解析和对应数据流处理规则的编程。当网路中需要支持新协议时，只需要通过控制器进行编程就可实现，大大缩短了网络创新的周期。而对于运营商或者服务提供商而言，在添加新的网络服务的时候不用再联系厂商，也不用购买新的交换设备了。</p><h4 id="P4"><a href="#P4" class="headerlink" title="P4"></a>P4</h4><p>P4是由Pat Bosshart等人提出的“协议无关数据包处理编程语言”。定义了一系列语法，也开发出了P4的编译器，支持对P4转发模型的协议解析过程和转发过程进行编程定义，实现了真正意义上的协议无关可编程网络数据平面。和POF相似，只不过侧重点不同。POF通过{offset,length}来确定待匹配数据，强调协议无关，而P4不仅有底层高度抽象的协议无关指令集，更侧重于网络数据平面编程语言的建模。P4和POF的出现，给网络带来更强大的可编程能力，是必然趋势，是不可阻挡的。</p><hr/>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SDN南向协议&quot;&gt;&lt;a href=&quot;#SDN南向协议&quot; class=&quot;headerlink&quot; title=&quot;SDN南向协议&quot;&gt;&lt;/a&gt;SDN南向协议&lt;/h2&gt;&lt;p&gt;SDN架构中，网络的控制平面和数据平面相分离，通过南向协议进行通信。南向协议提供的可编程能力是SDN可编程能力的决定因素，所以南向协议是SDN最核心、最重要的接口标准之一。&lt;br&gt;南向协议尝试为网络数据平面提供统一的、开放的和具有更多编程能力的接口，使得控制器可以基于这些接口对数据平面设备进行编程控制，指导网络流量的转发等行为。&lt;br&gt;南向协议可以根据可编程能力分为狭义的南向协议和广义的南向协议。&lt;br&gt;狭义的南向协议是具有确切的对数据平面的编程能力，指导数据平面设备的转发操作等行为。典型的是Openflow协议。POF协议和P4协议也属于狭义的南向协议的范围，但是这两个比SDN南向协议更具有通用的抽象能力，能力范围已经超越了狭义南向协议的定义，所以并不能简单归类到这里（分类是完全可编程的南向协议）。&lt;br&gt;广义的南向协议主要是三种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仅具有对数据平面配置能力的南向协议，如：OF-Config，OVSDB，NET-CONF&lt;/li&gt;
&lt;li&gt;具有部分可编程能力的协议，如：OpFlex&lt;/li&gt;
&lt;li&gt;本来就存在，不限于应用在SDN控制平面和数据平面通信的协议，如：PCEP，XMPP&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/categories/SDN/"/>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>SDN架构与实现1--SDN介绍</title>
    <link href="https://yanghaku.github.io/2020/02/17/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B01--SDN%E4%BB%8B%E7%BB%8D/"/>
    <id>https://yanghaku.github.io/2020/02/17/SDN%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AE%9E%E7%8E%B01--SDN%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-02-17T06:27:00.000Z</published>
    <updated>2020-02-17T09:07:13.216Z</updated>
    
    <content type="html"><![CDATA[<p>（SDN介绍）</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="网络基础理论知识"><a href="#网络基础理论知识" class="headerlink" title="网络基础理论知识"></a>网络基础理论知识</h3><p>基础的理论知识就是计网的知识啦<br>首先是OSI七层模型（理想模型），TCP/IP网络模型</p><p>分层：</p><ul><li>物理层：规定着为传输数据所需要的物理链路创建，维持，拆除，而提供的具有机械，电子，功能和规范的特性，主要是关心<strong>如何</strong>传递信号。</li><li>数据链路层：主要是规定相邻节点的数据帧封装和差错控制。</li><li>网络层：负责路由将报文分组转发给目标主机或网络。</li><li>传输层：负责对报文进行重组，建立应用程序之间端到端的连接。</li><li>应用层：向用户提供应用程序。</li></ul><p>主要的协议：以太网，IP，ARP，RARP，ICMP，TCP，UDP，DNS，DHCP等</p><p>设备：<br>物理层(L1)：中继器（repeater），集线器（hub）<br>链路层(L2)：网桥（bridge），交换机（switch）<br>网络层(L3)：路由器（router）</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>交换机是最重要的信息交换网络设备，主要功能有：<br>学习设备的MAC地址<br>二层转发<br>三层转发<br>ACL（访问控制列表，基于包过滤的访问控制技术）<br>Qos（服务质量）<br>消除回路</p><p>随着SDN和NFV的发展，越来越多的功能放在了虚拟交换机上，现在最常用的虚拟交换机是Openvswitch。</p><h4 id="三层交换机和路由器"><a href="#三层交换机和路由器" class="headerlink" title="三层交换机和路由器"></a>三层交换机和路由器</h4><p>三层交换机也和传统的二层交换机不一样，支持三层转发（路由功能），是工作在网络层的。<br>与路由器的区别：</p><ul><li>三层交换机同时支持二层三层转发，而路由器只支持三层转发</li><li>三层交换机的功能不如路由器，路由器还会有防火墙等各种功能，更适合网络复杂的场景下，而交换机的主要功能还是数据交换。</li><li>三层交换机的转发性能比路由器好，非常适合大型局域网内的数据路由和交换。</li></ul><h3 id="传统的网络架构及其缺陷"><a href="#传统的网络架构及其缺陷" class="headerlink" title="传统的网络架构及其缺陷"></a>传统的网络架构及其缺陷</h3><p>传统的网络是分布式的架构，没有控制中心，每台设备都包含独立的控制平面和数据平面：这里的分布式是指，用于路由器计算的控制平面和报文转发的数据平面，都位于同一台设备中。路由计算和拓扑变化后，每台设备都要重新计算路由，每台设备都是独立收集网络信息，独立计算，只关心自己的选路。这种的弊端就是所有的设备在计算路径的时候缺乏统一性。<br>传统的通常部署网管系统作为管理平面，控制平面和数据平面分布在每一台设备上。</p><p>现在主要面临的是四个问题：</p><ol><li>传统网络部署管理困难<br>不同厂商的网络设备混杂在一起使用，但是不同的厂商的设备都是通过不同的方式去部署，命令也不一致，每台设备都要单个部署。管理这些设备，大多都是通过网管软件来管理，生成网络的拓扑图，知道哪一台设备在哪里，出现故障能够报警。但是更多的是侧重于监控，而不是分配和部署，也就是说，如果知道故障在哪里，还是需要人为去修理。</li><li>分布式架构出现性能瓶颈<br>典型的分布式架构，都是通过设备之间互相交换信息，然后每个进行独立计算。但是现在流量剧增，设备也是数量不断增多，当有设备变动的时候，路由收敛的时间越来越长，路由的效率也越来越低。</li><li>流量控制非常难<br>流量均衡负载难，流量路径的灵活调整能力不足。而且不能可视化，网管软件只能监视故障，而不能检查全局全网的链路状态。</li><li>无法对设备进行编程<br>传统的网络设备，工作方式都是厂商决定的，用户自定义的转发策略等都不能灵活改变。买来设备的时候，里面支持的协议都已经被订好，不能通过安装软件的方式增加设备的功能。就算可以也要通过重装OS等复杂的手段来实现。</li></ol><p>总之，传统网络出现的许多局限性，促使了SDN的诞生。</p><h2 id="SDN定义"><a href="#SDN定义" class="headerlink" title="SDN定义"></a>SDN定义</h2><p><strong>SDN（Software Defined Networking，软件定义网络）</strong> 是一种新兴的基于软件的网络架构及技术，其最大的特点就是在于具有松耦合的控制平面和数据平面、支持集中化的网络状态控制、实现底层网络设施对上层应用透明。<br>上面只是其中的一个定义，SDN有着几个组织对它的不同定义，但是本质上没有太大的差别，都强调了SDN拥有数据平面和控制平面分离的特点，也都强调了支持通过软件编程对网络进行控制的能力。SDN主要有三个特征：</p><ol><li>网络开放可编程：SDN建立了新的网络抽象模型，为用户提供了一套完整的通用API，使用户可以在控制器上编程实现对网络的配置、控制和管理，从而加快网络业务的部署的进程。</li><li>控制平面和数据平面分离：控制平面和数据平面不再相互依赖，两者可以独立完成体系结构的演进，双方只要规定一个统一开放的接口进行通信即可。控制平面和数据平面的分离是SDN架构区别于传统网络体系结构的重要标志，是网络获得更多可编程能力的架构基础。</li><li>逻辑上的集中控制：主要是指对分布式网络状态的集中统一管理。在SDN架构中，控制器会担负起收集和管理所有网络状态信息的重任。逻辑的集中控制为软件定义网络功能提供了架构基础，也为网络自动化管理提供了可能。</li></ol><p>因此，只要符合以上三个特征的网络都叫软件定义网络。在这三个特征中，控制平面和数据平面分离为逻辑集中控制创造了条件，逻辑集中控制为开放可编程控制提供了架构基础，而网络开发可编程才是SDN的核心特征。</p><h2 id="SDN体系结构"><a href="#SDN体系结构" class="headerlink" title="SDN体系结构"></a>SDN体系结构</h2><p>SDN网络体系结构主要包括SDN网络应用、北向接口、SDN控制器、南向接口和SDN数据平面五个部分。</p><ol><li><p>SDN网络应用层实现了对应的网络功能应用，这些应用通过调用SDN控制器的北向接口，实现对网络数据平面设备的配置、管理和控制。</p></li><li><p>北向接口是SDN控制器与网络应用程序之间的开放接口，它将数据平面资源和状态信息抽象层统一的开放编程接口。</p></li><li><p>SDN控制器是SDN的大脑，也称作网络操作系统。控制器不仅要通过北向接口给上层网络应用提供不同层次的可编程能力，还要通过南向接口对SDN数据平面进行统一配置、管理和控制。SDN控制器负责整个网络的运行，是提升SDN网络效率的关键。当前有许多基于openflow控制协议的开源控制器的实现，比如NOX，POX等，他们都有各自的特色设计，能够实现链路发现、拓扑管理、表项下发等SDN运行的基本操作。</p></li><li><p>南向接口是SDN控制器与数据平面之间的开放接口。SDN控制器通过南向接口对数据平面进行编程控制，实现数据平面的转发等网络行为。当前，最知名的南向接口就是ONF提出的OPenflow协议了。同时ONF还提出OF-CONFIG协议，用于对SDN交换机进行远程配置和管理，其目标都是为了更好地对分散部署的SDN交换机实现集中控制。</p></li><li><p>SDN数据平面包括基于软件实现的和基于硬件实现的数据平面设备。数据平面设备通过南向接口接收来自控制器的指令，并按照这些指令完成特定的网络数据处理。同时SDN数据平面设备也可以通过南向接口给控制器反馈网络配置和运行时的状态信息。SDN交换机是SDN网络中负责具体数据转发处理的设备。和传统网络交换机路由器一样，都是根据数据的某些特征项与表项进行对比，确定相应的处理，与传统设备不同的是，SDN交换机中的表项是由远程控制区统一下发的。因此SDN交换机可以忽略控制逻辑的实现而只专注于表项的数据处理。因为考虑和传统网络混合工作，所以支持混合模式的交换机是设备层技术的一个研发焦点。SDN交换机一个重要的应用场景是虚拟化的环境，所以SDN交换机会有软件硬件两种形态。比如OVS（Openvswitch）就是一个虚拟的开源交换机，在虚拟化组网中产生了巨大的作用。</p></li></ol><hr/>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（SDN介绍）&lt;/p&gt;
    
    </summary>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/categories/SDN/"/>
    
    
      <category term="SDN" scheme="https://yanghaku.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>基于内容的个性化推荐系统设计与实现</title>
    <link href="https://yanghaku.github.io/2020/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AE%B9%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yanghaku.github.io/2020/02/12/%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AE%B9%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-02-12T03:22:00.000Z</published>
    <updated>2020-02-13T08:03:12.578Z</updated>
    
    <content type="html"><![CDATA[<p>因为项目的需要，里面加一个小型的推荐系统的模块，就找了一些资料，实现了基于内容的一个推荐系统。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>基于内容相似度的推荐：就是把与你喜欢看的文章内容相似的文章推荐给你。</p><p>优势：无冷启动的问题，只要用户产生了初始的历史数据，就可以开始进行推荐计算。而且随着用户的浏览记录数据的增加，这种推荐一般也会越来越准确。</p><a id="more"></a><h3 id="判断两篇内容相似"><a href="#判断两篇内容相似" class="headerlink" title="判断两篇内容相似"></a>判断两篇内容相似</h3><p>用TFIDF 算法，提取出每篇新闻的 (关键词,TFIDF值) 词数对</p><p>TFIDF 计算：<br>首先分词</p><p>然后词频：</p><script type="math/tex; mode=display">词频（TF） = \frac{某个词在文章出现次数}{文章总词数}</script><p>逆文档频率（需要一个语料库）</p><script type="math/tex; mode=display">逆文档频率（IDF） = \log(\frac{语料库中的文档数}{包含该词的文档数+1})</script><p>最后：</p><script type="math/tex; mode=display">TFIDF = TF * IDF</script><p><strong>TF-IDF与一个词在文档中的出现次数成正比，与该词在整个语言中的出现次数成反比，反应了这个词在文章中的重要程度。</strong> </p><p>两篇文章的相似度就可以利用余弦定理来算：</p><script type="math/tex; mode=display">Similarity(A,B) = \frac{\sum_{i\in A\cap B} TFIDF_A[i] * TFIDF_B[i] }{ \sqrt{\sum{TFIDF_A[i]*TFIDF_A[i]}} + \sqrt{\sum{TFIDF_B[i]*TFIDF_B[i]}} }</script><h3 id="构建用户的喜好"><a href="#构建用户的喜好" class="headerlink" title="构建用户的喜好"></a>构建用户的喜好</h3><p>关键：维护用户喜好的关键词表 ，维护 (关键词, 喜好程度) 键值对</p><p>获得：根据用户的点赞、收藏记录</p><p>做法： 用户浏览了某个文章，利用TF-IDF 取得这篇文章的 （关键词,IFIDF值）键值对，并将这个存入用户的喜好关键词列表中。（如果已经有了，那就将值叠加，表示用以加强用户对该关键词的感兴趣程度）</p><p>考虑的问题：用户喜好会不会不断更新？会不会导致推荐结果收敛到用户以前特别喜欢的几个关键词上？ 考虑到这个问题，可以为关键词列表设置一个衰减系数 $\lambda$  , 定期对用户的所有TFIDF值进行更新衰减，减少关键词的收敛倾向。</p><h3 id="用户的喜好与内容的匹配程度计算"><a href="#用户的喜好与内容的匹配程度计算" class="headerlink" title="用户的喜好与内容的匹配程度计算"></a>用户的喜好与内容的匹配程度计算</h3><p>有了用户的喜好关键词表： { keyword1:val1, keyword2:val2,………}</p><p>某条文章的关键词表： {keyword1: val1, keyword2: val2,………}</p><p>用户的喜好表也看作一篇文章，两者的匹配值也是用余弦定理（上面的similarity）来计算。</p><p>对所有新的文章进行计算，将拟合度最高的N个推荐给用户</p><blockquote><p>如果可推荐的太少：<br>为用户设定一个文章推荐的最小值 N， 若不够 N ， 就用热点（近期被点击最多的文章）作为补充</p></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>令维护三个数据表：</p><p>文章的关键词表 article_keyword</p><p>用户喜爱的关键词表 user_keyword</p><p>用户推荐的文章表 article_recommend</p><p>设定更新周期（比如1天），那么可以在每日凌晨某一时刻的时候进行：</p><ol><li>将最近1天更新的所有文章分析，更新其关键词表</li><li>将用户的喜好关键词表进行时间的衰减</li><li>然后将最近1天的收藏记录和点赞记录，更新有活动记录用户的关键词表</li><li>最后更新有活动记录用户推荐的文章表</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-定时任务"><a href="#1-定时任务" class="headerlink" title="1.定时任务"></a>1.定时任务</h3><p>首先增加 “spring-task.xml” 配置文件，配置spring的定时任务</p><p>在web.xml 增加这个配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">      classpath:spring-mybatis.xml</span><br><span class="line">      classpath:spring-task.xml <span class="comment">&lt;!-- 增加的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编辑spring-task.xml 文件，使其支持注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置spring 定时任务的配置文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"edu.study.util.timer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定时任务配置 scheduler 方式 注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"executor"</span> <span class="attr">pool-size</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">pool-size</span>=<span class="string">"10"</span>/&gt;</span><span class="comment">&lt;!-- 配置线程池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"executor"</span> <span class="attr">scheduler</span>=<span class="string">"scheduler"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 edu.study.util 里面新建一个包 timer ， 在timer包内增加TimerJob 类</p><p>TimerJob.java:(其中里面用的ContentBaseRecommend类就是将要实现的关键类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.study.util.timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.study.util.recommend.ContentBasedRecommend;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerJob</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  定时任务的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ContentBasedRecommend contentBasedRecommend;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/2 * * * ?"</span>)<span class="comment">//每隔2分钟执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recommendRefresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 刷新上次更新至今这个时间段的推荐</span></span><br><span class="line">        contentBasedRecommend.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-基于内容的推荐算法实现"><a href="#2-基于内容的推荐算法实现" class="headerlink" title="2.基于内容的推荐算法实现"></a>2.基于内容的推荐算法实现</h3><p>(为了省事，全部写在了一个类里面)</p><p>新建一个包 edu.study.util.recommend<br>然后新建一个类 ContentBasedRecommend.java<br>ContentBasedRecommend.java（具体实现看代码和注释）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.study.util.recommend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.study.dao.*;</span><br><span class="line"><span class="keyword">import</span> edu.study.model.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBasedRecommend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要用到的数据库服务</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ArticleMapper articleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ArticleAgreeMapper articleAgreeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ArticleCollectionMapper articleCollectionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ArticleKeywordMapper articleKeywordMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserKeywordMapper userKeywordMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ArticleRecommendMapper articleRecommendMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date lastRefreshDate;<span class="comment">//维护上次更新的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ARTICLE_KEYWORD_MAX_NUM = <span class="number">100</span>;<span class="comment">// 设置一个文章的关键词上限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> USER_KEYWORD_MAX_NUM = <span class="number">1000</span>;<span class="comment">//设置存储的用户关键词的上限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECOMMEND_NUM = <span class="number">20</span>; <span class="comment">// 设置每个用户推荐的文章个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> AUTO_DEC_NUM = <span class="number">0.9</span>; <span class="comment">//设置每天衰减的系数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> lambda = <span class="number">1.5</span>;   <span class="comment">//设置收藏的权重 对于 点赞的权重的倍数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *根据lastrefreshTime ~ 至今 这个时间段的活动记录，刷新推荐</span></span><br><span class="line"><span class="comment">     * 并将lastrefreshTime 更新到现在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lastRefreshDate == <span class="keyword">null</span>)&#123;<span class="comment">//如果上次更新时间没有实例化，那就创建一个最早的时间</span></span><br><span class="line">            lastRefreshDate = <span class="keyword">new</span> Date();</span><br><span class="line">            lastRefreshDate.setTime(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(<span class="string">"last time: "</span> + lastRefreshDate);</span><br><span class="line">        Date nowRefreshTime = <span class="keyword">new</span> Date();<span class="comment">//本次的更新时间</span></span><br><span class="line">        System.err.println(<span class="string">"now: "</span>+ nowRefreshTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 将时间段内更新的文章的关键词更新</span></span><br><span class="line">        articleKeywordRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 根据两次时间差，将所有用户的喜好衰减更新</span></span><br><span class="line">        userKeywordAutoDec(lastRefreshDate,nowRefreshTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 根据时间段内的活动记录，将活动的用户的关键词更新</span></span><br><span class="line">        HashMap&lt;String,HashMap&lt;String,Double&gt; &gt; usersKeyword =  userKeywordRefresh();</span><br><span class="line">        <span class="keyword">if</span>(usersKeyword.size() == <span class="number">0</span>)&#123;<span class="comment">// 如果这段时间没有产生用户行为，就直接退出</span></span><br><span class="line">            lastRefreshDate = nowRefreshTime;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;ArticleKeyword&gt; articleKeywordList = articleKeywordMapper.selectAll();</span><br><span class="line">        <span class="comment">// 预处理所有的文章的关键词保存下来</span></span><br><span class="line">        HashMap&lt;Integer,List&lt;Keyword&gt; &gt;articleKeyword = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(ArticleKeyword item : articleKeywordList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(articleKeyword.containsKey(item.getArticleId()))&#123;</span><br><span class="line">                articleKeyword.get(item.getArticleId()).add(<span class="keyword">new</span> Keyword(item.getKeyword(),item.getTfidf()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                List&lt;Keyword&gt; keywordList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                keywordList.add(<span class="keyword">new</span> Keyword(item.getKeyword(),item.getTfidf()));</span><br><span class="line">                articleKeyword.put(item.getArticleId(),keywordList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        articleKeywordList.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预处理出来 每个关键词列表的 平方和的平方根 （余弦定理的分母部分）</span></span><br><span class="line">        HashMap&lt;String,Double&gt; userDiv = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer,Double&gt; articleDiv = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,HashMap&lt;String,Double&gt;&gt; entry: usersKeyword.entrySet())&#123;</span><br><span class="line">            <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(Double val: entry.getValue().values())&#123;</span><br><span class="line">                sum += val*val;</span><br><span class="line">            &#125;</span><br><span class="line">            userDiv.put(entry.getKey(),Math.sqrt(sum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,List&lt;Keyword&gt; &gt; entry: articleKeyword.entrySet())&#123;</span><br><span class="line">            <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(Keyword x : entry.getValue())&#123;</span><br><span class="line">                sum += x.getTfidf() * x.getTfidf();</span><br><span class="line">            &#125;</span><br><span class="line">            articleDiv.put(entry.getKey(),Math.sqrt(sum));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;ArticleRecommend&gt; articleRecommends = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//开始推荐计算</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,HashMap&lt;String,Double&gt; &gt; userEntry: usersKeyword.entrySet())&#123;</span><br><span class="line">            <span class="comment">//外层循环遍历每个用户</span></span><br><span class="line">            articleRecommends.clear();</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Integer,List&lt;Keyword&gt;&gt; articleEntry: articleKeyword.entrySet())&#123;</span><br><span class="line">                <span class="comment">//内层循环遍历每篇文章</span></span><br><span class="line">                <span class="keyword">double</span> score = similarity(userEntry.getValue(),articleEntry.getValue());</span><br><span class="line">                <span class="keyword">if</span>(score &gt; <span class="number">0.00001</span>)&#123;<span class="comment">// 非零就加入推荐列表里</span></span><br><span class="line">                    score /= (userDiv.get(userEntry.getKey()) * articleDiv.get(articleEntry.getKey()));</span><br><span class="line">                    articleRecommends.add(<span class="keyword">new</span> ArticleRecommend(userEntry.getKey(),articleEntry.getKey(),score));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除数据库中原先的推荐信息</span></span><br><span class="line">            articleRecommendMapper.deleteByUsername(userEntry.getKey());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果推荐的列表大于需要推荐的个数，就排序，添加前面推荐值高的</span></span><br><span class="line">            <span class="comment">// 保存到数据库中</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(articleRecommends.isEmpty())<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(articleRecommends.size() &gt; RECOMMEND_NUM)&#123;</span><br><span class="line">                sortRecommendList(articleRecommends);</span><br><span class="line">                articleRecommendMapper.insertList(articleRecommends.subList(<span class="number">0</span>,RECOMMEND_NUM));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> articleRecommendMapper.insertList(articleRecommends);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后将lastRefreshTime 更新成本次更新的时间</span></span><br><span class="line">        lastRefreshDate = nowRefreshTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将lastrefreshTime ~ 至今 时间段的文章的关键词更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">articleKeywordRefresh</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Article&gt; articleList = articleMapper.selectByModifyTime(lastRefreshDate);</span><br><span class="line">        <span class="keyword">for</span>(Article article : articleList)&#123;</span><br><span class="line">            <span class="comment">// 对于每个文章，分析出关键词列表</span></span><br><span class="line">            List&lt;Keyword&gt; keywordList = TFIDF.getTFIDF(article.getTitle(),article.getContent(),ARTICLE_KEYWORD_MAX_NUM,articleMapper);</span><br><span class="line">            <span class="comment">// 使用sql批量修改</span></span><br><span class="line">            <span class="keyword">if</span>(!keywordList.isEmpty())articleKeywordMapper.replaceInto(article.getArticleId(),keywordList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *根据规定时间段的活动记录，将用户的关键词更新</span></span><br><span class="line"><span class="comment">     * 并且将涉及到的用户更新后的值返回（以便为这些用户推荐）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,HashMap&lt;String,Double&gt; &gt; userKeywordRefresh()&#123;</span><br><span class="line">        <span class="comment">// 分为两部分：收藏的文章 和 点赞的文章</span></span><br><span class="line">        <span class="comment">// 其中收藏的文章的权重为点赞的文章的 lambda 倍</span></span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String,HashMap&lt;String,Double&gt; &gt; record = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 记录涉及到的每个用户的keyword表，最后一起更新到数据库</span></span><br><span class="line">        <span class="comment">// 处理过程中keyword 保存为hashmap ，便于合并（降低查找复杂度）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 文章收藏</span></span><br><span class="line">        List&lt;ArticleCollection&gt; articleCollectionList = articleCollectionMapper.selectByTime(lastRefreshDate);</span><br><span class="line">        <span class="keyword">if</span>(articleCollectionList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ArticleCollection articleCollection : articleCollectionList) &#123;</span><br><span class="line">                List&lt;Keyword&gt; articleKeywordList = articleKeywordMapper.selectByArticleId(articleCollection.getArticleId());</span><br><span class="line">                <span class="keyword">if</span>(articleKeywordList == <span class="keyword">null</span> || articleKeywordList.isEmpty())<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (record.containsKey(articleCollection.getUsername())) &#123;</span><br><span class="line">                    <span class="comment">// 如果已经有了就合并</span></span><br><span class="line">                    HashMap&lt;String,Double&gt; tmp = record.get(articleCollection.getUsername());</span><br><span class="line">                    <span class="keyword">for</span>(Keyword articleKeyword: articleKeywordList)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(tmp.containsKey(articleKeyword.getKeyword())) &#123;</span><br><span class="line">                            tmp.put(articleKeyword.getKeyword(),</span><br><span class="line">                                    tmp.get(articleKeyword.getKeyword()) + articleKeyword.getTfidf() * lambda);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> tmp.put(articleKeyword.getKeyword(),articleKeyword.getTfidf()*lambda);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    record.put(articleCollection.getUsername(), tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    HashMap&lt;String,Double&gt; tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(Keyword articleKeyword: articleKeywordList)&#123;</span><br><span class="line">                        tmp.put(articleKeyword.getKeyword(),articleKeyword.getTfidf()*lambda);</span><br><span class="line">                    &#125;</span><br><span class="line">                    record.put(articleCollection.getUsername(), tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 文章点赞</span></span><br><span class="line">        List&lt;ArticleAgree&gt; articleAgreeList = articleAgreeMapper.selectByTime(lastRefreshDate);</span><br><span class="line">        <span class="keyword">if</span>(articleAgreeList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ArticleAgree articleAgree : articleAgreeList) &#123;</span><br><span class="line">                List&lt;Keyword&gt; articleKeywordList = articleKeywordMapper.selectByArticleId(articleAgree.getArticleId());</span><br><span class="line">                <span class="keyword">if</span>(articleKeywordList == <span class="keyword">null</span> || articleKeywordList.isEmpty())<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (record.containsKey(articleAgree.getUsername())) &#123;</span><br><span class="line">                    <span class="comment">// 如果已经有了就合并</span></span><br><span class="line">                    HashMap&lt;String,Double&gt; tmp = record.get(articleAgree.getUsername());</span><br><span class="line">                    <span class="keyword">for</span>(Keyword articleKeyword: articleKeywordList)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(tmp.containsKey(articleKeyword.getKeyword())) &#123;</span><br><span class="line">                            tmp.put(articleKeyword.getKeyword(),</span><br><span class="line">                                    tmp.get(articleKeyword.getKeyword()) + articleKeyword.getTfidf());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> tmp.put(articleKeyword.getKeyword(),articleKeyword.getTfidf());</span><br><span class="line">                    &#125;</span><br><span class="line">                    record.put(articleAgree.getUsername(), tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    HashMap&lt;String,Double&gt; tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span>(Keyword articleKeyword: articleKeywordList)&#123;</span><br><span class="line">                        tmp.put(articleKeyword.getKeyword(),articleKeyword.getTfidf());</span><br><span class="line">                    &#125;</span><br><span class="line">                    record.put(articleAgree.getUsername(), tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将增加的关键词 与 用户原先的合并</span></span><br><span class="line">        <span class="comment">// 然后将更新的键值 保存到数据库中</span></span><br><span class="line">        <span class="keyword">for</span>(HashMap.Entry&lt;String,HashMap&lt;String,Double&gt; &gt; entry : record.entrySet())&#123;</span><br><span class="line">            List&lt;Keyword&gt; userKeywordList = userKeywordMapper.selectByUsername(entry.getKey());</span><br><span class="line">            <span class="keyword">if</span>(userKeywordList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Keyword keyword : userKeywordList) &#123;</span><br><span class="line">                    <span class="comment">// 如果已经有就合并</span></span><br><span class="line">                    <span class="keyword">if</span> (entry.getValue().containsKey(keyword.getKeyword())) &#123;</span><br><span class="line">                        entry.getValue().put(keyword.getKeyword(),</span><br><span class="line">                                entry.getValue().get(keyword.getKeyword()) + keyword.getTfidf());</span><br><span class="line">                    &#125; <span class="keyword">else</span> entry.getValue().put(keyword.getKeyword(), keyword.getTfidf());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将每个用户对应的关键词的map 以列表的形式存下来(方便插入数据库)</span></span><br><span class="line">            <span class="keyword">if</span>(userKeywordList != <span class="keyword">null</span> )userKeywordList.clear();</span><br><span class="line">            <span class="keyword">else</span> userKeywordList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(HashMap.Entry&lt;String,Double&gt; keyWordEntry: entry.getValue().entrySet())&#123;</span><br><span class="line">                userKeywordList.add(<span class="keyword">new</span> Keyword(keyWordEntry.getKey(),keyWordEntry.getValue()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(userKeywordList.isEmpty())<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(userKeywordList.size() &gt; USER_KEYWORD_MAX_NUM) &#123;<span class="comment">// 如果超过了规定的数，就删除影响最小的</span></span><br><span class="line">                sortKeyWordList(userKeywordList);</span><br><span class="line">                <span class="keyword">while</span> (userKeywordList.size() &gt; USER_KEYWORD_MAX_NUM)&#123;</span><br><span class="line">                    entry.getValue().remove(userKeywordList.get(userKeywordList.size()-<span class="number">1</span>).getKeyword());</span><br><span class="line">                    userKeywordList.remove(userKeywordList.size()-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最后将此保存到数据库中</span></span><br><span class="line">            userKeywordMapper.replaceInto(entry.getKey(),userKeywordList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> record;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将关键词列表从大到小排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keywordList 关键词列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortKeyWordList</span><span class="params">(List&lt;Keyword&gt; keywordList)</span></span>&#123;</span><br><span class="line">        Collections.sort(keywordList, <span class="keyword">new</span> Comparator&lt;Keyword&gt;() &#123;<span class="comment">// 使用内部类自定义排序规则</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Keyword o1, Keyword o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 按照TFIDF值从大到小排序</span></span><br><span class="line">                <span class="keyword">if</span>(o2.getTfidf() - o1.getTfidf() &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(o2.getTfidf() - o1.getTfidf() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleRecommendList 推荐列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortRecommendList</span><span class="params">(List&lt;ArticleRecommend&gt; articleRecommendList)</span></span>&#123;</span><br><span class="line">        Collections.sort(articleRecommendList, <span class="keyword">new</span> Comparator&lt;ArticleRecommend&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ArticleRecommend o1, ArticleRecommend o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o2.getSimilarity() - o1.getSimilarity() &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(o2.getSimilarity() - o1.getSimilarity() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashMap 用户的关键词表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keywordList 文章的关键词表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回两者的相似度 (余弦定理的上半部分)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">similarity</span><span class="params">(HashMap&lt;String,Double&gt; hashMap,List&lt;Keyword&gt; keywordList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Keyword keyword: keywordList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashMap.containsKey(keyword.getKeyword()))&#123;</span><br><span class="line">                ans += keyword.getTfidf() * hashMap.get(keyword.getKeyword());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  用户的兴趣随时间衰减值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userKeywordAutoDec</span><span class="params">(Date from,Date to)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> day = to.getTime() - from.getTime();</span><br><span class="line">        day /= (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> ); <span class="comment">//两者相隔的天数</span></span><br><span class="line">        <span class="keyword">double</span> dec = Math.pow(AUTO_DEC_NUM , day);</span><br><span class="line">        userKeywordMapper.mulAll(dec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-TFIDF-算法实现"><a href="#3-TFIDF-算法实现" class="headerlink" title="3.TFIDF 算法实现"></a>3.TFIDF 算法实现</h3><p>(将分词和TFIDF都写在了一个类里面了)</p><p>在包 edu.study.util.recommend 里面新建一个类 TFIDF.java</p><p>TFIDF需要两个部分： 分词（计算词频），语料库（计算逆文档频率）</p><h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><p>这里使用的是Stanford CoreNLP， 是由The Stanford Natural LanguageProcessing Group斯坦福大学自然语言处理团队开发的多个NLP工具之一。<br>这个NLP工具非常强大，支持多种编程语言，支持分析多种自然语言，能够进行句法语法分析，远不止分词这点功能。~(这里使用这个工具真的有点大材小用的感觉)~<br>github地址：<a href="https://github.com/stanfordnlp/CoreNLP">https://github.com/stanfordnlp/CoreNLP</a><br>文档地址：<a href="https://stanfordnlp.github.io/CoreNLP/index.html">https://stanfordnlp.github.io/CoreNLP/index.html</a></p><p>直接使用maven构建工具下载即可，在 “pom.xml” 的<code>&lt;dependencies&gt;</code>节点里面添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>models<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里只加了英文的处理。如果想添加中文或者其他语言的支持，另外再加几个包即可。</p><p>主要是使用分词和词性的还原,词性标注 ，比如apples-&gt;apple, created -&gt; create 等<br>然后只将有用的名词，某些动词，形容词，副词等作为关键词（也省去了停顿词的过滤）<br>实现可以看下面的TFIDF.java 中的 cut函数</p><h4 id="语料库"><a href="#语料库" class="headerlink" title="语料库"></a>语料库</h4><p>语料库是个头疼的问题，暂时没有找到，而且每个行业的文本背景不一样，不适合都用通用的IDF语料库，所以就暂时将现有的article数据表当做语料库（这样语料库也是在不断更新扩大中）</p><h4 id="TFIDF实现"><a href="#TFIDF实现" class="headerlink" title="TFIDF实现"></a>TFIDF实现</h4><p>其中只提供一个静态接口为推荐算法调用</p><p>实现代码 TFIDF.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.study.util.recommend;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.stanford.nlp.simple.Document;</span><br><span class="line"><span class="keyword">import</span> edu.stanford.nlp.simple.Sentence;</span><br><span class="line"><span class="keyword">import</span> edu.study.dao.ArticleMapper;</span><br><span class="line"><span class="keyword">import</span> edu.study.model.Keyword;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TFIDF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Keyword&gt; <span class="title">getTFIDF</span><span class="params">(String title, String content, <span class="keyword">int</span> keywordNum, ArticleMapper articleMapper)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; words = cut(content);</span><br><span class="line">        words.addAll(cut(title));</span><br><span class="line">        <span class="keyword">int</span> total = words.size();<span class="comment">//总词数</span></span><br><span class="line">        HashMap&lt;String,Double&gt; tfidf = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先计算词频 TF</span></span><br><span class="line">        <span class="keyword">for</span>(String word:words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tfidf.containsKey(word))&#123;</span><br><span class="line">                tfidf.put(word,tfidf.get(word)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> tfidf.put(word,<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        words.clear();<span class="comment">// 不用的马上清空释放内存</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Double&gt; entry:tfidf.entrySet())&#123;</span><br><span class="line">            entry.setValue(entry.getValue() / total );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后计算逆文档频率</span></span><br><span class="line">        <span class="keyword">double</span> articleTotal = articleMapper.countAll();<span class="comment">//总文档个数</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Double&gt; entry: tfidf.entrySet())&#123;</span><br><span class="line">            <span class="keyword">int</span> num = articleMapper.countLike(<span class="string">"% "</span>+entry.getKey()+<span class="string">" %"</span>) + <span class="number">1</span>;<span class="comment">//包含该词的文档数</span></span><br><span class="line">            entry.setValue(entry.getValue() * Math.log(articleTotal/num));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将计算后的保存为Keyword的列表</span></span><br><span class="line">        List&lt;Keyword&gt; keywords = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Double&gt; entry: tfidf.entrySet())&#123;</span><br><span class="line">            keywords.add(<span class="keyword">new</span> Keyword(entry.getKey(),entry.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        tfidf.clear();<span class="comment">// 不用的清空释放内存</span></span><br><span class="line">        <span class="keyword">if</span>(keywords.size() &gt; keywordNum)&#123;<span class="comment">// 如果大于给定的个数，就排序,取前面重要的</span></span><br><span class="line">            Collections.sort(keywords, <span class="keyword">new</span> Comparator&lt;Keyword&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Keyword o1, Keyword o2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">double</span> diff = o1.getTfidf() - o2.getTfidf();</span><br><span class="line">                    <span class="keyword">if</span>(diff &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(diff == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            keywords.subList(keywordNum,keywords.size()).clear();<span class="comment">// 将超过的部分删掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keywords;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">cut</span><span class="params">(String content)</span></span>&#123;<span class="comment">// 分词</span></span><br><span class="line">        Document document = <span class="keyword">new</span> Document(content);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Sentence sentence: document.sentences())&#123;</span><br><span class="line">            <span class="comment">// 可作为关键词的词性： 名词，形容词, 动词</span></span><br><span class="line">            <span class="comment">// 名词：NN,NNS,NNP（专有名词）,NNPS, NT(时间名词),NP（名词短语），NR（固有名词） FW（外来词）</span></span><br><span class="line">            <span class="comment">// 形容词：JJ* , 副词： RB*</span></span><br><span class="line">            <span class="comment">// 动词： VB*</span></span><br><span class="line">            <span class="keyword">int</span> len = sentence.words().size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">                String tag = sentence.posTag(i);</span><br><span class="line">                <span class="keyword">if</span>(tag.charAt(<span class="number">0</span>)==<span class="string">'N'</span> || tag.contains(<span class="string">"VB"</span>) || tag.contains(<span class="string">"FW"</span>) ||</span><br><span class="line">                        tag.contains(<span class="string">"JJ"</span>) || tag.contains(<span class="string">"RB"</span>))&#123;</span><br><span class="line">                    <span class="comment">// 将词元添加进列表中</span></span><br><span class="line">                    res.add(sentence.lemma(i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LAST"><a href="#LAST" class="headerlink" title="LAST"></a>LAST</h2><p>最后，这个简易的基于内容的推荐系统就算实现了（作为整个系统的一个小模块）<br>因为时间紧，就写了一天的样子吧，也没有具体的测试推荐的效果，可能会有很多的小bug<br>（以后还是有可能维护更新的）<br>具体可以看项目里代码：<a href="https://github.com/yanghaku/java-ssm">https://github.com/yanghaku/java-ssm</a></p><hr/>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为项目的需要，里面加一个小型的推荐系统的模块，就找了一些资料，实现了基于内容的一个推荐系统。&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;基于内容相似度的推荐：就是把与你喜欢看的文章内容相似的文章推荐给你。&lt;/p&gt;
&lt;p&gt;优势：无冷启动的问题，只要用户产生了初始的历史数据，就可以开始进行推荐计算。而且随着用户的浏览记录数据的增加，这种推荐一般也会越来越准确。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Spring" scheme="https://yanghaku.github.io/tags/Spring/"/>
    
      <category term="TFIDF" scheme="https://yanghaku.github.io/tags/TFIDF/"/>
    
  </entry>
  
  <entry>
    <title>机器学习入门-西瓜书学习笔记（2）模型评估与选择</title>
    <link href="https://yanghaku.github.io/2020/02/07/%E5%91%A8%E5%BF%97%E5%8D%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <id>https://yanghaku.github.io/2020/02/07/%E5%91%A8%E5%BF%97%E5%8D%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</id>
    <published>2020-02-07T12:14:00.000Z</published>
    <updated>2020-02-12T03:42:12.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="训练误差与过拟合"><a href="#训练误差与过拟合" class="headerlink" title="训练误差与过拟合"></a>训练误差与过拟合</h2><h3 id="训练误差"><a href="#训练误差" class="headerlink" title="训练误差"></a>训练误差</h3><p>分类错误的样本数占样本总数的比例称为“<strong>错误率</strong>”（error rate）。即在m个样本中有a个样本分类错误，则错误率$E = a/m*100% $。相应的，“1-错误率”称为“<strong>精度</strong>”（accuracy）。<br>更一般地来说，学习器实际预测输出与样本的真实输出之间的差异称为“<strong>误差</strong>”（error），学习器在训练集上的误差称为“<strong>训练误差</strong>”（training error）或“<strong>经验误差</strong>”（empirical error），在新样本上的误差称为“<strong>泛化误差</strong>”（generalization error）。</p><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p><strong>过拟合</strong>（overfitting）：把训练样本训练得太好的时候，很可能把训练样本自身的一些特点当做了所有潜在样本都会具有的一般性质，这样导致泛化性能下降。（学习能力太强）<br><strong>欠拟合</strong>（underfitting）：与过拟合相对，指对训练样本的一般性质尚未学好。（学习能力太差）</p><h2 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h2><p>一般都是通过实验测试的方式来对学习器的泛化误差进行评估，用“测试集”上测得的“测试误差”（testing error）来作为泛化误差的近似。测试集应尽可能与训练集互斥，因为我们要测试的是泛化能力，就像考试出原题的话是测不出学生的“举一反三”能力的。</p><p>当只有一个包含 $m$ 个样例的数据集 $D = \{(x_1,y_1),(x_2,y_2),…,(x_m,y_m)\}$ 的时候，可以经过一些方法的适当处理来产生训练集$S$ 和测试集$T$:</p><h3 id="留出法"><a href="#留出法" class="headerlink" title="留出法"></a>留出法</h3><p>“留出法”（hold-out）是直接将数据集D划分成两个互斥的集合，其中一个集合作为训练集S，另一个作为测试集T，即：$S\cupT=D,S\capT=\varnothing$。在S上训练出模型之后，用T来评估其测试误差，作为对泛化误差的估计。</p><blockquote><p>比如一个二分类的任务，D有1000个样本，将其划分成S（700个）和T（300个），用S训练后，如果模型在T上有90个样本分类错误，那么其错误率为(90/300)*100% = 30%, 相应的精确度为 1-30%=70%。</p></blockquote><p>updating</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;训练误差与过拟合&quot;&gt;&lt;a href=&quot;#训练误差与过拟合&quot; class=&quot;headerlink&quot; title=&quot;训练误差与过拟合&quot;&gt;&lt;/a&gt;训练误差与过拟合&lt;/h2&gt;&lt;h3 id=&quot;训练误差&quot;&gt;&lt;a href=&quot;#训练误差&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="机器学习" scheme="https://yanghaku.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://yanghaku.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习入门-西瓜书学习笔记（1）绪论</title>
    <link href="https://yanghaku.github.io/2020/02/03/%E5%91%A8%E5%BF%97%E5%8D%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E7%BB%AA%E8%AE%BA/"/>
    <id>https://yanghaku.github.io/2020/02/03/%E5%91%A8%E5%BF%97%E5%8D%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E7%BB%AA%E8%AE%BA/</id>
    <published>2020-02-03T05:19:00.000Z</published>
    <updated>2020-02-04T13:14:33.539Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个对人工智能机器学习领域一无所知的小白，看到许多大神都在推荐周志华老师的《机器学习》这本书来入门。我也找到了这本书，想把这本书研究透彻，借助这本书迈进这个陌生的领域。正所谓不动笔墨不读书，我要在学习的同时，把读到的想到的学到的都记下来，才能更好地真正理解。希望能像前辈大神们那样，坚持读完这本书（并记下属于自己的西瓜书笔记）。<br>就像书里说的那句<code>这学期狠下功夫，基础概念弄得清清楚楚，算法作业也是信手拈来，这门课成绩一定差不了！</code><br>加油!奥力给！</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><a id="more"></a><p><strong>机器学习</strong>（machine learning）是致力于通过计算的手段，利用“经验”来改善系统自身的性能的一门学科。在计算机系统中，“经验”通常以“数据”的形式存在，所以机器学习研究的主要内容就是通过这些“数据”来产生<strong>模型</strong>的算法，也就是<strong>学习算法</strong>（learning algorithm）。<br>也就是</p><script type="math/tex; mode=display">原始数据（经验）\xrightarrow{学习算法} 模型</script><p>学习之后应用解决问题：</p><script type="math/tex; mode=display">新的情况（经验没有的）\xrightarrow{学习算法产生的模型} 对应的结果或判断</script><p>这个<strong>模型</strong>泛指从数据中学到的结果。有的文献用<strong>模型</strong>来指全局性的结果（比如一棵决策树），用<strong>模式</strong>来指局部性的结果（比如一条规则）。</p><blockquote><p>T.M.Mitchell在1997年所著的Machine Learning给出了更形式化的定义：<br>假设用<strong>P</strong>来评估计算机程序在某任务类<strong>T</strong>上的性能，若一个程序通过利用经验<strong>E</strong>在<strong>T</strong>任务上获得了性能改善，则我们就说关于<strong>T</strong>和<strong>P</strong>，该程序对<strong>E</strong>进行了学习。</p></blockquote><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li><strong>数据集</strong>（data set）：进行机器学习需要的数据所有记录的集合。其中每一条记录是关于一个事件或者对象的一个描述，称为一个“<strong>示例</strong>”（instance）或“<strong>样本</strong>”（sample）。 </li><li><strong>属性</strong> ： 反映事件或者对象在某方面的表现或性质的事项，称为“<strong>属性</strong>”（attribute）或“<strong>特征</strong>”（feature）。</li><li><strong>属性值</strong>：属性上的取值称为“<strong>属性值</strong>”。</li><li><strong>属性空间</strong>：属性张成的空间，称为“<strong>属性空间</strong>”（attribute space），“<strong>样本空间</strong>”或“<strong>输入空间</strong>”。</li><li><strong>特征向量</strong>：由于空间中的每一个点对应一个坐标向量，因此我们也把一个样本称为<strong>特征向量</strong>（feature vector）。</li><li><strong>维数</strong>：一个样本的特征的个数称为<strong>维数</strong>（dimensionality）。</li></ul><p>比如一个西瓜（色泽=青绿,根蒂=蜷缩,敲声=浊响）这条记录就是<strong>示例</strong>或<strong>样本</strong>。所有的西瓜示例组成的集合就是<strong>数据集</strong>。<br>“色泽”，“根蒂”，“敲声”就是<strong>属性</strong>。<br>“青绿”，“蜷缩”，“浊响”就是对应的<strong>属性值</strong>。<br>把西瓜的“色泽”，“根蒂”，“敲声”作为三个坐标轴，则他们张成一个用于<strong>描述西瓜的三维空间，</strong>每个西瓜都能在这个空间里找到属于自己的坐标位置。<br>这个西瓜样本也叫做一个<strong>特征向量</strong>：(青绿,蜷缩,浊响)就是在样本空间对应的坐标。</p><blockquote><p>在这里我的理解是数据集就像数据库里面的一张数据表，表里每一行记录是其中的一个样本，每一列就是对象的一个属性，对应的值也就是属性值。<br>或者用面向对象的方法理解，把研究的对象的某些特征提取出来作为类的属性。每一个样本也就是一个类的实例，所有对象的集合就是数据集。</p></blockquote><p>一般地，令$D = \{ x_1,x_2,x_3,…,x_m \} $ 表示包含 <strong>$m$</strong>个样本的数据集，每个示例由 <strong>$d$</strong> 个属性描述， 则每个样本 $x_i = (x_{i1},x_{i2},x_{i3},…,x_{id})$ 是 $d$ 维样本空间 <strong>$\chi$</strong> 的一个向量(<strong>$x_i \in \chi$</strong>), 其中 $x_{ij}$ 是 $x_i$ 在第 $j$ 个属性上的取值，样本$x_i$的维数为$d$。</p><hr/><ul><li><strong>学习/训练</strong>：从数据中通过某种学习算法学得模型的过程称为“<strong>学习</strong>”（learning）或者“<strong>训练</strong>”（training）。</li><li>训练过程中使用的数据称为“<strong>训练数据</strong>”（training data），其中每一个样本称为一个“<strong>训练样本</strong>”（training sample），训练样本组成的集合叫做“<strong>训练集</strong>”（training set）。</li></ul><p>学习所得的模型对应了关于数据某种潜在的规律，因此亦成为“<strong>假设</strong>”；这种规律自身，则称为“<strong>真相</strong>”或“<strong>事实</strong>”（ground-truth）。学习的过程就是为了找出或逼近真相。</p><p>要学得一个能够“<strong>预测</strong>”（prediction）的模型，还需要获得训练样本的“结果”信息。</p><blockquote><p>比如$(色泽=青绿,根蒂=蜷缩,敲声=浊响) \Rightarrow 好瓜$</p></blockquote><ul><li><strong>标记</strong>：样本结果的信息称为“<strong>标记</strong>”（label），比如上面的“好瓜”就是标记。</li><li><strong>样例</strong>：有了标记结果的样本，称为“<strong>样例</strong>”（example）。</li><li><strong>标记空间</strong>：所有标记的集合，称为“<strong>标记空间</strong>”或“<strong>输出空间</strong>”。</li></ul><p>一般地，用$(x_i,y_i)$ 表示第 $i$ 个样例，其中 $y_i \in Y$是示例 $x_i$ 对应的标记，$Y$ 是标记空间。</p><p>如果预测的是离散值，则此类学习任务称为“<strong>分类</strong>”（classification）。<br>如果预测的是连续值，则此类学习任务称为“<strong>回归</strong>”（regression）。</p><blockquote><p>比如预测瓜是“好瓜”还是“坏瓜”这就是分类，预测瓜的成熟度为“0.90”，“0.95”这种就是“回归”。</p></blockquote><p>对于只涉及两个类别的分类，称为“<strong>二分类</strong>”（binary classification）任务，通常一个类称为“<strong>正类</strong>”（positive class），另一个类称为“<strong>反类</strong>”（negative class）。<br>对于涉及多个类别的分类，称为“<strong>多分类</strong>”（multi-class classification）任务。</p><p>一般地，预测任务是希望通过对训练集 $\{ (x_1,y_1),(x_2,y_2),(x_3,y_3),…,(x_m,y_m)\}$进行学习，建立一个从输入空间$\chi$到输出空间$Y$的映射$f:\chi\rightarrow Y$.<br>二分类的任务通常令$Y=\{-1,+1\}$ 或 $\{0,1\}$, 对于多分类的任务$|Y| \gt 2$，对于回归任务，$Y = R$（即为实数集）。</p><p>学得模型之后，使用其进行预测的过程称为“<strong>测试</strong>”（testing），被预测的样本称为“<strong>测试样本</strong>”（testing sample）。测试样本的集合称为“<strong>测试集</strong>”（testing set）。</p><blockquote><p>训练学得$f$之后，对测试样本$x$，就可以得到预测标记$y = f(x) $.</p></blockquote><hr/><p>除了预测任务之外，我们还可以对训练集做“<strong>聚类</strong>”（clustering），即对训练集中的样本分为若干组，每一组称为一个“<strong>簇</strong>”（cluster）。<br>这些自动形成的簇可能对应一些潜在的概念划分，有助于我们了解数据内在的规律，能为更深入地分析数据建立基础。</p><blockquote><p>比如将西瓜分为“浅色瓜”，“深色瓜”或者“大瓜”，“小瓜”。</p></blockquote><p>在聚类学习中，像例子上的“浅色瓜”这种概念是我们事先不知道的，而是通过学习得到了这些概念。而且学习过程中使用的训练样本通常都不拥有标记信息。</p><hr/><p>根据训练数据是否拥有标记信息，学习任务可以大致分为两大类：“<strong>监督学习</strong>” （supervised learning）和 “<strong>无监督学习</strong>” （unsupervised learning）。<br>监督学习的代表就是分类和回归，无监督学习的代表就是聚类。</p><p>机器学习的目标是使得学得的模型很好地适用于“新样本”，而不是仅仅在训练样本里工作得很好。（预测任务对新样本预测的结果的也要很准确，聚类学习学得的簇划分在新样本上也要适用）。</p><p>学得模型适用于新样本的能力，称为“<strong>泛化</strong>”（generalization）能力。具有强泛化能力的模型能很好地适用于整个的样本空间。</p><blockquote><p>训练集（特殊），训练之后适用于测试集（一般），也就是模型从特殊到一般的能力。</p></blockquote><p>所以说，尽管训练集只是样本的很小的采样，我们仍希望它能很好地反映出样本空间的特性，否则就很难期望在训练集上学得的模型能在整个样本空间上都工作得很好。假设样本空间中全部服从一个未知的$D$分布，我们训练样本越多，那么得到的关于$D$的信息就越多，就越有可能通过学习获得具有强泛化能力的模型。</p><hr/><h2 id="假设空间"><a href="#假设空间" class="headerlink" title="假设空间"></a>假设空间</h2><h3 id="概念学习"><a href="#概念学习" class="headerlink" title="概念学习"></a>概念学习</h3><p>科学推理的两个基本手段：归纳与演绎。归纳是从特殊到一般的“泛化”过程，演绎是从一般到特殊的“特化”过程。“从样例中学习”显然是一个归纳的过程，因此亦成为“归纳学习”（inductive learning）。<br>归纳学习有狭义和广义之分。广义的归纳学习就是从样例中学习，而狭义的归纳学习则要求从训练数据中学得<strong>概念</strong>（concept）（也称作“<strong>概念学习</strong>”或“概念形成”）。概念学习技术目前研究、应用都特别少，因为要学得泛化性能好且语义明确的概念实在太困难了，现实常用的技术大多都是产生一个黑箱模型而不是一个明确语义的概念（广义的归纳学习）。<br>（当然，了解概念学习还是对机器学习的学习有帮助的）</p><p>概念学习中最基本的就是布尔概念学习，即对“是”，“不是”这样的可表示为0/1布尔值的目标概念的学习。<br>比如我们得到了一个这样的数据集：</p><div class="table-container"><table><thead><tr><th>编号</th><th>色泽</th><th>根蒂</th><th>敲声</th><th>好瓜</th></tr></thead><tbody><tr><td>1</td><td>青绿</td><td>蜷缩</td><td>浊响</td><td>是</td></tr><tr><td>2</td><td>乌黑</td><td>蜷缩</td><td>浊响</td><td>是</td></tr><tr><td>3</td><td>青绿</td><td>硬挺</td><td>清脆</td><td>否</td></tr><tr><td>4</td><td>乌黑</td><td>稍蜷</td><td>沉闷</td><td>否</td></tr></tbody></table></div><p>这里要学习的目标就是“是不是好瓜”，假设由“色泽”，“根蒂”，“敲声”这三个因素完全确定，那么我们学习的目标就是“<strong>好瓜是色泽?、根蒂?、敲声?的瓜</strong>” 这样的概念。用布尔表达式表示是：“<strong>好瓜 $\leftrightarrow$ (色泽=?) $\land$ (根蒂=?) $\land$ (敲声=?)</strong>”。我们的任务就是通过对这个训练集的学习，将前面的三个“？”确定下来。</p><blockquote><p>注：如果只是将训练集里面的内容记住，以后再见到一模一样的瓜就能判断，但是对于没见过的瓜就没有了判断能力，这“记住样本”是所谓的“机械学习”或“死记硬背式学习”。这已经和我们的“泛化”的目的相背离了。这和我们人类的学习一样，死记硬背是学不到真正的东西，学不到解决问题的能力的，只有培养举一反三的能力，灵活运用才能是真正的学习。</p></blockquote><h3 id="假设空间-1"><a href="#假设空间-1" class="headerlink" title="假设空间"></a>假设空间</h3><p>学习的过程可以看作是枚举所有的假设的过程，搜索出那些能将训练集中的瓜判断正确的假设，也就是能和所有的训练集数据匹配的假设。所有的假设组成的空间称为假设空间。<br>假设空间及其大小规模是由假设的表示决定的。比如西瓜的例子：“<strong>好瓜 $\leftrightarrow$ (色泽=?) $\land$ (根蒂=?) $\land$ (敲声=?)</strong>”。如果色泽的取值有两种：“青绿”、“乌黑”，根蒂的取值有两种：“蜷缩”、“稍蜷”，敲声的取值有两种：“浊响”、“沉闷”。因为每一种属性有可能会取什么值都合适，我们用通配符“*”来表示这种取值。还有一种可能是无论这三种属性取什么值都没有“好瓜”存在，我们用“$\varnothing$”表示这种假设。这样，假设空间的规模大小就是：$(2+1)*(2+1)*(2+1)+1 = 28$ 。</p><blockquote><p>在西瓜的这个大小为28的假设空间里面，有1个是$\varnothing$,另外27个则是{ “青绿”，“乌黑”，“*” }和 { “蜷缩”，“稍蜷”，“*” } 和 { “浊响”，“沉闷”，“*” } 的组合。</p></blockquote><p>可以用很多策略对这个假设空间进行搜索，比如自顶向下，从特殊到一般，从一般到特殊等。搜索过程中可以不断删除与正例不一致的假设，最终会得到与训练集一致的所有假设，这就是我们学得的结果。<br>在现实问题中，我们的假设空间规模通常非常大，但学习是基于有限的样本训练集进行的，因此可能会有多个假设与训练集一致。这些假设构成的集合称为“<strong>版本空间</strong>”（version space）。</p><blockquote><p>比如说上面的西瓜问题，搜索后得到了3个满足的假设，也就是版本空间为：<br>(色泽=*,根蒂=蜷缩,敲声=*)<br>(色泽=*,根蒂=*,敲声=清脆)<br>(色泽=*,根蒂=蜷缩,敲声=清脆)</p></blockquote><h2 id="归纳偏好"><a href="#归纳偏好" class="headerlink" title="归纳偏好"></a>归纳偏好</h2><p>上一节获得的版本空间会带来一个麻烦：有多个和训练集一致的假设，但他们面对新样本的时候却会产生不同的输出。然而，对于一个具体的机器学习的算法而言，它必须产生一个模型，也就是说必须从里面选择出一个。这时候，学习算法本身的“偏好”就起到了关键作用。</p><blockquote><p>例如，若我们的算法喜欢“尽可能特殊”的模型，那么我们就会选择“好瓜$\leftrightarrow$ (色泽=*,根蒂=蜷缩,敲声=清脆)”;<br>若我们的算法喜欢“尽可能一般”的模型，并且由于某种原因更“相信”根蒂，那么它会选择“好瓜$\leftrightarrow$ (色泽=*,根蒂=蜷缩,敲声=*)”。</p></blockquote><p>机器学习在学习过程中对某种类型假设的偏好，称为“<strong>归纳偏好</strong>”（inductive bias），或者简称为“<strong>偏好</strong>”。</p><p>任何一个有效的机器学习算法必有其归纳偏好，否则它将会被假设空间中看似在训练集上“等效”的假设所迷惑，而无法产生确定的学习结果。</p><p>归纳偏好可以看作是学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或“价值观”。对于偏好的制定者来说，归纳偏好对应了学习算法中做出的“什么样的模型更好”的假设，这个假设是否成立，归纳偏好是否与问题本身匹配，大多数直接决定了算法是否取得好的性能。脱离具体的问题，空泛地谈论“什么学习算法更好”毫无意义，因为若考虑所有潜在的问题，则所有学习算法都一样好。要谈论算法的相对优劣，必须要针对具体的学习问题，在某些问题上表现好的学习算法，在另一些问题上却可能不尽如人意，学习算法自身的归纳偏好与问题是否相配，往往会起到决定性的作用。</p><hr/><p style="text-align:center;font-size:26px;color:red">EOF</p><hr/><h2 id="西瓜书pdf下载链接"><a href="#西瓜书pdf下载链接" class="headerlink" title="西瓜书pdf下载链接"></a>西瓜书pdf下载链接</h2><p><img src="1.png" alt=""></p><p>链接：<a href="https://pan.baidu.com/s/1-NKceuYl-3J-zxStrva6pQ" target="_blank">https://pan.baidu.com/s/1-NKceuYl-3J-zxStrva6pQ</a><br>提取码：hvis </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个对人工智能机器学习领域一无所知的小白，看到许多大神都在推荐周志华老师的《机器学习》这本书来入门。我也找到了这本书，想把这本书研究透彻，借助这本书迈进这个陌生的领域。正所谓不动笔墨不读书，我要在学习的同时，把读到的想到的学到的都记下来，才能更好地真正理解。希望能像前辈大神们那样，坚持读完这本书（并记下属于自己的西瓜书笔记）。&lt;br&gt;就像书里说的那句&lt;code&gt;这学期狠下功夫，基础概念弄得清清楚楚，算法作业也是信手拈来，这门课成绩一定差不了！&lt;/code&gt;&lt;br&gt;加油!奥力给！&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://yanghaku.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://yanghaku.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin.Android 运行原理</title>
    <link href="https://yanghaku.github.io/2020/02/02/Xamarin.Android%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://yanghaku.github.io/2020/02/02/Xamarin.Android%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</id>
    <published>2020-02-02T01:25:00.000Z</published>
    <updated>2020-02-02T07:20:24.256Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要内容：<br>Xamarin.Android应用的体系结构<br>Xamarin.Android应用怎么运行在Android系统中的。<br>MCW和ACW<br>Xamarin.Android应用包的结构</p><p>前置知识：<a href="https://yanghaku.github.io/2020/01/31/Android%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/" target="_blank">Android操作系统的基础知识</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在Android原生的开发中，主要运行的是Java或Kotlin编译后的字节码（<code>.dex</code>）每个应用单独分配一个ART虚拟机，运行在linux内核之上。</p><p>对于其他语言做的应用在Android平台运行，像c/c++这种静态编译的语言，可以直接编译成二进制码，通过JNI（java本地接口）与java通信（调用操作系统的API），直接运行在Library层即可（因为这一层是c/c++实现的，所以这一层也提供了原生c/c++的API供调用）。</p><p>而Xamarin是用C#开发的语言，C#和java一样，也是即时编译（JIT）语言，编译成中间语言（IL）之后需要在 .NET虚拟机上运行（在移动端是Mono虚拟机）。Android操作系统本身就没有C#的运行环境，而C#不能直接编译成二进制机器码，所以要融入Android，还需要在每个应用里带着 .NET运行时（Mono虚拟机）。这样C#才能在Android系统里运行。</p><a id="more"></a><p>其实Android本身就是软件叠层的方式构建的操作系统，Android上没有支持C#运行的环境，应用安装的时候自己带上就好了。（就举个简单的栗子：windows本身不带着JRE，而用Java语言写的程序在windows上需要JRE来运行，那么我开发Java应用的时候直接在应用里打包一个给自己专门用的JRE，不就支持所有的Windows操作系统了~ ）</p><p>这只是简单来说，其实具体还得解决开发的时候操作系统的API调用等等各种问题。</p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>先放一个官网文档里的架构图：<br><img src="architecture1.png" alt="architecture1.png"></p><p>这张图是Xamarin.Android应用在Android平台上运行的架构图。右边的部分是原生的Android应用在Android系统上的架构图。左边是Xamarin.Android项目在对应层里面添加的运行依赖东西。首先就是在ART的同一层添加了Mono虚拟机（c语言实现的），运行在Linux之上。项目里面java编译的字节码通过ART执行，c#编译的字节码通过Mono虚拟机来执行。应用运行的时候，两个虚拟机在Linux内核之上并行运行的。</p><blockquote><p>Xamarin.Android应用需要包装打包Mono虚拟机，所以产生的<code>.apk</code>文件比原生开发出来的要大。<br>而且应用运行的时候，比原生应用多运行一个虚拟机，效率自然就低了不少。</p></blockquote><p>两者通信：<br>当Java代码运行的时候需要调用C#写好的代码的时候，就需要ART通过ACW来使Mono去运行。<br>对于Xamarin.Android开发人员来说，C#的部分可以调用 .NET API（主要是C#语言的部分），也可以通过一些库来直接访问Linux操作系统的设备。但是Android操作系统大多数的访问（比如电话，音频等）都是java的API来访问的（右边的Java API Framework层），所以才有MCW来调用这些功能。<br>简单来说，ACW是java代码运行的时候去调用C#代码的桥梁，而MCW是C#的代码去调用java代码的桥梁。</p><h2 id="MCW-和-ACW"><a href="#MCW-和-ACW" class="headerlink" title="MCW 和 ACW"></a>MCW 和 ACW</h2><p>MCW（Managed Callable Wrappers）：托管可调用包装器<br>ACW（Android Callable Wrappers）：安卓可调用包装器</p><p>ACW: Android callable wrappers are a JNI bridge which are used any time the Android runtime needs to invoke managed code.<br>ACW是一种JNI(java native interface)桥，这里的managed code指的是C#编译后的中间语言（IL）。ART运行的java代码通过ACW来调用C#代码在Mono中执行。</p><p>MCW：Managed Callable Wrappers are a JNI bridge which are used any time managed code needs to invoke Android code and provide support for overriding virtual methods and implementing Java interfaces。<br>MCW也是一种JNI桥，为C#调用Android系统的API或者第三方写好的Java类库提供支持。</p><p>通过这两种方式，就可以让C#代码与Android平台的代码进行通信而且正常地运行了。</p><h2 id="应用程序包"><a href="#应用程序包" class="headerlink" title="应用程序包"></a>应用程序包</h2><p>Xamarin.Android开发出来的应用，结构上与普通的应用程序包差不多，比如res里的布局等，还多了以下的内容：</p><ul><li>应用程序集（包含C#编译后的IL）</li><li>Native libraries（对于不同架构机型的Mono运行时）</li></ul><p>比如打包的<code>HelloWorld.apk</code>，解压后的目录：<br><img src="1.png" alt=""><br>assemblies文件夹里就是应用程序集，包含了各种编译后的<code>.dll</code>文件<br>lib文件夹里面就是native libraries。里面有个文件夹<code>arm64-v8a</code>和<code>armeabi-v7a</code>,里面都是分别对应处理器架构的Mono虚拟机（<code>.so</code>文件）。</p><p>其他的就跟普通的应用程序包差不多了，比如根目录的清单文件，res资源文件夹等。</p><hr/><p>总之一句话：<br><strong>The APK is still a valid Java APK. It Starts in ART,and uses ART for UI(Android.*classes). Mono is used to run .NET IL. The IL and Android native code run side-by-side and communicate via callable wrappers.</strong> (github的一条issue里面的，总结的很到位，~我翻译不了只能放英文了~)。</p><hr/><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.microsoft.com/zh-cn/xamarin/android/internals/architecture" target="_blank">官网文档</a></li><li><a href="https://www.meiwen.com.cn/subject/fuwhjftx.html" target="_blank">Xamarin.Android 运行原理</a></li><li><a href="https://www.jianshu.com/p/5847a2cb68c0">JNI原理 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要内容：&lt;br&gt;Xamarin.Android应用的体系结构&lt;br&gt;Xamarin.Android应用怎么运行在Android系统中的。&lt;br&gt;MCW和ACW&lt;br&gt;Xamarin.Android应用包的结构&lt;/p&gt;
&lt;p&gt;前置知识：&lt;a href=&quot;https://yanghaku.github.io/2020/01/31/Android%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/&quot; target=&quot;_blank&quot;&gt;Android操作系统的基础知识&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Android原生的开发中，主要运行的是Java或Kotlin编译后的字节码（&lt;code&gt;.dex&lt;/code&gt;）每个应用单独分配一个ART虚拟机，运行在linux内核之上。&lt;/p&gt;
&lt;p&gt;对于其他语言做的应用在Android平台运行，像c/c++这种静态编译的语言，可以直接编译成二进制码，通过JNI（java本地接口）与java通信（调用操作系统的API），直接运行在Library层即可（因为这一层是c/c++实现的，所以这一层也提供了原生c/c++的API供调用）。&lt;/p&gt;
&lt;p&gt;而Xamarin是用C#开发的语言，C#和java一样，也是即时编译（JIT）语言，编译成中间语言（IL）之后需要在 .NET虚拟机上运行（在移动端是Mono虚拟机）。Android操作系统本身就没有C#的运行环境，而C#不能直接编译成二进制机器码，所以要融入Android，还需要在每个应用里带着 .NET运行时（Mono虚拟机）。这样C#才能在Android系统里运行。&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="https://yanghaku.github.io/tags/Android/"/>
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
      <category term="Xamarin" scheme="https://yanghaku.github.io/tags/Xamarin/"/>
    
  </entry>
  
  <entry>
    <title>Android入门知识</title>
    <link href="https://yanghaku.github.io/2020/01/31/Android%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/"/>
    <id>https://yanghaku.github.io/2020/01/31/Android%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</id>
    <published>2020-01-31T03:19:00.000Z</published>
    <updated>2020-02-01T07:33:43.067Z</updated>
    
    <content type="html"><![CDATA[<p>想学习Android的第一步，就应该先了解这个平台系统的大体架构，应用的基础知识等，可是我看到很多入门教程第一步就是直接讲环境搭建下jdk什么的，这种太片面了，往后的NDK，安全沙盒什么的看了也很迷茫。所以我自己查找了许多资料并总结了一下。<br>主要有：<br>Android平台架构<br>Android Application 基础知识<br>    安全沙盒与最小权限原则<br>    Android四大组件（重点）<br>    组件启动与组件之间联系<br>    应用的清单文件<br>    应用资源<br>Android SDK 目录结构及作用<br>开发环境搭建</p><hr/><a id="more"></a><h2 id="Android平台架构"><a href="#Android平台架构" class="headerlink" title="Android平台架构"></a>Android平台架构</h2><p>Android 是一个<strong>基于linux内核的开源软件栈</strong>，通过软件叠层的方式构建出来的一个操作系统。</p><p>平台的架构图（来自官网）：<br><img src="android-stack_2x.png" alt="android-stack_2x.png"></p><p>从下到上分为五层： Linux内核层，HAL硬件抽象层，Library层，Framework层，Application应用层。</p><h3 id="Linux内核层"><a href="#Linux内核层" class="headerlink" title="Linux内核层"></a>Linux内核层</h3><p>Android平台的基础是Linux内核，主要用linux内核执行一些底层的功能，比如线程和底层的内存管理，还有各种设备的驱动，直接和硬件打交道。linux内核的安全性也能保证这Android的安全。</p><h3 id="HAL硬件抽象层"><a href="#HAL硬件抽象层" class="headerlink" title="HAL硬件抽象层"></a>HAL硬件抽象层</h3><p>HAL提供了一个标准的界面，向更高级别的javaAPI框架显示设备的硬件功能。每一个硬件组件都是对应着一个库模块，比如相机模块，蓝牙模块，音频模块等。当javaAPI框架需要访问硬件的时候，Android会为这些硬件加载对应的库模块。其实就是对底层硬件驱动的一种封装，让javaAPI框架层只看到一个标准的接口，而有了硬件的无关性。</p><h3 id="Libarary层"><a href="#Libarary层" class="headerlink" title="Libarary层"></a>Libarary层</h3><p>系统的运行库层，这层主要提供了一些必不可少的运行库。</p><h4 id="Android-Runtime"><a href="#Android-Runtime" class="headerlink" title="Android Runtime"></a>Android Runtime</h4><p>Android Runtime 包括两部分，一部分是核心运行时库，为javaAPI框架提供java语言中的大部分功能；另一部分是Android运行时。</p><p>在Android 5.0 之前，Android运行时都是Dalvik虚拟机。Dalvik虚拟机相当于一个适配于移动设备更优化的一个java虚拟机（JVM）,也是用JIT编译器来解释运行字节码。<br>Dalvik运行的是<code>.dex</code>格式的字节码，是构建的时候将<code>.java</code>源码编译成 <code>.class</code>字节码，然后再压缩优化成<code>.dex</code>的字节码。</p><blockquote><p>这个Dalvik可以与java虚拟机对比理解<br>首先就是Dalvik本身就是一个魔改的java虚拟机，是一种基于寄存器的架构，虽然牺牲了一些平台无关性，但是在代码运行效率方面都比jvm更胜一筹。<br>JVM与Dalvik区别：</p><ul><li>运行的字节码不同，指令集架构不同，JVM基于栈，Dalvik基于寄存器</li><li>JVM只运行一个实例，所有的应用都运行在同一个虚拟机中，而Dalvik是每一个应用启动都有一个单独的Dalvik虚拟机对应，每一个Dalvik都对应linux里的一个进程。这样就算其中一个应用crash掉了，也不会影响其他的应用。</li></ul></blockquote><p>到了Android 5.0版本之后，这一部分就变成了Android Runtime（ART），ART与Dalvik相比，增加了更多的功能：</p><ul><li>不仅有JIT，而且还增加了AOT（预先编译）</li><li>优化垃圾回收</li><li>更好的调试支持</li></ul><p>预先编译是在安装的时候将 .dex 文件编译成机器码（所以安装的时间会变慢很多），运行的时候跳过了解释的阶段，运行效率之类的都显著提高，但是占用的存储空间就大了，也就相当于用空间来换时间。这样使CPU的利用率也降低不少，能够提升电池的续航时间。</p><p>总之，Android Runtime安卓运行时就是用来运行apk里的.dex代码的。<br>一个APP对应一个ART实例，并且对应于一个进程。</p><h4 id="Native-C-C-Libarary"><a href="#Native-C-C-Libarary" class="headerlink" title="Native C/C++ Libarary"></a>Native C/C++ Libarary</h4><p>原生C/C++库，通过一些c/c++库为安卓系统提供了一些主要的特性支持。比如OpenGL库提供3D绘图，SQLite库提供数据库支持，WebKit库提供浏览器内核支持…. 这些主要是一些关键的东西（效率至上），所以是用C/C++的库来提供支持。</p><p>应用不仅可以调用javaAPI层来访问这里面的模块，而且可以直接调用这些原生库的功能（一般都是在c/c++原生开发的时候）。</p><blockquote><p>NDK: native develop kit 原生开发工具包<br>当c/c++ 原生开发的时候用到的工具包，其实对大部分的应用都没有很大的价值，因为这不可避免地增加了开发的复杂度。一般在以下场景才会用到：</p><ul><li>为了非常好的性能。例如游戏，物理模拟这些计算密集型的应用</li><li>重复使用自己或者其他开发者已经开发好的c/c++库</li><li>在平台之间移植应用</li></ul></blockquote><h3 id="JAVA-API-Framework"><a href="#JAVA-API-Framework" class="headerlink" title="JAVA API Framework"></a>JAVA API Framework</h3><p>java API框架，这层主要是用java写的API，包含了Android OS的整个功能集（也就是说开发的时候可以调用这里面的API就可以实现所有功能）。里面包括着各种系统的服务和四大组件（后面会介绍到）。</p><h3 id="System-Application-和-Application"><a href="#System-Application-和-Application" class="headerlink" title="System Application 和 Application"></a>System Application 和 Application</h3><p>系统应用可以说是系统内置的应用，这些对于开发者而言，可以像调用java API Framework一样来调用这些System Application。<br>Application就是我们自己写的第三方的应用这种了，是在最上层。</p><p>总之，Android APP的开发语言最好还是官方的JAVA/Kotlin，如果有特殊的需要才会用到native c/c++.<br>对于应用开发人员主要研究的就是架构里面的Java API Framework层和System Application层。如果有需要还会用到native c/c++ Library。就像Android运行时和运行库和下层的驱动等，不是研究的重点，在把握全局的同时，也要搞清楚重点。</p><h2 id="Android-Application-基础知识"><a href="#Android-Application-基础知识" class="headerlink" title="Android Application 基础知识"></a><strong>Android Application 基础知识</strong></h2><p>一个APK文件，包含一个Android应用的所有内容。使用Kotlin，Java，c++编写Android应用，Android SDK会将代码连同数据和资源文件编译成一个APK（Android Package），即带有<code>.apk</code>后缀的归档文件。</p><h3 id="安全沙盒与最小权限原则"><a href="#安全沙盒与最小权限原则" class="headerlink" title="安全沙盒与最小权限原则"></a>安全沙盒与最小权限原则</h3><h4 id="安全沙盒-security-sandbox"><a href="#安全沙盒-security-sandbox" class="headerlink" title="安全沙盒 security sandbox"></a>安全沙盒 security sandbox</h4><blockquote><p>沙箱(盒)是为执行中的程序提供隔离环境的一种安全机制。它通过严格控制执行的程序锁访问的资源，以确保系统的安全。<br>每一个Android应用都处于各自的安全沙盒里面，它们直接不能互相访问文件等。</p><ul><li>Android操作系统首先是多用户的Linux系统，对于每一个应用都是一个不同的用户。</li><li>默认情况下，系统会为每一个应用分配一个唯一的用户ID，系统为应用中的所有文件设置权限，使得有权限的用户才能访问对应的文件。</li><li>每个进程都拥有一个独立的虚拟机，默认情况下，每个应用都在其自己对应的Linux进程上执行（应用-虚拟机-Linux进程 这三个是一对一的关系）</li></ul></blockquote><h4 id="最小权限原则"><a href="#最小权限原则" class="headerlink" title="最小权限原则"></a>最小权限原则</h4><p>对于每一个应用，也就是对应的一个唯一的Linux用户，默认情况下只能访问其工作所需要的组件。在此环境中，应用无法访问其未获得权限的系统部分。<br>应用要想访问其他应用的共享数据或者系统服务，有两个途径：</p><ul><li>让两个应用共享一个Linux用户（也就是说两个应用的linux userid相同），这样二者可以互相访问。在节省资源的时候，也可以安排拥有相同用户ID的应用在同一个Linux进程内运行，共享同一个虚拟机。</li><li>应用可以请求访问设备数据的权限，由用户明确授予这些权限。比如说应用请求获得访问文件，访问相机，访问联系人等等的权限，由用户明确授予即可。</li></ul><h3 id="Android四大组件（重点）"><a href="#Android四大组件（重点）" class="headerlink" title="Android四大组件（重点）"></a><strong>Android四大组件（重点）</strong></h3><p>应用的四大组件：</p><ul><li>Activity： 拥有用户界面的单一屏幕</li><li>Service：在后台运行的组件，没有界面</li><li>BroadcastReceiver： （广播接收器）相应系统的广播通知的组件</li><li>Content providers：（内容提供程序），管理共享数据，为其他应用提供查询修改接口</li></ul><h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h4><p>Activity是与用户交互的入口点，拥有单个的屏幕。</p><blockquote><p>官网上的举例：<br>例如电子邮件的应用可能会有三个Activity：</p><ul><li>显示新电子邮件列表的Activity</li><li>用于撰写电子邮件的Activity</li><li>用于阅读电子邮件的Activity<br>这三个紧密协作联系，但是每个Activity都是独立于其他的Activity而存在，其他应用可以启动其中任何一个Activity。</li></ul></blockquote><p>这很像一个web中的一个网页，每一个网页都是独立的，它们一起构成一个网站，其他别的链接也可以打开这个网站里的任何一个网页（当然在Android里面就还会涉及到权限能不能打开的问题）。然后同一时间只能有一个网页显示在屏幕上（独占一个屏幕）。</p><h5 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h5><p>首先是一个标准的图：<br><img src="2.png" alt=""></p><p>Activity 包括7个生命周期的流程，分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onCreate(),onStart(),onResume(),onPause(),onStop(),onDestory(),onRestart().</span><br></pre></td></tr></table></figure><p>其中 <code>onCreate()</code>是生命周期的开始，<code>onDestory()</code>是生命周期的结束</p><ul><li>Activity启动： <code>onCreate()</code> -&gt; <code>onStart()</code>（此时不可见） -&gt; <code>onResume</code> -&gt; 处于运行态，可见</li><li>Activity被暂时覆盖：<code>onPause()</code> , 当用户取消覆盖的时候 <code>onResume()</code> 恢复</li><li>Activity跳转到了新的Activity、Activity进入了后台或者锁屏的时候：running的Activity -&gt; <code>onPause()</code> -&gt; <code>onStop()</code> -&gt; 停滞状态的Activity</li><li>Activity重新回到前台或者解锁的时候： 停滞状态的Activity -&gt; <code>onRestart()</code> -&gt; <code>onStart()</code> -&gt; <code>onResume()</code> -&gt; Activity重新running</li><li>Activity在后台且内存不足的时候：系统会杀死这个后台状态的Activity（此时这个Activity的引用虽然在任务栈中，但是这个时候引用指向的对象已经是null）。若想再回到running，就需要重新初始化生命周期: <code>onCreate()</code> -&gt; <code>onStart()</code> -&gt; <code>onResume()</code></li><li>Activity退出: <code>onPause()</code> -&gt; <code>onStop()</code> -&gt; <code>onDestory()</code></li></ul><p>(上面的方法都是对应事件的回调函数，选择重写的方法而不能主动调用。如果想主动退出Activity，应该调用<code>finish()</code>)。</p><h5 id="Activity的四种启动模式"><a href="#Activity的四种启动模式" class="headerlink" title="Activity的四种启动模式"></a>Activity的四种启动模式</h5><p>因为我们的APP一般都是由多个Activity构成的，而在Android给我们提供了任务（Task）的概念，就是将多个相关的Activity收集起来，进行Activity的跳转与返回。实现Android就是通过任务栈来管理这些Activity的。<br><strong>任务栈</strong>：任务栈是一种后进先出的结构。切换到新的Activity，就会被压入栈中成为栈顶。位于栈顶的Activity处于running状态。当back按钮按下的时候，栈顶的Activity会出栈并且调用<code>onDestory()</code>结束生命周期，紧随其后Activity的成为栈顶。当栈内没有Activity那么系统就会回收这个栈，每个APP默认只有一个栈，以这个APP的包名来命名。</p><p>四种启动模式：</p><ul><li>standard标准模式: 默认的模式，新的Activity会默认压入栈中。</li><li>singleTop栈顶复用模式：如果新的Activity在任务栈的栈顶（也就是跟栈顶的相同）那么就不会重新创建。如果不在任务栈的栈顶，就跟standard模式相同。</li><li>singleTask栈内复用模式：如果新的Activity在任务栈的栈内，那么新的Activity就不会创建，而是将原本栈内的Activity调到栈顶（这个Activity之上的所以Activity都会被清理销毁）。</li><li>singleInstance单例模式：这个要求更严格，这种模式的Activity只能单独的位于一个任务栈里面，是一个加强版的singleTask。任务栈里面只能有这一个Activity。</li></ul><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>服务是Android中实现程序后台运行的解决方案，非常适合去执行那些不需要和用户交互而且还要求长时间运行的任务（没有界面）。比如下载，播放音乐等等。</p><h5 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h5><p>先看图：<br><img src="3.png" alt="service.png"><br>首先service的声明中，<code>onCreate()</code>只会回调一次来创建,<code>onDestory()</code>只会在关闭的方法回调一次。<br>启动service的方法有三种：</p><ul><li><code>StartService()</code>启动service</li><li><code>BindService()</code> 启动service</li><li>start之后再bind</li></ul><p>这几者的区别：<br><strong>StartService</strong>只是启动这个service，启动它的组件（比如Activity）和这个Service没有关联。service的关闭只能是自己执行完某些任务了之后执行<code>stopSelf</code>或者其他组件调用它的<code>stopService</code>才能终止。<br><strong>BindService</strong>方法启动的Service，其他组件可以通过回调获取Service的代理对象和Service交互，而且两方进行绑定，当启动的组件销毁的时候，Service会自动进行<code>unBind</code>操作解绑。当发现所有的绑定都进行了<code>unBind</code>的时候，Service会销毁。<br>先start然后另一个组件进行bind这个已经启动的Service的时候，系统仅仅是进行了绑定而不会把生命周期与另一个组件绑定。也就是解绑了之后Service还是属于start启动的service。</p><h4 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h4><p>广播能够广泛的运用在应用程序之间传递事件信息的机制。借助广播接收器，系统能够在常规的用户流之外向应用传递事件，从而允许应用响应系统范围内的广播通知。广播接收器可以对许多外部事件进行响应，比如当电话呼入，手机屏幕关闭等事件，系统会发出广播，对应的注册的广播接收器会收到这些事件消息对应地处理。广播接收器虽然没有界面，但是可以创造状态栏的通知。比如wifi连接-&gt; 系统广播事件-&gt;对应的广播接收器收到后创建通知：网络连接恢复。</p><p>广播接收器有两种注册方法：静态注册和动态注册</p><ul><li>静态注册： 在<code>AndroidManifest.xml</code>（应用清单文件，下文会仔细解释）里声明，当APP首次启动的时候就注册到系统中。</li><li>动态注册： 在某个组件（一般是Activity）运行的时候注册广播接收器。<br>区别：静态注册是一直在监听对应的消息，耗电耗内存，当APP退出之后也能收到对应的消息进行处理。 动态注册是在代码中动态的注册，当组件退出之后也没法接受广播了（注意要在组件结束前移除广播接收器，否则会导致内存泄漏）。</li></ul><h4 id="Content-providers"><a href="#Content-providers" class="headerlink" title="Content providers"></a>Content providers</h4><p>内容提供者提供内容的共享。可以将文件，数据库，网络上的可持久化的数据提供给其他应用修改查询。<br>一般有两个场景：</p><ul><li>自己的应用需要访问别的应用的数据，比如访问手机联系人，短信等，想对这些数据进行读取或修改，就要用到这些应用的ContentProvider。</li><li>自己的应用需要给别的应用共享信息，也要用到ContentProvider，而且可以选择性的共享信息，避免了关键隐私信息泄露等。</li></ul><h3 id="组件启动与组件之间联系"><a href="#组件启动与组件之间联系" class="headerlink" title="组件启动与组件之间联系"></a><strong>组件启动与组件之间联系</strong></h3><p><strong>Android系统的独特之处在于，任何应用都可以启动其他应用的组件</strong>。 比如一个应用想让用户使用设备相机拍摄照片，那可以使用系统的照片应用中对应的Activity即可，当拍摄之后会返回到原先的应用，对用户来说这相机就如同应用的一部分。<br>当系统启动一个应用的组件时候，就会启动这个应用对应的进程（如果没有启动的话）。这个应用和相机还是属于两个进程。所以说Android应用没有单个的入口点（<code>main()</code>函数），每一个组件都可以是应用的入口。</p><p>因为安全沙箱的存在，不能直接启动另一个应用的组件，而是需要系统作为中间人。这些组件之间启动或者访问，就需要传递消息，这个消息就是 Intent（意图）。<br><img src="intent.webp" alt=""></p><p>Intent 是启动组件，是组件直接联系的桥梁。<br>四种组件之中，Activity，Service，BroadCastReceiver 这三个组件都是通过Intent启动。（ContentProvider会在ContentResolver请求目标的时候启动，与其他不一样）。<br>对于启动Activity和Service，Intent会定义要执行的操作，并且可以指定待操作的数据等信息。对于BroadcastReceiver，Intent只会定义待广播的通知。</p><p>Intent对象大致包括7个属性：Action（动作），Data（数据），Category（类别），Type（数据类型），Component（组件），Extra（扩展信息），Flag（标志位）。</p><p>Intent分为显式Intent和隐式Intent。</p><ul><li>显式Intent： 直接通过组件名来启动某个组件，每次启动的组件只有一个。</li><li>隐式Intent： 不指定组件名，而是指定Intent的Action，Data等（只描述意图），当我们启动的时候，会匹配出相关的满足要求的组件，如果不止一个，就会让用户选择使用哪个来处理Intent。<br>一个最熟悉的场景就是隐式Intent：<br><img src="intent1.jpg" alt="sample"></li></ul><h3 id="应用的清单文件"><a href="#应用的清单文件" class="headerlink" title="应用的清单文件"></a>应用的清单文件</h3><p>在Android系统启动应用之前，系统必须通过读取应用的清单文件（<code>AndroidMainifest.xml</code>）确认组件的存在，应用中所有用到的组件(除了动态注册的广播接收器) 都需要在这个文件中声明。<br>这个文件必须位于应用目录的根目录中。<br>除了声明应用的组件之外，清单文件还有许多其他的作用，比如：</p><ul><li>确定应用需要的任何用户权限，比如访问联系人，访问文件等</li><li>根据应用使用的API，声明所需的最低API级别</li><li>声明需要的硬件软件功能，比如相机等</li></ul><p>主要的三个功能：</p><ul><li><p>声明组件<br>代码里的Activity就是声明的一个组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/app_icon.png"</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.example.project.ExampleActivity"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:label</span>=<span class="string">"@string/example_label"</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>声明组件的功能<br>这个就是声明了一个执行动作为SEND发送的一个组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.example.project.ComposeEmailActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:type</span>=<span class="string">"*/*"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>声明应用要求<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera.any"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"7"</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"19"</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="应用资源"><a href="#应用资源" class="headerlink" title="应用资源"></a>应用资源</h3><p>Android应用不仅仅是代码，还需要与源代码分离的静态资源，比如图像，音频文件还有xml文件定义的界面动画等。所有的资源都在 /res 的文件夹内。</p><h2 id="Android-SDK-目录结构及作用"><a href="#Android-SDK-目录结构及作用" class="headerlink" title="Android SDK 目录结构及作用"></a>Android SDK 目录结构及作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android-sdk&#x2F;</span><br><span class="line">add-ones&#x2F;  -&gt; 一些附加的库，第三方公司的附加功能，比如GoogleMaps等</span><br><span class="line">build-tools&#x2F;  -&gt; 构建项目的时候用到的工具，还包括一些编译工具等</span><br><span class="line">28.0.3&#x2F;</span><br><span class="line">29.0.3&#x2F;</span><br><span class="line">docs&#x2F;-&gt; 离线的开发者文档（可选）</span><br><span class="line">platforms&#x2F; -&gt; sdk里面最重要的文件，每个文件夹都含有各个版本的sdk</span><br><span class="line">android-28&#x2F;-&gt; API级别28的sdk版本</span><br><span class="line">android-29&#x2F;</span><br><span class="line">platforms-tool&#x2F;-&gt; 各版本sdk通用的工具，比如abd.exe,sqlite3.exe等</span><br><span class="line">skins&#x2F;-&gt; 安卓模拟器的皮肤</span><br><span class="line">system-images&#x2F;-&gt; 创建安卓模拟器的时候使用的系统镜像</span><br><span class="line">android-28&#x2F;</span><br><span class="line">tools&#x2F;-&gt; 通用的Android开发、调试的工具</span><br></pre></td></tr></table></figure><p>还有两个很重要的工具： SDK管理器 和 安卓模拟器管理器。（可以直接用IDE上带的工具来代替）</p><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><p>操作系统：win10<br>IDE：Android Studio （用起来跟idea一个感觉，非常棒！~比VS强太多了~）（直接官网下载安装即可）</p><p>安装之后主要是设置SDK和模拟器。（我之前用VS下过一个sdk，Android Studio直接识别出来本地的了！）</p><p>设置好之后就新建工程，然后新建一个空白的工程，一路next，IDE会自动生成一个空白项目。<br>项目结构如下：<br><img src="6.png" alt=""></p><p>根目录里的清单文件 <code>AndroidMainifest.xml</code><br>java/  下的java代码（只有一个组件MainActivity）<br>res/  里是应用的各种资源，包括布局，图片等等。<br>res/layout 里的activity_main.xml 就是MainActivity这个Activity对应的布局文件。</p><p>配置好模拟器设备之后，直接点击run运行即可完成<br><img src="7.png" alt=""></p><p>Hello World!</p><hr/><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://developer.android.google.cn/" target="_blank"><strong>Android开发者平台</strong>（官网有最新文档）</a></li><li><a href="https://www.runoob.com/w3cnote/android-tutorial-intro.html" target="_blank">Android基础入门教程-菜鸟教程</a></li><li><a href="https://www.jianshu.com/p/92227738f270" target="_blank">简单理解Android Dalvik</a></li><li><a href="https://blog.csdn.net/u011733020/article/details/99411986" target="_blank">Android Runtime (ART) 和 Dalvik</a></li><li><a href=" https://www.jianshu.com/p/44f87c810903 " target="_blank">NDK开发从放弃到入门</a></li><li><a href="https://www.jianshu.com/p/c07a97f01461" target="_blank">安卓基础知识-简书</a></li><li><a href="https://www.jianshu.com/p/0f52a3defc1d" target="_blank">安卓四大组件-简书</a></li><li><a href="https://www.jianshu.com/p/ca3d87a4cdf3">Android四大组件：BroadcastReceiver史上最全面解析-简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想学习Android的第一步，就应该先了解这个平台系统的大体架构，应用的基础知识等，可是我看到很多入门教程第一步就是直接讲环境搭建下jdk什么的，这种太片面了，往后的NDK，安全沙盒什么的看了也很迷茫。所以我自己查找了许多资料并总结了一下。&lt;br&gt;主要有：&lt;br&gt;Android平台架构&lt;br&gt;Android Application 基础知识&lt;br&gt;    安全沙盒与最小权限原则&lt;br&gt;    Android四大组件（重点）&lt;br&gt;    组件启动与组件之间联系&lt;br&gt;    应用的清单文件&lt;br&gt;    应用资源&lt;br&gt;Android SDK 目录结构及作用&lt;br&gt;开发环境搭建&lt;/p&gt;
&lt;hr/&gt;
    
    </summary>
    
    
      <category term="Android学习" scheme="https://yanghaku.github.io/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="https://yanghaku.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Xamarin学习1 -- 概念篇</title>
    <link href="https://yanghaku.github.io/2020/01/30/Xamarin%E5%AD%A6%E4%B9%A01%E6%A6%82%E5%BF%B5%E7%AF%87/"/>
    <id>https://yanghaku.github.io/2020/01/30/Xamarin%E5%AD%A6%E4%B9%A01%E6%A6%82%E5%BF%B5%E7%AF%87/</id>
    <published>2020-01-30T08:46:00.000Z</published>
    <updated>2020-02-01T08:32:05.914Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍了 Xamarin 中 Xamarin.forms , Xamarin.Android, Xamarin.iOS 的区别和联系，并且搭建环境和创建第一个 Xamarin.forms 应用并运行调试。</p><a id="more"></a><h3 id="Xamarin"><a href="#Xamarin" class="headerlink" title="Xamarin"></a>Xamarin</h3><p>Xamarin是Mono开源项目的一个分支，把Mono里移动开发这一块专门拿出来做成了一个商业项目。（原先是收费的商业项目，到了2016年微软把Xamarin公司收购了，才变成开源的了。）<br>现在Xamarin是一个开源平台，用于通过 .NET 构建适用于 IOS，Android 和 Windows 的新式应用程序。是一个抽象层，可用于管理共享代码与基础平台代码的通信。使开发人员能够跨平台共享应用程序，允许开发人员以一种语言编写所有的业务逻辑，但是在每个平台上各自实现外观等。</p><p>说白了就是共享底层逻辑的 C# 的代码，并且创建各自的UI, 使得一个工程开发能够多个平台使用。</p><p><img src="1.png" alt="1.png"></p><p>然后就是 Xamarin 的结构：</p><p><img src="xamarin-architecture.png" alt="xamarin-architecture.png"></p><h3 id="Xamarin-Android"><a href="#Xamarin-Android" class="headerlink" title="Xamarin.Android"></a>Xamarin.Android</h3><p>Xamarin.Android 是将 C# 编译为中间语言，然后在程序运行的时候，通过即时编译（<strong>JIT</strong>）编译成本机程序集（类似于java虚拟机的那种）。</p><h3 id="Xamarin-iOS"><a href="#Xamarin-iOS" class="headerlink" title="Xamarin.iOS"></a>Xamarin.iOS</h3><p>Xamarin.iOS 是将应用程序完全编译成本机的ARM程序集代码（完全的静态编译）。</p><p>Xamarin.Android 和 Xamarin.iOS 其实就是两个单独的工程，前者是专门对于Android开发的，后者是专门对于iOS开发的工程。但是Xamarin不是跨平台的吗？ 这个时候就用到了 <strong>Xamarin.Forms</strong> 了！</p><h3 id="Xamarin-Forms"><a href="#Xamarin-Forms" class="headerlink" title="Xamarin.Forms"></a>Xamarin.Forms</h3><p>Xamarin.Forms 是一个开源的 UI 框架，允许开发者写一种UI布局与设计，然后根据不同的平台渲染成不同的UI控件(实现了跨平台的UI开发)</p><p><img src="xamarin-forms-architecture.png" alt="xamarin-forms-architecture.png"></p><p>上图中的 Xamarin.Forms Platform Renderer 就是做这种事情的。</p><p>就像官网文档说的：</p><blockquote><h4 id="Who-Xamarin-Forms-is-for"><a href="#Who-Xamarin-Forms-is-for" class="headerlink" title="Who Xamarin.Forms is for"></a>Who Xamarin.Forms is for</h4><p>Xamarin.Forms is for developers with the following goals:</p><ul><li>Share UI layout and design across platforms.</li><li>Share code, test and business logic across platforms.</li><li>Write cross-platform apps in C# with Visual Studio.</li></ul></blockquote><p>UI的开发可以是原生开发，也可以是用Xamarin.Forms开发，原生开发就是使用Android和iOS原生的UI控件。基于Xamarin.Forms的UI开发可以使代码共享程度进一步提高：<br><img src="diff.png" alt=""><br>从上图可以看到，左边的原生UI开发，代码共享程度是75%左右，也就是说只是共享了后台的逻辑代码了，前端的UI还是要各自做各自的。右边的Xamarin.Forms开发的项目，代码共享程度到了95%，这就几乎没有多少平台相关的代码了。</p><h3 id="以上的关系总结"><a href="#以上的关系总结" class="headerlink" title="以上的关系总结"></a>以上的关系总结</h3><p> Xamarin.Android 和 Xamarin.iOS  (其实还有Xamarin.Mac , Xamarin.UWP，Xamarin.tvOS 等) 这些都是Xamarin里的具体的工程， 专门对应于具体的平台里的，可以单独开发。</p><p>而Xamarin.Forms 是用于跨平台的，可以实现同时开发Android和iOS和UWP 等，将一个共享的UI框架分别渲染到具体的平台工程里去，实现大部分的UI和逻辑代码共享。</p><p>比如在VS2019 里面创建一个Xamarin项目的时候，可以看到非常多的选项：</p><p><img src="2.png" alt="2.png"></p><p>第一个Xamarin.Forms 就是一个跨平台的方案，当在Xamarin forms创建的时候勾选这Android和iOS的时候(因为没有装UWP的开发环境，所以只选了这两个)，项目的结构就会如下：</p><p><img src="3.png" alt=""></p><p>也就是说， Xamarin.Forms 包含了其他的工程，而像 Xamarin.Android 这种既可以是独立开发的工程，也可以当做Xamarin.Forms 里的一部分通过Xamarin.Forms 一起开发。</p><p>所以说清楚了这些之后，官网上的那些文档也就不觉得混乱了， 想学哪一块就可以针对性地学习了。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>操作系统 ： win10</p><p>IDE： visual Studio 2019 （刚下载的）</p><p>如果只需要Android和iOS开发的话，只要在vs installer 上选择移动开发的负载下载即可</p><p><img src="4.png" alt=""></p><p>安卓需要java SDK 8， Android SDK 和安卓模拟器 这三个东西vs都给自动装好了.</p><p>其中jdk8自动被安装才了“C:\Program Files\Android\jdk\microsoft_dist_openjdk_1.8.0.25”.</p><p>Android SDK 装在了 “C:\Program Files (x86)\Android\android-sdk” （当然，可以自己设置）</p><p>然后安卓的模拟器就是自动保存在了自己用户文件夹下的 “.Android” 里面（这个需要自己安装设备，具体在下文）</p><blockquote><p>安卓模拟器有硬件加速，运行之前需要在 “控制面板”-&gt; “程序与功能” -&gt;  左栏 “启用或关闭windows功能” -&gt;  “windows虚拟机程序监控平台” 勾选上， 否则每次运行之前都会有一个警告。</p></blockquote><h3 id="第一个-Xamarin-Forms-工程"><a href="#第一个-Xamarin-Forms-工程" class="headerlink" title="第一个 Xamarin.Forms 工程"></a>第一个 Xamarin.Forms 工程</h3><p>打开vs， 新建项目，在框里搜索 Xamarin， 点击选中 Xamarin.forms, 然后设置项目名称，目录等， 然后点创建。 之后选择空白的模版， 平台勾选Android和iOS （有环境的也可以勾选UWP试试），然后就创建完成。</p><p>项目结构：<img src="3.png" alt="1" style="zoom:80%;" /></p><p>其中XamarinApp1.Android 就是对应的生成安卓的工程， XamarinApp1.iOS 就是对应的iOS的工程。</p><p>在MainPage.xaml 中编辑，把 “Welcome …” 换成 “hello World” （程序猿开发第一步嘛），然后就是运行了。</p><h3 id="Xamarin-Android-的运行调试"><a href="#Xamarin-Android-的运行调试" class="headerlink" title="Xamarin.Android 的运行调试"></a>Xamarin.Android 的运行调试</h3><p>运行安卓之前需要安装安卓的模拟器，VS的安卓工具里有两个挺重要的工具：Android SDK管理器和 Android 设备管理器。</p><p>点击工具 -&gt; Android -&gt; Android SDK 管理器</p><p>我这上面是下载的默认的 安卓SDK9; 设置的图片：</p><p><img src="sdk1.png" alt="sdk1"></p><p><img src="sdk2.png" alt="sdk2"></p><p>Android SDK 有了之后，就安装对应的设备就行了。点击 工具 -&gt; Android -&gt; Android Device Manager </p><p>点击新建（新建一个安卓虚拟设备） 操作系统要选择已经装好的sdk对应的版本， <strong>处理器选择 x86（官网说x86比x86_64实际会快，而且可以硬件加速）</strong> ，其他可以不用多设置（以后可以再改嘛，先能运行再说）， 点击创建即可。</p><p><img src="5.png" alt=""></p><p>创建完成后，在上面的工具栏里，选择需要运行的Android和对应的设备，点击运行，即可完成</p><p><img src="6.png" alt=""></p><p>运行截图：</p><p> <img src="run.png" alt="run.png"></p><p>到此第一步完成，Android上部署成功！</p><h3 id="Xamarin-iOS-运行调试"><a href="#Xamarin-iOS-运行调试" class="headerlink" title="Xamarin.iOS 运行调试"></a>Xamarin.iOS 运行调试</h3><p>Xamarin.iOS 调试需要iOS真机， 如果是模拟器也需要MAC系统才行（贫穷限制了开发人员的学习）。</p><p>找了一圈，发现了一个方案： windows装 MAC虚拟机，然后再MAC上装模拟器和VS，<a href=" https://www.cnblogs.com/banluduxing/p/7430059.html " target="_blank">详情</a></p><p>可以实现但是太麻烦，就不瞎折腾了。</p><p>这个跨平台是挺棒，但是不代表着学习了Xamarin就会了Android和iOS的开发， 每个平台的特性都需要了解的。iOS 系统的很多特性都不了解是写不出来高质量的程序的，甚至还得要求开发者掌握一些 Object-C 的语法 。所以说没有接触使用过iOS的我果断放弃啦..</p><p>所以对于我个人来说，往后的学习可能只是限制在Xamarin.Android， 而不是上面的跨平台特性（没有其他平台的需求）。 如果只学习 Android开发，用java入门更好，但是多学点新的东西不也很刺激么hh</p><blockquote><p>以上仅仅是我个人的理解，不一定是完全正确的！！</p><p> 如果有错误请评论指出，谢谢！</p></blockquote><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><a href=" https://docs.microsoft.com/zh-cn/xamarin/ " target="_blank">官网Xamarin文档</a></li><li><a href=" https://www.cnblogs.com/zpldream/p/10742030.html " target="_blank"> Xamarin.Form与Xamarin.Android或Xamarin.IOS的区别简述</a></li><li><a href="https://www.jianshu.com/p/d8c507ad244a" target="_blank">写给 iOS 程序员的 Xamarin 入门教程</a></li><li><a href="https://www.cnblogs.com/cloudland0716/p/7510201.html" target="_blank">Xamarin介绍</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍了 Xamarin 中 Xamarin.forms , Xamarin.Android, Xamarin.iOS 的区别和联系，并且搭建环境和创建第一个 Xamarin.forms 应用并运行调试。&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Android" scheme="https://yanghaku.github.io/tags/Android/"/>
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
      <category term="Xamarin" scheme="https://yanghaku.github.io/tags/Xamarin/"/>
    
      <category term="iOS" scheme="https://yanghaku.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>.NET初学概览</title>
    <link href="https://yanghaku.github.io/2020/01/29/NET%E6%A6%82%E8%A7%88/"/>
    <id>https://yanghaku.github.io/2020/01/29/NET%E6%A6%82%E8%A7%88/</id>
    <published>2020-01-29T08:46:00.000Z</published>
    <updated>2020-02-25T09:39:00.828Z</updated>
    
    <content type="html"><![CDATA[<p>主要是对 .NET Core,  .NET Standard,  .NET framework  和 Xamarin 的介绍和区分</p><p>并且介绍一下其中的ASP.NET,  UWP， XAMARIN 等</p><p>然后就是 .NET 的未来： .NET 5  （2019年5月宣布的下一代的版本），将把前面这些运行时全部合为一体</p><p>以前刚开始听说 .NET 的时候，我只知道 .NET framework , 然后昨天看了一眼官网的 .NET 入门学习的时候吗，又看到了 .NET Core,  然后各种名词接踵而来，有点懵，所以就总结了一下下。</p><a id="more"></a><p>首先就是当下的框架图：</p><p><img src="1.png" alt="1.png"></p><h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><p>广义的 .NET 是一个通用的开发平台，能够<strong>跨语言</strong>，<strong>跨平台</strong> ，能够支持跨多个平台的方案</p><p>.NET 开发可以实现包括 .NET Framework、.NET Core 和 Mono。 .NET 的所有实现都有一个名为 .NET Standard 的通用 API 规范。</p><blockquote><p> .NET 与 java 对比理解：</p><p>.NET 与 java有很多相似的地方，两者都是<strong>即时编译语言（JIT）</strong>， 项目编译生成的文件不是具体的机器码，而是中间语言。 在java里面叫做字节码（bytecode）， 而在 .NET里面叫做<strong>中间语言（Common Intermediate Language，简称 IL）</strong>，java官方运行环境是java的虚拟机JRE（Java Runtime Environment）， 而在 .NET 官方运行环境叫做公共语言运行时<strong>（Common Language Runtime， 简称CLR）</strong> </p><p>这是 .NET 跨语言，跨平台的基础</p></blockquote><p>跨语言： c#， f#， VB.NET  这些面向 .NET 的都可以</p><p>跨平台： 开发 Windows，Linux，macOS，iOS，Android，tvOS，watchOS 和 WebAssembly </p><h3 id="NET-framework"><a href="#NET-framework" class="headerlink" title=".NET framework"></a>.NET framework</h3><p>传统的 .NET framework 是以一种采用CLR 为基础，支持多种语言（c#，f#，VB.NET, c++，Python等）的开发。 这也是我们用到的最多最熟悉的 .NET ,  这个缺点就是不能跨平台，只能在windows上用。一般就是用来做桌面应用程序和ASP.NET的.</p><h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p>主要是针对windows，linux，macOS，服务器和控制台应用程序的跨平台 .NET 实现</p><p>它支持四种应用程序：控制台，ASP.NET Core, 云 和通用windows平台( UWP )</p><blockquote><p> 需要注意的是: 尽管微软把 .NET Core作为.NET未来的发展方向，但 .NET Core和 .NET Framework 仍然是两个独立的产品。.NET Framework也会继续更新和维护。</p><p>.NET Core 不再是windows 专门的，在其他平台也可以用。 就是为了跨平台而做的，不是windows的一个组件了。</p></blockquote><h3 id="NET-Standard"><a href="#NET-Standard" class="headerlink" title=".NET  Standard"></a>.NET  Standard</h3><p>.NET Standard 是一组由.NET 实现的基本的API集。 是一个进一步实现跨平台跨设备的代码共享。其实是未来 .NET的核心，一切基于它来实现代码共享。</p><blockquote><p> .NET Standard 和 .NET 之间 相当于html 规范和 浏览器之间的关系，后者是前者的实现。</p></blockquote><h3 id="Xamarin-与-Mono"><a href="#Xamarin-与-Mono" class="headerlink" title="Xamarin 与 Mono"></a>Xamarin 与 Mono</h3><p>Mono是 .NET 开源之前的一个跨平台的方案，是由Xamarin公司主持的开源项目，可以运行于Linux等其他平台 （于2016年被微软收购）。相当于实现了各个平台上的 .NET 的公共语言运行时（CLR）。</p><p>现在主要运用在移动设备，许多著名的游戏引擎比如Unity3D也包含着这个技术。</p><p>对于IOS和Android 应用程序，Xamarin 将 .NET 技术代入里面， 成为唯一一个能够提供跨iOS，Android和windowsPhone 的单一语言平台。</p><h4 id="ASP-NET-和-ASP-NET-Core"><a href="#ASP-NET-和-ASP-NET-Core" class="headerlink" title="ASP.NET 和 ASP.NET Core"></a>ASP.NET 和 ASP.NET Core</h4><p>这两个只是以上框架里的一个小组件，用于开发Web应用程序。</p><p>然后两个的区别就是ASP.NET 是 .NET framework 里的组件， 只有windows版本的API</p><p>而ASP.NET Core 是 .NET Core 的组件，是对于跨平台准备的，是 ASP.NET 的跨平台版本。</p><p>所以说以上这么多的名词，都是因为不断进化产生的，从只有一个 .NET framework 只支持windows平台，到后来的跨平台的方案，都在慢慢发展来的。</p><h3 id="三个框架与应用总结"><a href="#三个框架与应用总结" class="headerlink" title="三个框架与应用总结"></a>三个框架与应用总结</h3><p>所以再回顾一下上面的那个图片:</p><p><img src="1.png" alt="1.png"></p><p>现在主要的三个框架实现</p><p>.NET Framework （最新到4.8版本）主要是对windows平台的</p><p>.NET Core （最新到3.1版本）可以跨平台，主要是一些控制台设备，如linux，windows，macOS等</p><p>XAMARIN 主要是针对移动设备的，比如Android，iOS等</p><blockquote><p>官网文档上说的：</p><p>There are various implementations of .NET. Each implementation allows .NET code to execute in different places—Linux, macOS, Windows, iOS, Android, and many more.</p><ol><li><strong>.NET Framework</strong> is the original implementation of .NET. It supports running websites, services, desktop apps, and more on Windows.</li><li><strong>.NET Core</strong> is a cross-platform implementation for running websites, services, and console apps on Windows, Linux, and macOS.   .NET Core is open source on GitHub.</li><li><strong>Xamarin/Mono</strong> is a .NET implementation for running apps on all the major mobile operating systems, including iOS and Android.</li></ol><p>.NET Standard is a formal specification of the APIs that are common across .NET implementations. This allows the same code and libraries to run on different implementations.</p></blockquote><h3 id="NET-5-未来的展望"><a href="#NET-5-未来的展望" class="headerlink" title=".NET 5 未来的展望"></a>.NET 5 未来的展望</h3><p>现在这么多的框架什么的，到了 .NET5 将会融为一体。</p><p><strong>.NET 5 将会融合 .NET Framework ,  .NET Core,  Mono, Xamarin 等优点构建出一个统一的 .NET 平台，开发人员可以使用 C#， VB.NET,  F# 等语言，使用相同的API 开发针对任何系统，任何架构，任何形态的应用程序，并且代码和库均可通过 .NET Standard 共享 。</strong></p><p>也就是说，到了那个时候开发出一个应用程序，就可以全平台通吃，只要有一个 .NET, 就能一次开发出适用于Windows，Linux，macOS，iOS，Android，tvOS，watchOS 和 WebAssembly  等所有平台的应用程序了。</p><p><img src="3.jpeg" alt="3.jpeg"></p><p>希望早日到来，让俺们这些开发人员感受感受叭。</p><p>2019年5月微软宣布的.NET5， 将会在 2020年11月发布</p><p><img src="dotnet_schedule.png" alt=""></p><p>参考链接：</p><ul><li><a href = "https://www.cnblogs.com/wer-ltm/p/8776846.html" target="_blank">.NET:持续进化的统一开发平台</a></li><li><p><a href="https://www.cnblogs.com/frank0812/p/9845518.html" target="_blank">.NET Core和.NET Standard有什么不同</a></p></li><li><p><a href="https://www.cnblogs.com/Rwing/p/introducing-net-5.html" target="_blank">(翻译)正式宣布 .NET 5</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是对 .NET Core,  .NET Standard,  .NET framework  和 Xamarin 的介绍和区分&lt;/p&gt;
&lt;p&gt;并且介绍一下其中的ASP.NET,  UWP， XAMARIN 等&lt;/p&gt;
&lt;p&gt;然后就是 .NET 的未来： .NET 5  （2019年5月宣布的下一代的版本），将把前面这些运行时全部合为一体&lt;/p&gt;
&lt;p&gt;以前刚开始听说 .NET 的时候，我只知道 .NET framework , 然后昨天看了一眼官网的 .NET 入门学习的时候吗，又看到了 .NET Core,  然后各种名词接踵而来，有点懵，所以就总结了一下下。&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
      <category term=".NET Core" scheme="https://yanghaku.github.io/tags/NET-Core/"/>
    
      <category term=".NET Framework" scheme="https://yanghaku.github.io/tags/NET-Framework/"/>
    
      <category term="Xamarin" scheme="https://yanghaku.github.io/tags/Xamarin/"/>
    
  </entry>
  
  <entry>
    <title>失踪半年人口回归</title>
    <link href="https://yanghaku.github.io/2020/01/29/%E5%A4%B1%E8%B8%AA%E5%8D%8A%E5%B9%B4%E4%BA%BA%E5%8F%A3%E5%9B%9E%E5%BD%92/"/>
    <id>https://yanghaku.github.io/2020/01/29/%E5%A4%B1%E8%B8%AA%E5%8D%8A%E5%B9%B4%E4%BA%BA%E5%8F%A3%E5%9B%9E%E5%BD%92/</id>
    <published>2020-01-29T03:00:00.000Z</published>
    <updated>2020-01-29T13:29:00.195Z</updated>
    
    <content type="html"><![CDATA[<p>今天是大年初五，2010.1.29， 在家连续玩了四天了，要开始继续学习了呀。</p><p>自从电脑从linux 换成 windows ，就没有再重新配置hexo的环境（说白了太懒了），昨天折腾了一整天，把电脑里的文件整理、清理，升级或者卸载不用的软件，外加更新几个linux的虚拟机，整整折腾了一整天。昨天又下了nodejs，重新搞了一下hexo，继续写吧，每天学学学，总得留下什么吧。</p><p>还是没有养成写点东西的习惯，许多东西学得快，忘得也快。还有一些算法或者什么思想啦，只在脑中形成一些概念而已，没有经过系统的思考，慢慢也会忘掉的。记笔记尤其是写markdown，总能梳理出一个清晰的思路来。就比如过年之前花费了十几天<a id="more"></a>学习了java的SSM框架，虽然学了写了好多，但是现在就感觉全部忘掉了····· 也许是记忆力也出了点小问题叭。不管怎样，我还是要记下来，每天都记一记。</p><p>首先还是要好好反思自己，作为一名现役的ACM队员，19年下半年做的题量还不如我大一的一个月做的多，这是非常不正常的，银川回来之后，原想努把力去上海冲个金，结果才拿了铜，ccpc-final和ec-final相继打铁。想想也是太丢人了，我的状态不对呀！ 及时改变自己吧，生活还是可以回到正轨上来的。下个赛季，大四再打一个赛季，把在赛场上丢的脸捡回来，证明自己。</p><p>确实不应该，放弃了最好的一个学期去做了自己都知道没有结果的事情。冷静下来一想，是自己没有把握好度，失去了理智像飞蛾扑火般，不管怎样，都是一段很好的回忆叭。 自己也是在不断成长的呢，明白了许多的道理，看到了自己以前没有看到的方面，知道了自己的不足，也算是一种提高，一种阅历吧。</p><p>总之，悟已往之不谏，知来者之可追！！</p><p>1000题的小目标还没开始做呢，不要老想着明天啦，明日复明日，明日何其多嘛，现在就开始！</p><p>我的数论模版还没整理完呢，希望能在开学前整理完~~</p><p>java的SSM框架的工程才写了一半，希望也能抽空写完~~（idea intellij 太好用了，吹爆！jb-mono字体也很棒哦）</p><p>昨天晚上突然看了一眼 .net , 学着用c#写了一个hello world，感觉还挺有意思，希望能有空学一学~~</p><p>当然 linux内核的源码也想学学，这本书放桌面上几个月了还没看……</p><p>还是挺多东西学习的，继续加油叭，奥利给！！</p><p>奥利给！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是大年初五，2010.1.29， 在家连续玩了四天了，要开始继续学习了呀。&lt;/p&gt;
&lt;p&gt;自从电脑从linux 换成 windows ，就没有再重新配置hexo的环境（说白了太懒了），昨天折腾了一整天，把电脑里的文件整理、清理，升级或者卸载不用的软件，外加更新几个linux的虚拟机，整整折腾了一整天。昨天又下了nodejs，重新搞了一下hexo，继续写吧，每天学学学，总得留下什么吧。&lt;/p&gt;
&lt;p&gt;还是没有养成写点东西的习惯，许多东西学得快，忘得也快。还有一些算法或者什么思想啦，只在脑中形成一些概念而已，没有经过系统的思考，慢慢也会忘掉的。记笔记尤其是写markdown，总能梳理出一个清晰的思路来。就比如过年之前花费了十几天
    
    </summary>
    
    
      <category term="日常碎碎念" scheme="https://yanghaku.github.io/categories/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>2019东北地区四省赛</title>
    <link href="https://yanghaku.github.io/2019/05/22/2019%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%9B%9B%E7%9C%81%E8%B5%9B/"/>
    <id>https://yanghaku.github.io/2019/05/22/2019%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%9B%9B%E7%9C%81%E8%B5%9B/</id>
    <published>2019-05-22T06:00:00.000Z</published>
    <updated>2019-06-04T13:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102220/attachments/download/8734/the-13th-northeast-collegiate-programming-contest-en.pdf" target="_blank">题目pdf链接</a></p><p><a href="https://codeforces.com/gym/102220" target="_blank">提交链接(codeforces)</a></p><a id="more"></a><p><del>在现场(我)写崩了C题，虽然最后救回来了（队友带飞），但是还差一点，差一题才到金</del></p><hr><p>概览：</p><ul><li><a href="#A">A. Apple Business</a></li><li><a href="#B">B. Balanced Diet</a></li><li><a href="#C">C. Line-line Intersection</a></li><li><a href="#D">D. Master of Data Structure</a></li><li><a href="#E">E. Minimum Spanning Tree</a></li><li><a href="#F">F. Mini-game Before Contest</a></li><li><a href="#G">G. Radar Scanner</a></li><li><a href="#H">H. Skyscraper</a></li><li><a href="#I">I. Temperature Survey</a></li><li><a href="#J">J. Time Limit</a></li></ul><hr><h3 id="A">A. Apple Business</h3><p>pending（暂时不会）</p><hr><p><hr/><h3 id="B">B. Balanced Diet</h3><br>题意：给你n个糖果，每个糖果有价值$a_i$,属于种类$b_i$,让选择一些糖果，使得 (总价值/选择种类最大的个数) 尽量大，第j种糖果如果选择，选择的个数就应该大于等于$l_j$,(1<j<=m)思路：枚举分母(可以证明分母的取值只能是l[]中的取值)，对每一种糖果按照价值从大到小排个序，当分母枚举到l[j]的时候，就将当前种类糖果的前l[j]个值加起来，如果还有剩下的，就将这个j放入一个队列中，等枚举到l[i]>l[j]的时候，就将队列中的值遍历一遍，将之前没有加完的再加上。（需要对分母排个序，让分母升序枚举）。每次更新最大的答案即可（会爆int，不要忘取gcd）。<br>具体看代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> l[x]&lt;l[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;ve[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">int</span> p[maxn],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l[i]);</span><br><span class="line">r[i]=i;</span><br><span class="line">ve[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">sort(r,r+m,cmpr);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">ve[b<span class="number">-1</span>].push_back(ll(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)sort(ve[i].<span class="built_in">begin</span>(),ve[i].<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">ll ans1=<span class="number">0</span>,ans2=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k;i&lt;m;i=k)&#123;</span><br><span class="line"><span class="keyword">int</span> id=r[i];</span><br><span class="line"><span class="keyword">int</span> num=q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">while</span>(num--)&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line"><span class="keyword">while</span>(p[x]&lt;l[id]&amp;&amp;p[x]&lt;ve[x].<span class="built_in">size</span>())&#123;</span><br><span class="line">sum+=ve[x][p[x]];</span><br><span class="line">++p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[x]&lt;ve[x].<span class="built_in">size</span>())q.push(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">while</span>(k&lt;m&amp;&amp;l[r[k]]==l[id])&#123;</span><br><span class="line"><span class="keyword">int</span> len=ve[r[k]].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">min</span>(l[r[k]],len);++j)sum+=ve[r[k]][j];</span><br><span class="line"><span class="keyword">if</span>(l[r[k]]&lt;len)&#123;</span><br><span class="line">q.push(r[k]);</span><br><span class="line">p[r[k]]=l[r[k]];</span><br><span class="line">&#125;</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans1*l[id]&lt;ans2*sum)&#123;</span><br><span class="line">ans1=sum;</span><br><span class="line">ans2=l[id];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll d=__gcd(ans1,ans2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans1/d&lt;&lt;<span class="string">'/'</span>&lt;&lt;ans2/d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><hr/><h3 id="C">C. Line-line Intersection</h3><br>题目大意： 给你n个直线，问有多少对直线有公共点。<br>思路：直接用容斥原理， ans=n个直线的对数-平行的直线对+平行的直线中重合的对数<br>虽然思路好想，但是这个不好写。</p><p>第一种写法，将每一个直线化成$y=kx+b$的形式（没有k的单独放一起），然后将这些直线按照k和b排个序，最后计算相同的个数即可<br>这种写法最重要的是要处理精度问题，<strong>因为k有可能会到 1e-9，所以eps需要设置在1e-11左右才能分辨！！！</strong><br><del>(但是在现场赛我写的忘了加sort了，怎么调都不对，太菜了～～）</del><br>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> k,b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> T&amp; x)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(k-x.k)&lt;eps)<span class="keyword">return</span> b&lt;x.b;</span><br><span class="line"><span class="keyword">return</span> k&lt;x.k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;p[<span class="number">100000</span>+<span class="number">100</span>],p2[<span class="number">100000</span>+<span class="number">100</span>];</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">double</span> xx1,yy1,xx2,yy2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">ll n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">ll tot=<span class="number">0</span>,tot1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;xx1,&amp;yy1,&amp;xx2,&amp;yy2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(xx1-xx2)&lt;eps)&#123;</span><br><span class="line">p2[tot1].k=<span class="number">0</span>;</span><br><span class="line">p2[tot1].b=xx1;</span><br><span class="line">++tot1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p[tot].k=(yy2-yy1)/(xx2-xx1);</span><br><span class="line">p[tot].b=yy1-p[tot].k*xx1;</span><br><span class="line">++tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(p,p+tot);</span><br><span class="line">sort(p2,p2+tot1);</span><br><span class="line">ll ans=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;tot&amp;&amp;<span class="built_in">fabs</span>(p[i].k-p[j].k)&lt;eps)++j;</span><br><span class="line">ll leni=j-i;</span><br><span class="line">ans-=leni*(leni<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;i&lt;&lt;"  "&lt;&lt;leni&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;++k)&#123;</span><br><span class="line"><span class="keyword">int</span> kk=k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(kk&lt;j&amp;&amp;<span class="built_in">fabs</span>(p[k].b-p[kk].b)&lt;eps)++kk;</span><br><span class="line">ll lenk=kk-k;</span><br><span class="line">ans+=lenk*(lenk<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"lenk:  "&lt;&lt;lenk&lt;&lt;" "&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">k=kk<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans-=tot1*(tot1<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot1;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;tot1&amp;&amp;<span class="built_in">fabs</span>(p2[i].b-p2[j].b)&lt;eps)++j;</span><br><span class="line">ll len=j-i;</span><br><span class="line">ans+=len*(len<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>第二种写法（标程思路），将直线表示成Ax+By+C=0的形式（注意long long），判断平行就判断A1×B2==A2×B1是否成立即可，平行的时候看C是否相等就行。<br>对于点(x1,y1),(x2,y2), A(x1-x2)+B(y1-y2)=0, 令A=y1-y2,则B=x2-x1, 代入求C即可，计数用map保存就行<br><strong>1.不要忘了斜率比较的时候注意正负</strong><br><strong>2.不要忘了把A，B约分后再求C!!!</strong>，比如 x+y+1=0 和2x+2y+2=0两条直线，虽然c不同，但是其实这是同一条直线<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">K</span>&#123;</span></span><br><span class="line">ll A,B;</span><br><span class="line">K(ll a,ll b):A(a),B(b)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> K&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> A*x.B&lt;x.A*B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> K&amp;x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> A*x.B==x.A*B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">ll A,B,C;</span><br><span class="line">Line(ll a,ll b,ll c):A(a),B(b),C(c)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Line&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(A*x.B==B*x.A)<span class="keyword">return</span> C&lt;x.C;</span><br><span class="line"><span class="keyword">return</span> A*x.B&lt;B*x.A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Line&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(A*x.B!=B*x.A)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> C==x.C;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;K,ll&gt;mp1;</span><br><span class="line"><span class="built_in">map</span>&lt;Line,ll&gt;mp2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">mp1.<span class="built_in">clear</span>();mp2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">int</span> n,a1,a2,b1,b2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">ll ans=n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a1,&amp;b1,&amp;a2,&amp;b2);</span><br><span class="line">K tmp=K(b1-b2,a2-a1);</span><br><span class="line">ll d=__gcd(tmp.A,tmp.B);</span><br><span class="line">tmp.A/=d,tmp.B/=d;</span><br><span class="line">ll c=-tmp.A*a1-tmp.B*b1;</span><br><span class="line"><span class="keyword">if</span>(tmp.B&lt;<span class="number">0</span>)tmp.A=-tmp.A,tmp.B=-tmp.B;</span><br><span class="line">++mp1[tmp];</span><br><span class="line">++mp2[Line(tmp.A,tmp.B,c)];</span><br><span class="line">&#125;</span><br><span class="line">ans=ans*(ans<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp1.<span class="built_in">begin</span>();it!=mp1.<span class="built_in">end</span>();++it)ans-=(it-&gt;y)*((it-&gt;y)<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp2.<span class="built_in">begin</span>();it!=mp2.<span class="built_in">end</span>();++it)&#123;</span><br><span class="line">ans+=(it-&gt;y)*((it-&gt;y)<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr/><h3 id="D">D. Master of Data Structure</h3>题意：给你一个n（1<=n<=500000)个点的树，初始的点权都是0，然后给你m（1<=m<=2000)个操作，每次操作都是给定两个节点，对这两个节点之间的路径来操作，操作共有七种:1. u v k (1≤u,v≤n,1≤k≤105), for all nodes x∈p(u,v), change wx to wx+k.2. u v k (1≤u,v≤n,1≤k≤108), for all nodes x∈p(u,v), change wx to wx⊕k, where "⊕" denotes the bitwise XOR operation.3. u v k (1≤u,v≤n,1≤k≤108), for all nodes x∈p(u,v), change wx to wx−k. Note that if wx<k, ignore such x.4. u v (1≤u,v≤n), ask for the sum of wx where x∈p(u,v).5. u v (1≤u,v≤n), ask for the bitwise XOR sum of wx where x∈p(u,v).6. u v (1≤u,v≤n), ask for max{wx|x∈p(u,v)}−min{wx|x∈p(u,v)}.7. u v k (1≤u,v≤n,1≤k≤108), ask for min{|wx−k||x∈p(u,v)}.思路：看到这个首先想到的思路就是树链剖分然后线段树来做，但是第7个操作没法维护(可能是我太菜了没法做），然后某一个值改变后区间的异或和我也不会，所以这个方法应该行不通了……首先可以想这样一个问题：如果一个rmq的问题，这个区间非常大，但是操作和询问1e3数量级的，那么是不是可以离散化缩点然后大模拟来做？在树上也一样可以缩点来模拟，首先在一维的时候，所有的操作的线段的端点可以把一个区间分成x份(没有交集)，而其中不是线段端点上的点都是无用的点(即可以跟其他无用点合并），在树上也一样，这些查询的路径端点可以把树分成x份个不相交的线段，设操作的两个端点u，v为关键点，那么树上的划分就是由这些关键点和这些关键点两两LCA组成的，这些点组成一个新树，新树的边就表示线段里被压缩的若干点(可能为0)这个新树叫做**虚树**，就是可以将无用的点删去（或压缩）生成的，而且m个关键点时，这些点的LCA会不多于m-1个，（虚树也是看这个题解刚学的，讲解：[链接](https://www.cnblogs.com/zwfymqz/p/9175152.html)）因此将数据离线化后建的图节点数是O(m)的，直接大模拟就行(好像只能大模拟）。下面还有一个问题，就是对关键点两两LCA是$m^2log(n)$的复杂度，倍增法直接就T了，O(1)的LCA算法我没有试（主要是太菜了不会写），在大腿学长的指点下，才知道O(mlog(n)）就可以解决：将关键点按dfs序排序，两个**相邻**关键点的LCA就属于虚树里面的点，而其他的LCA一定包括在内。（这也就是前面的结论，新增加的点不会超过m-1个）。求出所有的关键点之后，就建立一个新图就行了，每个节点与父节点的边就是缩点(**注意为0**)，然后就是大模拟了。总复杂度$O(n+mlog(n)+m^2)$。ac代码(写的有点丑,历时一天提交17次)：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define debug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;</span><br><span class="line"><span class="keyword">if</span>(p1 == pend) &#123;</span><br><span class="line">p1 = buf;</span><br><span class="line">pend = buf + fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(pend == p1) &#123;</span><br><span class="line">IOerror = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(blank(ch = nc()));</span><br><span class="line"><span class="keyword">if</span>(IOerror)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> fastIO::<span class="built_in">read</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxQ=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> op,u,v,k;</span><br><span class="line">&#125;q[maxQ];</span><br><span class="line"><span class="keyword">bool</span> is_key[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn][<span class="number">24</span>],ceng[maxn],n,m,edge_num[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> node[maxn],edge_w[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;old_tree[maxn],tree[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">is_key[i]=<span class="number">0</span>;</span><br><span class="line">old_tree[i].<span class="built_in">clear</span>();</span><br><span class="line">tree[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_lca</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(is_key[now])st.push(now);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;old_tree[now].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; son=old_tree[now][i];</span><br><span class="line"><span class="keyword">if</span>(son!=fa[now][<span class="number">0</span>])&#123;</span><br><span class="line">fa[son][<span class="number">0</span>]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">23</span>;++j)fa[son][j]=fa[fa[son][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">ceng[son]=ceng[now]+<span class="number">1</span>;</span><br><span class="line">dfs_lca(son);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ceng[x]&lt;ceng[y])swap(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">22</span>;++i)<span class="keyword">if</span>((ceng[x]-ceng[y])&amp;(<span class="number">1</span>&lt;&lt;i))x=fa[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">22</span>;i&gt;<span class="number">-1</span>;--i)<span class="keyword">if</span>(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_tree</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[now].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; son=tree[now][i];</span><br><span class="line"><span class="keyword">if</span>(fa[now][<span class="number">0</span>]!=son)&#123;</span><br><span class="line">ceng[son]=ceng[now]+<span class="number">1</span>;</span><br><span class="line">fa[son][<span class="number">0</span>]=now;</span><br><span class="line">dfs_tree(son);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tree</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!st.empty())st.pop();</span><br><span class="line">ceng[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">23</span>;++i)fa[<span class="number">0</span>][i]=fa[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">is_key[<span class="number">0</span>]=is_key[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">dfs_lca(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x=st.top();st.pop();</span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> y=st.top();st.pop();</span><br><span class="line">is_key[lca(x,y)]=<span class="number">1</span>;</span><br><span class="line">x=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(is_key[i])&#123;</span><br><span class="line">edge_num[i]=<span class="number">0</span>;node[i]=edge_w[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x=fa[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(is_key[x]==<span class="number">0</span>)&#123;</span><br><span class="line">x=fa[x][<span class="number">0</span>],++edge_num[i];</span><br><span class="line">&#125;</span><br><span class="line">tree[i].push_back(x);</span><br><span class="line">tree[x].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">ceng[<span class="number">1</span>]=<span class="number">0</span>;fa[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">dfs_tree(<span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)<span class="keyword">if</span>(is_key[i])&#123;</span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;i&lt;&lt;<span class="string">"  fa: "</span>&lt;&lt;fa[i][<span class="number">0</span>]&lt;&lt;<span class="string">"  ceng: "</span>&lt;&lt;ceng[i]&lt;&lt;<span class="string">" edge_num: "</span>&lt;&lt;edge_num[i]&lt;&lt;<span class="string">"  son: "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tree[i].<span class="built_in">size</span>();++j)<span class="built_in">cerr</span>&lt;&lt;tree[i][j]&lt;&lt;<span class="string">' '</span>;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">node[u]+=k;</span><br><span class="line">edge_w[u]+=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">node[u]+=k;</span><br><span class="line">edge_w[u]+=k;</span><br><span class="line">node[v]+=k;</span><br><span class="line">edge_w[v]+=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">node[u]+=k;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(is_key[i])<span class="built_in">cerr</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>&lt;&lt;node[i]&lt;&lt;<span class="string">","</span>&lt;&lt;edge_w[i]&lt;&lt;<span class="string">") "</span>;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">node[u]^=k;</span><br><span class="line">edge_w[u]^=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">node[u]^=k;</span><br><span class="line">edge_w[u]^=k;</span><br><span class="line">node[v]^=k;</span><br><span class="line">edge_w[v]^=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">node[u]^=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_3</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(node[u]&gt;=k)node[u]-=k;</span><br><span class="line"><span class="keyword">if</span>(edge_w[u]&gt;=k)edge_w[u]-=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(node[u]&gt;=k)node[u]-=k;</span><br><span class="line"><span class="keyword">if</span>(edge_w[u]&gt;=k)edge_w[u]-=k;</span><br><span class="line"><span class="keyword">if</span>(node[v]&gt;=k)node[v]-=k;</span><br><span class="line"><span class="keyword">if</span>(edge_w[v]&gt;=k)edge_w[v]-=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node[u]&gt;=k)node[u]-=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_4</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">sum=sum+node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sum=sum+edge_w[u]*((<span class="keyword">long</span> <span class="keyword">long</span>)edge_num[u]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">sum=sum+node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sum=sum+edge_w[u]*((<span class="keyword">long</span> <span class="keyword">long</span>)edge_num[u]);</span><br><span class="line">&#125;</span><br><span class="line">sum=sum+node[v];</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sum=sum+edge_w[v]*((<span class="keyword">long</span> <span class="keyword">long</span>)edge_num[v]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">sum=sum+node[u];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_5</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">sum=sum^node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&amp;<span class="number">1</span>)sum=sum^edge_w[u];</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">sum=sum^node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&amp;<span class="number">1</span>)sum=sum^edge_w[u];</span><br><span class="line">sum=sum^node[v];</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&amp;<span class="number">1</span>)sum=sum^edge_w[v];</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">sum=sum^node[u];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_6</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> maxx=<span class="number">0</span>,minn=<span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[u]);</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,edge_w[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,edge_w[u]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[u]);</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,edge_w[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,edge_w[u]);</span><br><span class="line">&#125;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[v]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[v]);</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,edge_w[v]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,edge_w[v]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[u]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,maxx-minn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">my_abs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_7</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> minV=<span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[u]-k));</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)minV=<span class="built_in">min</span>(minV,my_abs(edge_w[u]-k));</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[u]-k));</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)minV=<span class="built_in">min</span>(minV,my_abs(edge_w[u]-k));</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[v]-k));</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&gt;<span class="number">0</span>)minV=<span class="built_in">min</span>(minV,my_abs(edge_w[v]-k));</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[u]-k));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,minV);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">read</span>(t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">read</span>(n);<span class="built_in">read</span>(m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">read</span>(u);<span class="built_in">read</span>(v);</span><br><span class="line">old_tree[u].push_back(v);</span><br><span class="line">old_tree[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">read</span>(q[i].op);<span class="built_in">read</span>(q[i].u);<span class="built_in">read</span>(q[i].v);</span><br><span class="line"><span class="keyword">if</span>(q[i].op==<span class="number">1</span>||q[i].op==<span class="number">2</span>||q[i].op==<span class="number">3</span>||q[i].op==<span class="number">7</span>)<span class="built_in">read</span>(q[i].k);</span><br><span class="line">is_key[q[i].u]=is_key[q[i].v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">init_tree();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].op==<span class="number">1</span>)op_1(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">2</span>)op_2(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">3</span>)op_3(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">4</span>)op_4(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">5</span>)op_5(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">6</span>)op_6(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">7</span>)op_7(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="E">E. Minimum Spanning Tree</h3>温暖の签到题，虽然思路不太好想，但是代码非常好写。题意：给你一棵**树**,将树的边变成新图的节点，原来树中的两个有公共节点的边在新图上变成一条边，边权为原先树上的这两条边的和，求生成的新图的最小生成树。思路：对于原先树的每一个节点，相连的边会两两生成一个新边，也就是在新图上对应着一个完全图，(新图上)完全图的边权是两个节点的和，那么这个的最小生成树就是节点最小的和其他的连接起来形成的。所以，记录每个节点的度数num，连的边的边权和sum，最小的边的权值min，这一个节点生成的新图的最小生成树就是min*(num-1)+(sum-min)。因为原来的图是一棵树，所以生成的新图是许多完全图组合来的(不会交叉)，最后的答案就是每个节点生成的完全图的和即可。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e12</span>;</span><br><span class="line">ll minv[maxn],sum[maxn],num[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,u,v,w;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">minv[i]=inf;</span><br><span class="line">sum[i]=num[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">ll ww=w;</span><br><span class="line">++num[u];</span><br><span class="line">++num[v];</span><br><span class="line">sum[u]+=ww;</span><br><span class="line">sum[v]+=ww;</span><br><span class="line">minv[v]=<span class="built_in">min</span>(minv[v],ww);</span><br><span class="line">minv[u]=<span class="built_in">min</span>(minv[u],ww);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ans+=(num[i]<span class="number">-2</span>)*minv[i]+sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="F">F. Mini-game Before Contest</h3>题意：给你一个有向图，图上放一枚棋子，让六个人轮流移动，六个人中分成两队，每三人一队，当某个人不能移动的时候这个队就输了。每个队里有想赢的人，也有演员（想自己队输），如果赢(输)不了，也会尽可能达到平局。问棋子从1到n每一点开始，最终的结果是什么。思路： (博弈dp)设$dp[i][j]$为第i个节点上轮到第j个人移动时的最终结果，（设1为A队赢，-1为B队赢，0为平局），则想要A赢的人转移方程为$dp[i][j]=max( dp[v][j+1] )  $其中v为i节点的所有下一个节点，想要B赢的转移方程为$dp[i][j]=min( dp[v][j+1])$（因为每一个决策只能通过下一个人的决策来确定）。 然后就是状态转移更新的问题了： 首先把所有的dp值都赋为0，可以把图反向建边，每个入度为零的节点是可以直接确定的节点（无论怎样决策都是输），然后将这些节点放入队列，以SPFA的方式进行松弛，直到队列为空，因为每个节点只会在1,0，-1之间更新常数次，所以时间复杂度O（n+m）。但是还有最后一个问题，就是更新一个状态的复杂度的问题：对于每一个状态，需要遍历所有的后继节点才能获取当前的dp值(复杂度有点高)，可以用三个cnt数组进行优化，记录每个状态后继状态的1,0,-1的数量，这样每次更新就是O（1）的复杂度。对于每个状态，只在出队列的时候更新dp值，同时记录之前的dp值，然后将所有后继状态的cnt值更新即可。ac代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define debug</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,next;</span><br><span class="line">&#125;edge[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],n,m;</span><br><span class="line"><span class="keyword">int</span> indegree[maxn],cnt0[maxn][<span class="number">6</span>],cnt1[maxn][<span class="number">6</span>],cnt_1[maxn][<span class="number">6</span>],dp[maxn][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> inqueue[maxn][<span class="number">6</span>],vis[maxn],a_win[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">char</span> team[<span class="number">7</span>],action[<span class="number">7</span>],buf[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">head[i]=<span class="number">-1</span>;</span><br><span class="line">indegree[i]=<span class="number">0</span>;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)&#123;</span><br><span class="line">dp[i][j]=<span class="number">0</span>;</span><br><span class="line">inqueue[i][j]=<span class="number">0</span>;</span><br><span class="line">cnt1[i][j]=cnt_1[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">update_dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;cnt1[x][y]&lt;&lt;<span class="string">"  "</span>&lt;&lt;cnt0[x][y]&lt;&lt;<span class="string">"  "</span>&lt;&lt;cnt_1[x][y]&lt;&lt;<span class="string">"  "</span>&lt;&lt;indegree[x]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(a_win[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt1[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt0[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt_1[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt0[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)cnt0[i][j]=indegree[i];</span><br><span class="line"><span class="keyword">if</span>(indegree[i]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)&#123;</span><br><span class="line"><span class="comment">//if(team[j]=='A')dp[i][j]=-1;</span></span><br><span class="line"><span class="comment">//else dp[i][j]=1;</span></span><br><span class="line"><span class="keyword">if</span>(team[j]==<span class="string">'A'</span>)cnt_1[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cnt1[i][j]=<span class="number">1</span>;</span><br><span class="line">q.emplace(i,j);</span><br><span class="line">inqueue[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().x;</span><br><span class="line"><span class="keyword">int</span> y=q.front().y;</span><br><span class="line">q.pop();</span><br><span class="line">inqueue[x][y]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> old=dp[x][y];</span><br><span class="line">dp[x][y]=update_dp(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];~i;i=edge[i].next)&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[i].v;</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> id=(y+<span class="number">5</span>)%<span class="number">6</span>;</span><br><span class="line"><span class="keyword">bool</span> update=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(old==<span class="number">1</span>)--cnt1[v][id];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(old==<span class="number">0</span>)--cnt0[v][id];</span><br><span class="line"><span class="keyword">else</span> --cnt_1[v][id];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dp[x][y]==<span class="number">1</span>)++cnt1[v][id];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[x][y]==<span class="number">0</span>)++cnt0[v][id];</span><br><span class="line"><span class="keyword">else</span> ++cnt_1[v][id];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(update_dp(v,id)!=dp[v][id] &amp;&amp; inqueue[v][id]==<span class="number">0</span>)&#123;</span><br><span class="line">inqueue[v][id]=<span class="number">1</span>;</span><br><span class="line">q.emplace(v,id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;x&lt;&lt;<span class="string">"   "</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;i&lt;&lt;<span class="string">": "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)<span class="built_in">cerr</span>&lt;&lt;update_dp(i,j)&lt;&lt;<span class="string">' '</span>;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,u;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;edge[i].v,&amp;u);</span><br><span class="line">edge[i].next=head[u];</span><br><span class="line">head[u]=i;</span><br><span class="line">++indegree[edge[i].v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,team,action);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(team[i]==<span class="string">'A'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(action[i]==<span class="string">'0'</span>)a_win[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> a_win[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(action[i]==<span class="string">'0'</span>)a_win[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> a_win[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line">buf[i]=<span class="string">'D'</span>;<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i][<span class="number">0</span>]==<span class="number">1</span>)buf[i]=<span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[i][<span class="number">0</span>]==<span class="number">0</span>)buf[i]=<span class="string">'D'</span>;</span><br><span class="line"><span class="keyword">else</span> buf[i]=<span class="string">'B'</span>;</span><br><span class="line">&#125;buf[n+<span class="number">1</span>]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,buf+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="G">G. Radar Scanner</h3>题意：给你n个矩形，找到一个点使得n个矩形都在这个点重合并且移动距离最小，输出最小的距离思路：明显x和y两个方向之间没有关系，所以只考虑一维的即可。对于x方向，假设点的坐标为$x_0$,那么$x_0$从左到右的时候总移动距离是先减后增的，所以三分出来这个最低点即可得到答案（y轴一样）。代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">point</span> a1[maxn],a2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="built_in">point</span> a[],<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].x&gt;x)ans+=ll(a[i].x)-x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i].y&lt;x)ans+=ll(x)-a[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">point</span> a[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid,midmid;</span><br><span class="line"><span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">mid=(r+l)/<span class="number">2</span>;</span><br><span class="line">midmid=(mid+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;"  "&lt;&lt;mid&lt;&lt;"  "&lt;&lt;midmid&lt;&lt;"  "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(sum(a,mid)&lt;sum(a,midmid))r=midmid;</span><br><span class="line"><span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> min1=<span class="number">1e9</span>+<span class="number">1</span>,min2=<span class="number">1e9</span>+<span class="number">1</span>,max1=<span class="number">0</span>,max2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a1[i].x,&amp;a2[i].x,&amp;a1[i].y,&amp;a2[i].y);</span><br><span class="line">min1=<span class="built_in">min</span>(min1,a1[i].x);</span><br><span class="line">max1=<span class="built_in">max</span>(max1,a1[i].y);</span><br><span class="line">min2=<span class="built_in">min</span>(min1,a2[i].x);</span><br><span class="line">max2=<span class="built_in">max</span>(max2,a2[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=solve(a1,min1,max1);</span><br><span class="line"><span class="keyword">int</span> y=solve(a2,min2,max2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum(a1,x)+sum(a2,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>**标程思路**：对于每一维，线段$[l_i,r_i]$移动到$x_0$的移动距离是$(|l_i-x_0|+|r_i-x_0|-|r_i-l_i|)/2$ ,那么只要最小化$\sum|r_i-x_0|+|l_i-x_0|$就行了，要使最小，$x_0$就是所有l，r的中位数，然后答案就出来了。<hr/><h3 id="H">H. Skyscraper</h3>题意：给你n个数a[]，对于h[]数组起始都是0，每次可以进行一次操作，让h数组里的[l,r]区间的数加一，问最少需要多少次使得h[i]==a[i]{i<=1<=n}(h[i]等于a[i]后就不能再加了)。a是动态变化的，给q个询问， 1 l r k 表示把a数组[l,r]都加k， 2 l r 表示询问最少多少次使[l,r]区间内所有h[i]==a[i](h初始都为0)。思路：从l到r增加，首先l的位置需要增加a[l]次，到l+1的时候，分两种情况: 1. 如果a[l+1]>a[l],那么操作次数就增加h[l+1]-h[l]. 2. 如果a[l+1]<=a[l], 那么不需要增加额外的操作，跟着h[l]就可以一起操作完了。设x[i]为a[i+1]-a[i],那么最小的操作次数就是$a[l]+\sum_{i=l}^{r-1}max(x[i],0)$,因此，维护一个正的差分序列sum1即可(为了方便操作在a序列前面加一个0和在a序列的后面也加一个0), 但是这个a是动态的，所以可以维护一个差分的树状数组sum，对a数组的区间修改就相当于点修改(l点和r+1点),修改完之后判断正负再对正差分树状数组sum1进行两个点修改，每次查询的答案就是sum[l]+(sum1[r]-sum[l])附：<a href="https://wudaoyunqi.github.io/2018/10/16/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/" target="_blank">Wudaoyunqiの树状数组讲解</a>ac代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line">ll sum[maxn],sum1[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll s[],<span class="keyword">int</span> x,ll val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">s[x]+=val;</span><br><span class="line">x=x+lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll s[],<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">ans+=s[x];</span><br><span class="line">x=x-lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,q,tmp;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(ll)*(n+<span class="number">500</span>));</span><br><span class="line"><span class="built_in">memset</span>(sum1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ll)*(n+<span class="number">500</span>));</span><br><span class="line">n+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>;add(sum,<span class="number">1</span>,<span class="number">0</span>);add(sum1,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">add(sum,i,tmp-last);</span><br><span class="line"><span class="keyword">if</span>(tmp-last&gt;<span class="number">0</span>)add(sum1,i,tmp-last);</span><br><span class="line">last=tmp;</span><br><span class="line">&#125;</span><br><span class="line">add(sum,n,<span class="number">0</span>);add(sum1,n,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> op,l,r,k;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;l,&amp;r);</span><br><span class="line">++l,++r;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">++r;</span><br><span class="line">ll last_l=query(sum1,l)-query(sum1,l<span class="number">-1</span>);</span><br><span class="line">ll last_r=query(sum1,r)-query(sum1,r<span class="number">-1</span>);</span><br><span class="line">add(sum1,l,-last_l);</span><br><span class="line">add(sum1,r,-last_r);</span><br><span class="line">add(sum,l,k);</span><br><span class="line">add(sum,r,-k);</span><br><span class="line">last_l=query(sum,l)-query(sum,l<span class="number">-1</span>);</span><br><span class="line">last_r=query(sum,r)-query(sum,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(last_l&gt;<span class="number">0</span>)add(sum1,l,last_l);</span><br><span class="line"><span class="keyword">if</span>(last_r&gt;<span class="number">0</span>)add(sum1,r,last_r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(sum1,r)-query(sum1,l)+query(sum,l)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="I">I. Temperature Survey</h3><p>题意：给你一个长度为n的不下降数组a,问有多少个不下降的数组b，使得$b_i &lt;= a_i [1&lt;=i&lt;=n]$.</p><p>思路(根据题解)：<br>比如当测试数据为n=10,a[]={3,3,4,4,6,6,6,7,10,10};的时候<br>首先可以把这个问题抽象成一个二维的走格子的问题(如图)<img src="I_1.png" alt="I_1"><br>每次从(0,1)点出发，每次只能向上走1格或者向右走i格，问要到达(a[x],n)点(1&lt;=x&lt;=n)，经过的路径有多少种（灰色是不可以经过的点)。  可以向上加一行，问题就变成了要到达$a[n][n+1]$的路径数。<br>设$dp[i][j]$为到达第i行第j列的路径数，可以推出$dp[i][j]=dp[i-1][j]+dp[i][j-1]$，显然这样$O(n^2)$的做法会超时，所以可以考虑将这个dp优化。<br>如果在一个矩形中，知道了左边界和下边界，那么上边界和右边界就可以用左和下边界与组合式的系数表示，可以用卷积进行优化。<br>所以将原来的图形划分为若干互不相交的矩形，从左下到右上，矩形的左边界可以由之前的矩形的右边界下边界暴力求出来，矩形内部用NTT卷积得出上边界和右边界，然后继续下一个，直到最后一个矩形：<br>如图，矩形的划分<img src="I_2.png" alt=""></p><p>所以剩下的最复杂的地方就是推卷积公式了，我推了好长时间都没有找到公式，问大腿学长的时候他马上就推出来了，我才知道我推不出来的原因是没有<strong>建系</strong>！！建立坐标系，就可以直接用组合数得到公式了！<br>设横向为1-m，纵向为1-n<br>公式：</p><script type="math/tex; mode=display">up: dp[n-1][k]=\sum_{i=1}^{n-1}dp[i][0]C_{k-1+n-i-1}^{k-1}+\sum_{j=1}^{k}dp[0][j]C_{n-2+k-j}^{n-2}</script><script type="math/tex; mode=display">right: dp[k][m-1]=\sum_{i=1}^{k}dp[i][0]C_{m-2+k-i}^{m-2}+\sum_{j=1}^{m-1}dp[0][j]C_{m-j-1+k-1}^{k-1}</script><p>dp值的存储可以用二维的map，也可以用邻接表然后二分查找(因为是升序插入的)<br>写的时候卡好多地方的常数，比如ntt用的g^x需要预处理出来等（看qls的代码才知道），T了好几天终于过了！<br>第一次AC是卡着时限过的(服务器跑的稍微慢一点就T了)：<img src="I_3.png" alt=""></p><p>最终ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxX=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> G=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define debug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;</span><br><span class="line"><span class="keyword">if</span>(p1 == pend) &#123;</span><br><span class="line">p1 = buf;</span><br><span class="line">pend = buf + fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(pend == p1) &#123;</span><br><span class="line">IOerror = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(blank(ch = nc()));</span><br><span class="line"><span class="keyword">if</span>(IOerror)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ll fac[maxn&lt;&lt;<span class="number">1</span>],fac_inv[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">q_pow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll po[maxX],inpo[maxX],inv[maxX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[maxX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> j=__builtin_ctz(n)<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;j);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)<span class="keyword">if</span>(i&lt;pos[i])swap(a[i],a[pos[i]]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;d)&lt;n;d++)&#123;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">1</span>&lt;&lt;d,m2=m&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    ll*_w= t==<span class="number">1</span>?po:inpo;</span><br><span class="line">    _w+=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=m2)&#123;</span><br><span class="line">      ll* w = _w;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;m+i;j++,w++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=(*w)*a[j+m]%mod;</span><br><span class="line">        a[j+m]=a[j]-x;</span><br><span class="line"><span class="keyword">if</span>(a[j+m]&lt;<span class="number">0</span>)a[j+m]+=mod;</span><br><span class="line">        a[j]+=x;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;=mod)a[j]-=mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;</span><br><span class="line">    ll j=inv[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)a[i]=a[i]*j%mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dp_pair</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,dp;</span><br><span class="line">dp_pair(<span class="keyword">int</span> yy,<span class="keyword">int</span> dpp):y(yy),dp(dpp)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;dp_pair&gt;ve[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=ve[x].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(r&gt;=l)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ve[x][mid].y==y)<span class="keyword">return</span> ve[x][mid].dp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ve[x][mid].y&gt;y)r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> B[],<span class="keyword">int</span> alen,<span class="keyword">int</span> blen)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(alen+blen&lt;<span class="number">129</span>)&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> C[<span class="number">257</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alen;++i)C[i]=A[i];</span><br><span class="line"><span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(alen+blen));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alen;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;blen;++j)&#123;</span><br><span class="line">A[i+j]=A[i+j]+ll(C[i])*B[j]%mod;</span><br><span class="line"><span class="keyword">if</span>(A[i+j]&gt;=mod)A[i+j]-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,len=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(alen==blen)x=(alen&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> x=blen;</span><br><span class="line"><span class="keyword">while</span>(len&lt;x)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(A+alen,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(len-alen));</span><br><span class="line"><span class="built_in">memset</span>(B+blen,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(len-blen));</span><br><span class="line">NTT(A,len,<span class="number">1</span>);NTT(B,len,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i]=ll(A[i])*B[i]%mod;</span><br><span class="line">NTT(A,len,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuck</span><span class="params">(<span class="keyword">int</span> xl,<span class="keyword">int</span> yl,<span class="keyword">int</span> xr,<span class="keyword">int</span> yr)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> A[maxX],X[maxX],Left[maxX],Down[maxX],Up[maxX],Right[maxX];</span><br><span class="line"><span class="keyword">int</span> n=yr-yl+<span class="number">1</span>,m=xr-xl+<span class="number">1</span>,len;</span><br><span class="line">Down[<span class="number">0</span>]=get_dp(xl<span class="number">-1</span>,yl)+get_dp(xl,yl<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(Down[<span class="number">0</span>]&gt;=mod)Down[<span class="number">0</span>]-=mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=xl+<span class="number">1</span>,k=<span class="number">1</span>;i&lt;=xr;++i,++k)&#123;</span><br><span class="line">Down[k]=(get_dp(i,yl<span class="number">-1</span>)+Down[k<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(Down[k]&gt;=mod)Down[k]-=mod;</span><br><span class="line">&#125;</span><br><span class="line">Left[<span class="number">0</span>]=Down[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=yl+<span class="number">1</span>,k=<span class="number">1</span>;i&lt;=yr;++i,++k)&#123;</span><br><span class="line">Left[k]=Left[k<span class="number">-1</span>]+get_dp(xl<span class="number">-1</span>,i);</span><br><span class="line"><span class="keyword">if</span>(Left[k]&gt;=mod)Left[k]-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">Down[<span class="number">0</span>]=Left[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">len=m+n<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)X[i]=(ll(Left[i])*fac_inv[n-i<span class="number">-1</span>])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i]=fac[i];</span><br><span class="line">mul(X,A,n,len);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>,k=<span class="number">1</span>;i&lt;len;++i,++k)Up[k]=ll(X[i])*fac_inv[k<span class="number">-1</span>]%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)X[i]=Down[i],A[i]=fac[i+n<span class="number">-2</span>]*fac_inv[n<span class="number">-2</span>]%mod*fac_inv[i]%mod;</span><br><span class="line">mul(X,A,m,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;++i)Up[i]=(Up[i]+X[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;++i)Up[i]=Down[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Up[<span class="number">0</span>]=Left[n<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)X[i]=Left[i],A[i]=fac[m<span class="number">-2</span>+i]*fac_inv[m<span class="number">-2</span>]%mod*fac_inv[i]%mod;</span><br><span class="line">mul(X,A,n,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)Right[i]=X[i];</span><br><span class="line"></span><br><span class="line">len=m+n<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)X[i]=(ll(Down[i])*fac_inv[m<span class="number">-1</span>-i])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i]=fac[i];</span><br><span class="line">mul(X,A,m,len);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>,k=<span class="number">1</span>;i&lt;len;++i,++k)Right[k]=(Right[k]+X[i]*fac_inv[k<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)Right[i]=Left[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Right[<span class="number">0</span>]=Down[m<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)ve[xr].pb(i+yl,Right[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;++i)ve[i+xl].pb(yr,Up[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide_rectangle</span><span class="params">(<span class="keyword">int</span> xl,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;a[l]&lt;xl)++l;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(mid&gt;<span class="number">1</span>&amp;&amp;a[mid<span class="number">-1</span>]==a[mid])--mid;</span><br><span class="line"><span class="keyword">if</span>(l&lt;mid)divide_rectangle(xl,l,mid<span class="number">-1</span>);</span><br><span class="line">fuck(xl,mid,a[mid],r);</span><br><span class="line">divide_rectangle(a[mid]+<span class="number">1</span>,((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">clock_t</span> t1=clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">static</span> ll g[<span class="number">30</span>],ng[<span class="number">30</span>];</span><br><span class="line">g[<span class="number">20</span>]=q_pow(G,(mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;<span class="number">21</span>));</span><br><span class="line">ng[<span class="number">20</span>]=q_pow(g[<span class="number">20</span>],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;--i)g[i]=g[i+<span class="number">1</span>]*g[i+<span class="number">1</span>]%mod,ng[i]=ng[i+<span class="number">1</span>]*ng[i+<span class="number">1</span>]%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">inv[x]=q_pow(x,mod<span class="number">-2</span>);</span><br><span class="line">po[x]=inpo[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;x;++j)&#123;</span><br><span class="line">po[x+j]=po[x+j<span class="number">-1</span>]*g[i]%mod;</span><br><span class="line">inpo[x+j]=inpo[x+j<span class="number">-1</span>]*ng[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">po[<span class="number">1</span>&lt;&lt;<span class="number">20</span>]=inpo[<span class="number">1</span>&lt;&lt;<span class="number">20</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> T=maxn&lt;&lt;<span class="number">1</span>;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;T;++i)fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">fac_inv[T<span class="number">-1</span>]=q_pow(fac[T<span class="number">-1</span>],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=T<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)fac_inv[i]=fac_inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line"></span><br><span class="line">fastIO::<span class="built_in">read</span>(T);</span><br><span class="line">ve[<span class="number">0</span>].pb(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">fastIO::<span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">fastIO::<span class="built_in">read</span>(a[i]);</span><br><span class="line">ve[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">++n;a[n]=a[n<span class="number">-1</span>];</span><br><span class="line">divide_rectangle(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> x=get_dp(a[n],n);</span><br><span class="line"><span class="keyword">if</span>(x&gt;=mod)x-=mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">clock_t</span> t2=clock();</span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;<span class="string">"time: "</span>&lt;&lt;<span class="keyword">double</span>(t2-t1)/CLOCKS_PER_SEC&lt;&lt;<span class="string">" s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><hr/><h3 id="J">J. Time Limit</h3><br>第一道签到题，求第一个大于等于 min(3*a[1],a[i]) {2&lt;=i&lt;=n} 的偶数</p><p>ac代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,x,tmp;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">x*=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">x=<span class="built_in">max</span>(x,tmp+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&amp;<span class="number">1</span>)++x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p style="text-align:center;font-size:28px;color:red">**END**</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102220/attachments/download/8734/the-13th-northeast-collegiate-programming-contest-en.pdf&quot; target=&quot;_blank&quot;&gt;题目pdf链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102220&quot; target=&quot;_blank&quot;&gt;提交链接(codeforces)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="现场赛の补题" scheme="https://yanghaku.github.io/categories/%E7%8E%B0%E5%9C%BA%E8%B5%9B%E3%81%AE%E8%A1%A5%E9%A2%98/"/>
    
    
      <category term="codeforces" scheme="https://yanghaku.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019 ICPC, NEERC, Southern Subregional Contest </title>
    <link href="https://yanghaku.github.io/2019/05/20/2018-2019-ICPC-NEERC-Southern-Subregional-Contest/"/>
    <id>https://yanghaku.github.io/2019/05/20/2018-2019-ICPC-NEERC-Southern-Subregional-Contest/</id>
    <published>2019-05-20T00:54:00.000Z</published>
    <updated>2020-01-29T02:25:45.829Z</updated>
    
    <content type="html"><![CDATA[<p>这套题目难度适中吧，<del>只不过我们队还没做到自己的最好，自闭了好几个小时的题目竟然是水题</del></p><p><a href="https://assets.codeforces.com/rounds/1070/statements-9762-en.pdf" target="_blank">题目pdf链接</a></p><p><a href="https://codeforces.com/contest/1070" target="_blank">codeforce提交链接</a><br><a id="more"></a></p><hr><p>概览：</p><ul><li><a href="#A">A. Find a Number</a></li><li><a href="#B">B. Berkomnadzor</a></li><li><a href="#C">C. Cloud Computing</a></li><li><a href="#D">D. Garbage Disposal</a></li><li><a href="#E">E. Getting Deals Done</a></li><li><a href="#F">F. Debate</a></li><li><a href="#G">G. Monsters and Potions</a></li><li><a href="#H">H. BerOS File Suggestion</a></li><li><a href="#I">I. Privatization of Roads in Berland</a></li><li><a href="#J">J. Streets and Avenues in Berhattan</a></li><li><a href="#K">K. Video Posts</a></li><li><a href="#L">L. Odd Federalization</a></li><li><a href="#M">M. Algoland and Berland</a></li></ul><hr><h3 id="A">A. Find a Number</h3><p>题目大意： 给你一个d(1&lt;=d&lt;=500),和s(1&lt;=s&lt;=5000)，找到一个最小的整数n使得n是d的倍数并且各数位之和为s，不存在就输出-1。</p><p><del>这个题自闭了四个小时还没做出来，其实就是一个简单的bfs！！</del></p><p>思路：记 dp[x][y] 为余数为x，各数位之和为y的数的最小值，因为数位太大，所以可以用一个string保存。<br/>状态转移方程是： dp[(x<em>10+k)%d][y+k]=dp[x][y]+string(k) (0&lt;=k&lt;=9) //其中＋为字符串的连接操作。<br/>所以只要找到dp[0][s]即可，初始的状态为dp[k%d][k] (1&lt;=k&lt;=9) (即只有一位的时候）<br/> 直接用记忆化的BFS搜索即可，而且这样可以保证每次第一次访问到的状态都是最小的，因为加入队列的顺序是<em>*从小到大</em></em>的。<br/>（有一个与此题非常相似的题，就是因为这个从小到大的特性才能AC—&gt;<a href="https://codeforces.com/gym/101889/attachments">题目链接：Enigma</a>）。</p><p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d,S;</span><br><span class="line"><span class="comment">//string str[501][5001];</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">T(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy,<span class="built_in">string</span> ss):x(xx),y(yy),s(ss)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">q.emplace(i%d,i,<span class="built_in">string</span>(<span class="number">1</span>,<span class="keyword">char</span>(i+<span class="string">'0'</span>)));</span><br><span class="line">vis[i%d][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().x;</span><br><span class="line"><span class="keyword">int</span> y=q.front().y;</span><br><span class="line"><span class="built_in">string</span> s=q.front().s;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==S)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(y+i&gt;S)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> id=(x*<span class="number">10</span>+i)%d;</span><br><span class="line"><span class="keyword">if</span>(vis[id][y+i]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[id][y+i]=<span class="number">1</span>;</span><br><span class="line">q.emplace(id,y+i,s+<span class="keyword">char</span>(i+<span class="string">'0'</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;d&gt;&gt;S;</span><br><span class="line"><span class="keyword">if</span>(solve())<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化：</strong> 上面的代码跑了1200多ms，虽说没有超时，但是还是完全可以优化的。<br/>考虑到每次的状态都需要一个string保存，每次状态转移都是前一个的string复制后再添上一个字符（而其中的复制和动态内存的分配与释放消耗的时间非常多），所以说这个地方可以有很大的优化。<br/>考虑到每次状态转移都是只添加一个字符，而其他字符就可以直接用上一个状态的就行，所以可以做成一个链表，每一个状态都保存它上一个状态的地址（两个坐标），就能生成最后的字符串，这样可以节省所有的字符串复制的时间。</p><p>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d,S;</span><br><span class="line"><span class="comment">//string str[501][5001];</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="keyword">int</span> lastx[<span class="number">501</span>][<span class="number">5001</span>],lasty[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">T(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy):x(xx),y(yy)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getString</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">-1</span>)&#123;</span><br><span class="line">s=s+ch[x][y];</span><br><span class="line">tmp=lastx[x][y];</span><br><span class="line">y=lasty[x][y];</span><br><span class="line">x=tmp;</span><br><span class="line">&#125;</span><br><span class="line">reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">q.emplace(i%d,i);</span><br><span class="line">vis[i%d][i]=<span class="number">1</span>;</span><br><span class="line">lastx[i%d][i]=<span class="number">-1</span>;</span><br><span class="line">lasty[i%d][i]=<span class="number">-1</span>;</span><br><span class="line">ch[i%d][i]=i+<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().x;</span><br><span class="line"><span class="keyword">int</span> y=q.front().y;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==S)&#123;</span><br><span class="line">getString(x,y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(y+i&gt;S)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> id=(x*<span class="number">10</span>+i)%d;</span><br><span class="line"><span class="keyword">if</span>(vis[id][y+i]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[id][y+i]=<span class="number">1</span>;</span><br><span class="line">q.emplace(id,y+i);</span><br><span class="line">ch[id][y+i]=i+<span class="string">'0'</span>;</span><br><span class="line">lastx[id][y+i]=x;</span><br><span class="line">lasty[id][y+i]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;d&gt;&gt;S;</span><br><span class="line"><span class="keyword">if</span>(solve())<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两次运行时间对比：(可以发现少了将近1s）<img src="A_staus.png" alt="A submission"></p><hr><h3 id="B">B. Berkomnadzor</h3>(mid) 字典树大模拟，题目大意：给你n个ip地址(也可能是一个划分的子网）都是使用点分十进制表示法，这n个ip有的属于白名单，有的属于黑名单，然后就是让你把黑名单合并，要求在白名单中的不能属于黑名单，不在白名单中的ip也可以进入黑名单，让你合并后的黑名单个数尽量少。（如果某个ip既在黑名单又在白名单，那么就输出-1。思路：首先写好点分十进制和二进制ip的相互转化函数，字典树里面只包括0,1字符即可，每个节点要维护当前ip地址(或者子网)是否属于黑名单或者白名单，当前节点之后的子网有没有属于白名单的，有没有属于黑名单的即可。检查冲突：如果下面的所有子网地址都属于一个确定的黑(白)名单，那么就可以判断是否与当前正在插入的ip有冲突，如果到达当前ip的子网掩码长度，就可以判断下面的子网中有没有与此冲突。注意有子网掩码为0的情况，也就是包括所有的ip的情况。ac代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> ip[<span class="number">100</span>],white;</span><br><span class="line"><span class="keyword">int</span> len,subnet_len,ans,black_num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">node* next[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> has_white[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> has_black[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> all_white;</span><br><span class="line"><span class="keyword">bool</span> all_black;</span><br><span class="line">node()&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line"><span class="built_in">memset</span>(has_white,<span class="number">0</span>,<span class="keyword">sizeof</span>(has_white));</span><br><span class="line"><span class="built_in">memset</span>(has_black,<span class="number">0</span>,<span class="keyword">sizeof</span>(has_black));</span><br><span class="line">all_white=all_black=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">~node()&#123;</span><br><span class="line"><span class="keyword">if</span>(next[<span class="number">0</span>])<span class="keyword">delete</span> next[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(next[<span class="number">1</span>])<span class="keyword">delete</span> next[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;*root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_binary</span><span class="params">()</span></span>&#123;<span class="comment">//将点分十进制变为二进制</span></span><br><span class="line"><span class="keyword">if</span>(buf[<span class="number">0</span>]==<span class="string">'+'</span>)white=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> white=<span class="number">0</span>,++black_num;</span><br><span class="line">len=<span class="built_in">strlen</span>(buf);</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">subnet_len=<span class="number">32</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;len&amp;&amp;buf[i]&gt;=<span class="string">'0'</span>&amp;&amp;buf[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+buf[i]-<span class="string">'0'</span>;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot==<span class="number">32</span>)&#123;</span><br><span class="line">subnet_len=x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;(<span class="number">7</span>-k))&amp;<span class="number">1</span>)ip[tot]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ip[tot]=<span class="number">0</span>;</span><br><span class="line">++tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_binary</span><span class="params">()</span></span>&#123;<span class="comment">//将二进制变为点分十进制</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">8</span>;j&lt;(i+<span class="number">1</span>)*<span class="number">8</span>&amp;&amp;j&lt;subnet_len;++j)&#123;</span><br><span class="line">x=x|(ip[j]&lt;&lt;(<span class="number">7</span>-j+i*<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(subnet_len!=<span class="number">32</span>)<span class="built_in">printf</span>(<span class="string">"/%d\n"</span>,subnet_len);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">node* p=root;</span><br><span class="line"><span class="keyword">if</span>(subnet_len==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_black[<span class="number">0</span>]||p-&gt;has_black[<span class="number">1</span>]||p-&gt;all_black)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;all_white=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_white[<span class="number">0</span>]||p-&gt;has_white[<span class="number">1</span>]||p-&gt;all_white)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;all_black=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)p-&gt;has_white[ip[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> p-&gt;has_black[ip[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!p-&gt;next[ip[i]])p-&gt;next[ip[i]]=<span class="keyword">new</span> node();</span><br><span class="line">p=p-&gt;next[ip[i]];</span><br><span class="line"><span class="keyword">if</span>(p-&gt;all_white)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//黑白冲突</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;all_black)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==subnet_len<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)&#123;</span><br><span class="line">p-&gt;all_white=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_black[<span class="number">0</span>]||p-&gt;has_black[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;all_black=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_white[<span class="number">0</span>]||p-&gt;has_white[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_num</span><span class="params">(node* now,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_white)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_black|| (!now-&gt;has_white[<span class="number">0</span>]&amp;&amp;!now-&gt;has_white[<span class="number">1</span>]))&#123;</span><br><span class="line">++ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">0</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">0</span>;</span><br><span class="line">dfs_num(now-&gt;next[<span class="number">0</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">1</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">1</span>;</span><br><span class="line">dfs_num(now-&gt;next[<span class="number">1</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node* now,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_white)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_black || (!now-&gt;has_white[<span class="number">0</span>]&amp;&amp;!now-&gt;has_white[<span class="number">1</span>]))&#123;</span><br><span class="line">subnet_len=num;</span><br><span class="line">change_binary();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">0</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">0</span>;</span><br><span class="line">dfs(now-&gt;next[<span class="number">0</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">1</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">1</span>;</span><br><span class="line">dfs(now-&gt;next[<span class="number">1</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">new</span> node();</span><br><span class="line"><span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">get_binary();</span><br><span class="line"><span class="keyword">if</span>(!insert())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(black_num==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">dfs_num(root,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">dfs(root,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="C">C. Cloud Computing</h3>pending---<h3 id="D">D. Garbage Disposal</h3><p>签到题一枚，题目大意是给你n天的每天的垃圾量，每个垃圾只能在当天或者第二天扔掉（<strong>不能放到第三天</strong>），垃圾只能装到包里才能扔，所以给你一个k，表示每个包最多能盛放多少垃圾。问最小需要多少个包。<br>思路：直接贪心即可，每天把当天需要扔的垃圾整除k（装包扔掉），余数（即剩下不够装满一个包）就放到第二天扔。但是要注意垃圾不能存到第三天，所以只要保证当天扔的垃圾大于前一天剩下的即可。<br>ac代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,last=<span class="number">0</span>,a,ans=<span class="number">0</span>,tmp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">a+=last;</span><br><span class="line">tmp=a/k;</span><br><span class="line">a%=k;</span><br><span class="line"><span class="keyword">if</span>(tmp*k&lt;last)&#123;</span><br><span class="line"><span class="comment">//如果当天扔的小于昨天剩下的，也要强制扔去</span></span><br><span class="line">++tmp;</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=tmp;</span><br><span class="line">last=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(last)++ans;<span class="comment">//如果最后还剩下，就直接装包扔掉</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="E">E. Getting Deals Done</h3>pending---<h3 id="F">F. Debate</h3>题目大意：给你n（1<=n<=4e5）个人，每个人有一个两位的数字（第一位1代表支持A，0代表不支持A，第二位1代表支持B，代表不支持B）和一个影响值。让你在这些人中选择m个人满足限制条件并且使得这些人的影响力和最大，限制是选择的人中A，B的支持数×2不能小于m。思路：直接贪心就行，把这些人分成四类，11的直接加即可，10和01的按影响力值从大到小排个序，然后按01和10一对一对地选择，最后把剩下的和00类的人混合在一起排个序，从大到小选择直到不能满足限制条件。ac代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a10[maxn],a01[maxn],a0[maxn];</span><br><span class="line"><span class="keyword">int</span> n,l10=<span class="number">0</span>,l01=<span class="number">0</span>,l0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tota=<span class="number">0</span>,tot=<span class="number">0</span>,totb=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>,&amp;t,&amp;tmp);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">11</span>)&#123;</span><br><span class="line">++tot;++tota;++totb;</span><br><span class="line">ans+=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">10</span>)a10[l10++]=tmp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">1</span>)a01[l01++]=tmp;</span><br><span class="line"><span class="keyword">else</span> a0[l0++]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">sort(a10,a10+l10,cmp);</span><br><span class="line">sort(a01,a01+l01,cmp);</span><br><span class="line"><span class="comment">//sort(a0,a0+l0,cmp);</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;l01&amp;&amp;b&lt;l10)&#123;</span><br><span class="line">++tota,++totb;</span><br><span class="line">tot+=<span class="number">2</span>;</span><br><span class="line">ans+=a01[a]+a10[b];</span><br><span class="line">++a,++b;</span><br><span class="line">&#125;</span><br><span class="line">assert(a==l01||b==l10);</span><br><span class="line">assert(tota==totb);</span><br><span class="line"><span class="keyword">while</span>(a&lt;l01)&#123;</span><br><span class="line">a0[l0++]=a01[a];</span><br><span class="line">++a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b&lt;l10)&#123;</span><br><span class="line">a0[l0++]=a10[b];</span><br><span class="line">++b;</span><br><span class="line">&#125;</span><br><span class="line">sort(a0,a0+l0,cmp);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p=tota*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l0;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(p&gt;tot)&#123;</span><br><span class="line">ans+=a0[i];</span><br><span class="line">++tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="G">G. Monsters and Potions</h3>(mid)大模拟题，看懂题意直接模拟就行<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">150</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hero;</span><br><span class="line"><span class="keyword">int</span> Cell[maxn],n,m;</span><br><span class="line">hero Hero[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rally)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cell[maxn];</span><br><span class="line"><span class="keyword">static</span> hero h[maxn];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> ok[maxn];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cell[i]=Cell[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)h[i]=Hero[i],ok[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;m;++p)&#123;</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ok[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(h[i].x==rally)&#123;</span><br><span class="line">id=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(h[i].x&lt;rally)&#123;</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">move</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> hp=h[i].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&lt;=rally;++j)&#123;</span><br><span class="line">hp+=cell[j];</span><br><span class="line"><span class="keyword">if</span>(hp&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">move</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">move</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&lt;=rally;++j)cell[j]=<span class="number">0</span>;</span><br><span class="line">id=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">move</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> hp=h[i].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&gt;=rally;--j)&#123;</span><br><span class="line">hp+=cell[j];</span><br><span class="line"><span class="keyword">if</span>(hp&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">move</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">move</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&gt;=rally;--j)cell[j]=<span class="number">0</span>;</span><br><span class="line">id=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">ans[p]=id;</span><br><span class="line">ok[id]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rally);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[j],j==m<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;Hero[i].x,&amp;Hero[i].y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Cell[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(solve(i))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="H">H. BerOS File Suggestion</h3>(easy)题目大意：给你n个字符串（1<=n<=10000),字符串长度小于9，只包括小写字母、数字和‘.'，然后是q（1<=q<=50000)，每次给一个字符串，问有多少个字符串的子串是当前的询问，如果有，输出任意一个。我觉得直接拿字典树搞就行，但是要注意一个子串会在同一个字符串中多次出现，但是**计数只能记一次**！ac代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10000</span>+<span class="number">1</span>][<span class="number">8</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n,q,ans,ans_id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> indx,num,last_str;</span><br><span class="line"><span class="comment">//last_str 记录上次插入的字符串，避免一个字符串多次插入</span></span><br><span class="line">node* next[<span class="number">37</span>];</span><br><span class="line">node(<span class="keyword">int</span> id)&#123;</span><br><span class="line">num=<span class="number">0</span>;indx=id,last_str=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line">&#125;</span><br><span class="line">~node()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">37</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(next[i])<span class="keyword">delete</span> next[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;*root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'.'</span>)<span class="keyword">return</span> <span class="number">36</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)<span class="keyword">return</span> ch-<span class="string">'0'</span>+<span class="number">26</span>;</span><br><span class="line"><span class="keyword">return</span> ch-<span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">node* p=root;</span><br><span class="line"><span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line"><span class="keyword">int</span> x=getid(buf[id][i]);</span><br><span class="line"><span class="keyword">if</span>(!p-&gt;next[x])p-&gt;next[x]=<span class="keyword">new</span> node(id);</span><br><span class="line">p=p-&gt;next[x];</span><br><span class="line"><span class="keyword">if</span>(p-&gt;last_str!=id)&#123;</span><br><span class="line">++p-&gt;num;</span><br><span class="line">p-&gt;last_str=id;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">node* p=root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=getid(buf[n][i]);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[x])p=p-&gt;next[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=p-&gt;num;</span><br><span class="line">ans_id=p-&gt;indx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">new</span> node(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf[i]);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;++j)insert(i,j,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf[n]);</span><br><span class="line">query(<span class="built_in">strlen</span>(buf[n]));</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"0 -\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>,ans,buf[ans_id]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>---<h3 id="I">I. Privatization of Roads in Berland</h3>pending---<h3 id="J">J. Streets and Avenues in Berhattan</h3>pending---<h3 id="K">K. Video Posts</h3><p>简单的一道签到题，题目大意就是给你n个数，然后划分成k块，让每一块的和都相等，不能划分就输出”No”<br>限制很强，所以直接搞就行。</p><p>ac代码：</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>+<span class="number">100</span>],ans[<span class="number">100000</span>+<span class="number">100</span>],n,sum,k,ava;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">ava=sum/k;</span><br><span class="line"><span class="keyword">if</span>(sum%k)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;n&amp;&amp;a[i]&lt;ava)&#123;</span><br><span class="line">a[i]+=a[j];</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]==ava)ans[tot++]=j-i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(solve())&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==k<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><p><h3 id="L">L. Odd Federalization</h3><br>pending</p><hr><p><h3 id="M">M. Algoland and Berland</h3>pending</p><hr><p style="text-align:center;font-size:28px;color:red">**END**</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这套题目难度适中吧，&lt;del&gt;只不过我们队还没做到自己的最好，自闭了好几个小时的题目竟然是水题&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assets.codeforces.com/rounds/1070/statements-9762-en.pdf&quot; target=&quot;_blank&quot;&gt;题目pdf链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1070&quot; target=&quot;_blank&quot;&gt;codeforce提交链接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="平时训练の补题" scheme="https://yanghaku.github.io/categories/%E5%B9%B3%E6%97%B6%E8%AE%AD%E7%BB%83%E3%81%AE%E8%A1%A5%E9%A2%98/"/>
    
    
      <category term="codeforces" scheme="https://yanghaku.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="https://yanghaku.github.io/2019/05/20/my-first-blog/"/>
    <id>https://yanghaku.github.io/2019/05/20/my-first-blog/</id>
    <published>2019-05-20T00:30:00.000Z</published>
    <updated>2019-05-20T00:52:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>从现在开始，2019.5.20，我将拥有自己的博客了。</p><p>对我来说写博客的用处有一下几点：</p><a id="more"></a><ol><li>每天总结自己做过的题目，加深思考。</li><li>为自己写过的代码做备份，之前一直保存在本地，虽然都用文件夹做了分类，但是还是查找不方便，而且有时又懒得保存。</li><li>克服自己的懒惰，到了现在，看了自己的github，自己已经有半年没有好好写代码了，不仅仅是手懒，脑子也变得懒了，记得前几天教练还说过：我们已经停止了思考。对，就是停止了思考！现在的程度，是对许多的算法都知道，但是却不能静下心来仔细研究其中的原理和更深层的应用。没有了思考，也就没有了提高，只靠板子是做不了题的！</li></ol><p>所以从此，加油，克服自己的懒惰，才能提高！</p><hr><p>博客名字以后再想吧……</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从现在开始，2019.5.20，我将拥有自己的博客了。&lt;/p&gt;
&lt;p&gt;对我来说写博客的用处有一下几点：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
