<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YangBo</title>
  
  <subtitle>奋斗才能拥有最美丽的人生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanghaku.github.io/"/>
  <updated>2020-01-30T12:21:09.616Z</updated>
  <id>https://yanghaku.github.io/</id>
  
  <author>
    <name>杨博</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Xamarin学习1 -- 概念篇</title>
    <link href="https://yanghaku.github.io/2020/01/29/Xamarin%E5%AD%A6%E4%B9%A01%E6%A6%82%E5%BF%B5%E7%AF%87/"/>
    <id>https://yanghaku.github.io/2020/01/29/Xamarin%E5%AD%A6%E4%B9%A01%E6%A6%82%E5%BF%B5%E7%AF%87/</id>
    <published>2020-01-29T08:46:00.000Z</published>
    <updated>2020-01-30T12:21:09.616Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍了 Xamarin 中 Xamarin.forms , Xamarin.Android, Xamarin.iOS 的区别和联系，并且搭建环境和创建第一个 Xamarin.forms 应用并运行调试。</p><a id="more"></a><h3 id="Xamarin"><a href="#Xamarin" class="headerlink" title="Xamarin"></a>Xamarin</h3><p>Xamarin 是一个开源平台，用于通过 .NET 构建适用于 IOS，Android 和 Windows 的新式应用程序。是一个抽象层，可用于管理共享代码与基础平台代码的通信。使开发人员能够跨平台共享应用程序，允许开发人员以一种语言编写所有的业务逻辑，但是在每个平台上各自实现外观等。</p><p>说白了就是共享底层逻辑的 C# 的代码，并且创建各自的UI, 使得一个工程开发能够多个平台使用。</p><p><img src="1.png" alt="1.png"></p><p>然后就是 Xamarin 的结构：</p><p><img src="xamarin-architecture.png" alt="xamarin-architecture.png"></p><h3 id="Xamarin-Android"><a href="#Xamarin-Android" class="headerlink" title="Xamarin.Android"></a>Xamarin.Android</h3><p>Xamarin.Android 是将 C# 编译为中间语言，然后在程序运行的时候，通过即时编译（<strong>JIT</strong>）编译成本机程序集（类似于java虚拟机的那种）。</p><h3 id="Xamarin-iOS"><a href="#Xamarin-iOS" class="headerlink" title="Xamarin.iOS"></a>Xamarin.iOS</h3><p>Xamarin.iOS 是将应用程序完全编译成本机的ARM程序集代码（完全的静态编译）。</p><p>Xamarin.Android 和 Xamarin.iOS 其实就是两个单独的工程，前者是专门对于Android开发的，后者是专门对于iOS开发的工程。但是Xamarin不是跨平台的吗？ 这个时候就用到了 <strong>Xamarin.Forms</strong> 了！</p><h3 id="Xamarin-Forms"><a href="#Xamarin-Forms" class="headerlink" title="Xamarin.Forms"></a>Xamarin.Forms</h3><p>Xamarin.Forms 是一个开源的 UI 框架，允许开发者写一种UI布局与设计，然后根据不同的平台渲染成不同的UI控件(实现了跨平台的UI开发)</p><p><img src="xamarin-forms-architecture.png" alt="xamarin-forms-architecture.png"></p><p>上图中的 Xamarin.Forms Platform Renderer 就是做这种事情的。</p><p>就像官网文档说的：</p><blockquote><h4 id="Who-Xamarin-Forms-is-for"><a href="#Who-Xamarin-Forms-is-for" class="headerlink" title="Who Xamarin.Forms is for"></a>Who Xamarin.Forms is for</h4><p>Xamarin.Forms is for developers with the following goals:</p><ul><li>Share UI layout and design across platforms.</li><li>Share code, test and business logic across platforms.</li><li>Write cross-platform apps in C# with Visual Studio.</li></ul></blockquote><h3 id="以上的关系总结"><a href="#以上的关系总结" class="headerlink" title="以上的关系总结"></a>以上的关系总结</h3><p> Xamarin.Android 和 Xamarin.iOS  (其实还有Xamarin.Mac , Xamarin.UWP，Xamarin.tvOS 等) 这些都是Xamarin里的具体的工程， 专门对应于具体的平台里的，可以单独开发。</p><p>而Xamarin.Forms 是用于跨平台的，可以实现同时开发Android和iOS和UWP 等，将一个共享的里的分别渲染到具体的工程里去，实现大部分的UI和逻辑代码共享。</p><p>比如在VS2019 里面创建一个Xamarin项目的时候，可以看到非常多的选项：</p><p><img src="2.png" alt="2.png"></p><p>第一个Xamarin.Forms 就是一个跨平台的方案，当在Xamarin forms创建的时候勾选这Android和iOS的时候(因为没有装UWP的开发环境，所以只选了这两个)，项目的结构就会如下：</p><p><img src="3.png" alt=""></p><p>也就是说， Xamarin.Forms 包含了其他的工程，而像 Xamarin.Android 这种既可以是独立开发的工程，也可以当做Xamarin.Forms 里的一部分通过Xamarin.Forms 一起开发。</p><p>所以说清楚了这些之后，官网上的那些文档也就不觉得混乱了， 想学哪一块就可以针对性地学习了。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>操作系统 ： win10</p><p>IDE： visual Studio 2019 （刚下载的）</p><p>如果只需要Android和iOS开发的话，只要在vs installer 上选择移动开发的负载下载即可</p><p><img src="4.png" alt=""></p><p>安卓需要java SDK 8， Android SDK 和安卓模拟器 这三个东西vs都给自动装好了.</p><p>其中jdk8自动被安装才了“C:\Program Files\Android\jdk\microsoft_dist_openjdk_1.8.0.25”.</p><p>Android SDK 装在了 “C:\Program Files (x86)\Android\android-sdk” （当然，可以自己设置）</p><p>然后安卓的模拟器就是自动保存在了自己用户文件夹下的 “.Android” 里面（这个需要自己安装设备，具体在下文）</p><blockquote><p>安卓模拟器有硬件加速，运行之前需要在 “控制面板”-&gt; “程序与功能” -&gt;  左栏 “启用或关闭windows功能” -&gt;  “windows虚拟机程序监控平台” 勾选上， 否则每次运行之前都会有一个警告。</p></blockquote><h3 id="第一个-Xamarin-Forms-工程"><a href="#第一个-Xamarin-Forms-工程" class="headerlink" title="第一个 Xamarin.Forms 工程"></a>第一个 Xamarin.Forms 工程</h3><p>打开vs， 新建项目，在框里搜索 Xamarin， 点击选中 Xamarin.forms, 然后设置项目名称，目录等， 然后点创建。 之后选择空白的模版， 平台勾选Android和iOS （有环境的也可以勾选UWP试试），然后就创建完成。</p><p>项目结构：<img src="3.png" alt="1" style="zoom:80%;" /></p><p>其中XamarinApp1.Android 就是对应的生成安卓的工程， XamarinApp1.iOS 就是对应的iOS的工程。</p><p>在MainPage.xaml 中编辑，把 “Welcome …” 换成 “hello World” （程序猿开发第一步嘛），然后就是运行了。</p><h3 id="Xamarin-Android-的运行调试"><a href="#Xamarin-Android-的运行调试" class="headerlink" title="Xamarin.Android 的运行调试"></a>Xamarin.Android 的运行调试</h3><p>运行安卓之前需要安装安卓的模拟器，VS的安卓工具里有两个挺重要的工具：Android SDK管理器和 Android 设备管理器。</p><p>点击工具 -&gt; Android -&gt; Android SDK 管理器</p><p>我这上面是下载的默认的 安卓SDK9; 设置的图片：</p><p><img src="sdk1.png" alt="sdk1"></p><p><img src="sdk2.png" alt="sdk2"></p><p>Android SDK 有了之后，就安装对应的设备就行了。点击 工具 -&gt; Android -&gt; Android Device Manager </p><p>点击新建（新建一个安卓虚拟设备） 操作系统要选择已经装好的sdk对应的版本， <strong>处理器选择 x86（官网说x86比x86_64实际会快，而且可以硬件加速）</strong> ，其他可以不用多设置（以后可以再改嘛，先能运行再说）， 点击创建即可。</p><p><img src="5.png" alt=""></p><p>创建完成后，在上面的工具栏里，选择需要运行的Android和对应的设备，点击运行，即可完成</p><p><img src="6.png" alt=""></p><p>运行截图：</p><p> <img src="run.png" alt="run.png"></p><p>到此第一步完成，Android上部署成功！</p><h3 id="Xamarin-iOS-运行调试"><a href="#Xamarin-iOS-运行调试" class="headerlink" title="Xamarin.iOS 运行调试"></a>Xamarin.iOS 运行调试</h3><p>Xamarin.iOS 调试需要iOS真机， 如果是模拟器也需要MAC系统才行（贫穷限制了开发人员的学习）。</p><p>找了一圈，发现了一个方案： windows装 MAC虚拟机，然后再MAC上装模拟器和VS，<a href=" https://www.cnblogs.com/banluduxing/p/7430059.html " target="_blank">详情</a></p><p>可以实现但是太麻烦，就不瞎折腾了。</p><p>这个跨平台是挺棒，但是不代表着学习了Xamarin就会了Android和iOS的开发， 每个平台的特性都需要了解的。iOS 系统的很多特性都不了解是写不出来高质量的程序的，甚至还得要求开发者掌握一些 Object-C 的语法 。所以说没有接触使用过iOS的我果断放弃啦..</p><p>所以对于我个人来说，往后的学习可能只是限制在Xamarin.Android， 而不是上面的跨平台特性（没有其他平台的需求）。 如果只学习 Android开发，用java入门更好，但是多学点新的东西不也很刺激么hh</p><blockquote><p>以上仅仅是我个人的理解，不一定是完全正确的！！</p><p> 如果有错误请评论指出，谢谢！</p></blockquote><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><a href=" https://docs.microsoft.com/zh-cn/xamarin/ " target="_blank">官网Xamarin文档</a></li><li><a href=" https://www.cnblogs.com/zpldream/p/10742030.html " target="_blank"> Xamarin.Form与Xamarin.Android或Xamarin.IOS的区别简述</a></li><li><a href="https://www.jianshu.com/p/d8c507ad244a" target="_blank">写给 iOS 程序员的 Xamarin 入门教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍了 Xamarin 中 Xamarin.forms , Xamarin.Android, Xamarin.iOS 的区别和联系，并且搭建环境和创建第一个 Xamarin.forms 应用并运行调试。&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
      <category term="Xamarin" scheme="https://yanghaku.github.io/tags/Xamarin/"/>
    
      <category term="Android" scheme="https://yanghaku.github.io/tags/Android/"/>
    
      <category term="iOS" scheme="https://yanghaku.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>.NET初学概览</title>
    <link href="https://yanghaku.github.io/2020/01/29/NET%E6%A6%82%E8%A7%88/"/>
    <id>https://yanghaku.github.io/2020/01/29/NET%E6%A6%82%E8%A7%88/</id>
    <published>2020-01-29T08:46:00.000Z</published>
    <updated>2020-01-30T05:24:11.567Z</updated>
    
    <content type="html"><![CDATA[<p>主要是对 .NET Core,  .NET Standard,  .NET framework  和 Xamarin 的介绍和区分</p><p>并且介绍一下其中的ASP.NET,  UWP， XAMARIN 等</p><p>然后就是 .NET 的未来： .NET 5  （2019年5月宣布的下一代的版本），将把前面这些运行时全部合为一体</p><p>以前刚开始听说 .NET 的时候，我只知道 .NET framework , 然后昨天看了一眼官网的 .NET 入门学习的时候吗，又看到了 .NET Core,  然后各种名词接踵而来，有点懵，所以就总结了一下下。</p><a id="more"></a><p>首先就是当下的框架图：</p><p><img src="1.png" alt="1.png"></p><h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><p>广义的 .NET 是一个通用的开发平台，能够<strong>跨语言</strong>，<strong>跨平台</strong> ，能够支持跨多个平台的方案</p><p>.NET 开发可以实现包括 .NET Framework、.NET Core 和 Mono。 .NET 的所有实现都有一个名为 .NET Standard 的通用 API 规范。</p><blockquote><p> .NET 与 java 对比理解：</p><p>.NET 与 java有很多相似的地方，两者都是<strong>即时编译语言（JIT）</strong>， 项目编译生成的文件不是具体的机器码，而是中间语言。 在java里面叫做字节码（bytecode）， 而在 .NET里面叫做<strong>中间语言（Common Intermediate Language，简称 IL）</strong>，java官方运行环境是java的虚拟机JRE（Java Runtime Environment）， 而在 .NET 官方运行环境叫做公共语言运行时<strong>（Common Language Runtime， 简称CLR）</strong> </p><p>这是 .NET 跨语言，跨平台的基础</p></blockquote><p>跨语言： c#， f#， VB.NET  这些面向 .NET 的都可以</p><p>跨平台： 开发 Windows，Linux，macOS，iOS，Android，tvOS，watchOS 和 WebAssembly </p><h3 id="NET-framework"><a href="#NET-framework" class="headerlink" title=".NET framework"></a>.NET framework</h3><p>传统的 .NET framework 是以一种采用CLR 为基础，支持多种语言（c#，f#，VB.NET, c++，Python等）的开发。 这也是我们用到的最多最熟悉的 .NET ,  这个缺点就是不能跨平台，只能在windows上用。一般就是用来做桌面应用程序和ASP.NET的.</p><h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p>主要是针对windows，linux，macOS，服务器和控制台应用程序的跨平台 .NET 实现</p><p>它支持四种应用程序：控制台，ASP.NET Core, 云 和通用windows平台( UWP )</p><blockquote><p> 需要注意的是: 尽管微软把 .NET Core作为.NET未来的发展方向，但 .NET Core和 .NET Framework 仍然是两个独立的产品。.NET Framework也会继续更新和维护。</p><p>.NET Core 不再是windows 专门的，在其他平台也可以用。 就是为了跨平台而做的，不是windows的一个组件了。</p></blockquote><h3 id="NET-Standard"><a href="#NET-Standard" class="headerlink" title=".NET  Standard"></a>.NET  Standard</h3><p>.NET Standard 是一组由.NET 实现的基本的API集。 是一个进一步实现跨平台跨设备的代码共享。其实是未来 .NET的核心，一切基于它来实现代码共享。</p><blockquote><p> .NET Standard 和 .NET 之间 相当于html 规范和 浏览器之间的关系，后者是前者的实现。</p></blockquote><h3 id="Xamarin-与-Mono"><a href="#Xamarin-与-Mono" class="headerlink" title="Xamarin 与 Mono"></a>Xamarin 与 Mono</h3><p>Mono是 .NET 开源之前的一个跨平台的方案，是由Xamarin公司主持的开源项目，可以运行于Linux等其他平台 （于2016年被微软收购）。相当于实现了各个平台上的 .NET 的公共语言运行时（CLR）。</p><p>现在主要运用在移动设备，许多著名的游戏引擎比如Unity3D也包含着这个技术。</p><p>对于IOS和Android 应用程序，Xamarin 将 .NET 技术代入里面， 成为唯一一个能够提供跨iOS，Android和windowsPhone 的单一语言平台。</p><h4 id="ASP-NET-和-ASP-NET-Core"><a href="#ASP-NET-和-ASP-NET-Core" class="headerlink" title="ASP.NET 和 ASP.NET Core"></a>ASP.NET 和 ASP.NET Core</h4><p>这两个只是以上框架里的一个小组件，用于开发Web应用程序。</p><p>然后两个的区别就是ASP.NET 是 .NET framework 里的组件， 只有windows版本的API</p><p>而ASP.NET Core 是 .NET Core 的组件，是对于跨平台准备的，是 ASP.NET 的跨平台版本。</p><p>所以说以上这么多的名词，都是因为不断进化产生的，从只有一个 .NET framework 只支持windows平台，到后来的跨平台的方案，都在慢慢发展来的。</p><h3 id="三个框架与应用总结"><a href="#三个框架与应用总结" class="headerlink" title="三个框架与应用总结"></a>三个框架与应用总结</h3><p>所以再回顾一下上面的那个图片:</p><p><img src="1.png" alt="1.png"></p><p>现在主要的三个框架实现</p><p>.NET Framework （最新到4.8版本）主要是对windows平台的</p><p>.NET Core （最新到3.1版本）可以跨平台，主要是一些控制台设备，如linux，windows，macOS等</p><p>XAMARIN 主要是针对移动设备的，比如Android，iOS等</p><blockquote><p>官网文档上说的：</p><p>There are various implementations of .NET. Each implementation allows .NET code to execute in different places—Linux, macOS, Windows, iOS, Android, and many more.</p><ol><li><strong>.NET Framework</strong> is the original implementation of .NET. It supports running websites, services, desktop apps, and more on Windows.</li><li><strong>.NET Core</strong> is a cross-platform implementation for running websites, services, and console apps on Windows, Linux, and macOS.   .NET Core is open source on GitHub.</li><li><strong>Xamarin/Mono</strong> is a .NET implementation for running apps on all the major mobile operating systems, including iOS and Android.</li></ol><p>.NET Standard is a formal specification of the APIs that are common across .NET implementations. This allows the same code and libraries to run on different implementations.</p></blockquote><h3 id="NET-5-未来的展望"><a href="#NET-5-未来的展望" class="headerlink" title=".NET 5 未来的展望"></a>.NET 5 未来的展望</h3><p>现在这么多的框架什么的，到了 .NET5 将会融为一体。</p><p><strong>.NET 5 将会融合 .NET Framework ,  .NET Core,  Mono, Xamarin 等优点构建出一个统一的 .NET 平台，开发人员可以使用 C#， VB.NET,  F# 等语言，使用相同的API 开发针对任何系统，任何架构，任何形态的应用程序，并且代码和库均可通过 .NET Standard 共享 。</strong></p><p>也就是说，到了那个时候开发出一个应用程序，就可以全平台通吃，只要有一个 .NET, 就能一次开发出适用于Windows，Linux，macOS，iOS，Android，tvOS，watchOS 和 WebAssembly  等所有平台的应用程序了。</p><p><img src="3.jpeg" alt="3.jpeg"></p><p>希望早日到来，让俺们这些开发人员感受感受叭。</p><p>2019年5月微软宣布的.NET5， 将会在 2020年11月发布</p><p><img src="dotnet_schedule.png" alt=""></p><p>参考链接：</p><ul><li><p><a href = "https://www.cnblogs.com/wer-ltm/p/8776846.html" target="_blank">.NET:持续进化的统一开发平台</a></p></li><li><p><a href="https://www.cnblogs.com/frank0812/p/9845518.html" target="_blank">.NET Core和.NET Standard有什么不同</a></p></li><li><p><a href="https://www.cnblogs.com/Rwing/p/introducing-net-5.html" target="_blank">(翻译)正式宣布 .NET 5</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是对 .NET Core,  .NET Standard,  .NET framework  和 Xamarin 的介绍和区分&lt;/p&gt;
&lt;p&gt;并且介绍一下其中的ASP.NET,  UWP， XAMARIN 等&lt;/p&gt;
&lt;p&gt;然后就是 .NET 的未来： .NET 5  （2019年5月宣布的下一代的版本），将把前面这些运行时全部合为一体&lt;/p&gt;
&lt;p&gt;以前刚开始听说 .NET 的时候，我只知道 .NET framework , 然后昨天看了一眼官网的 .NET 入门学习的时候吗，又看到了 .NET Core,  然后各种名词接踵而来，有点懵，所以就总结了一下下。&lt;/p&gt;
    
    </summary>
    
    
      <category term=".NET学习" scheme="https://yanghaku.github.io/categories/NET%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term=".NET" scheme="https://yanghaku.github.io/tags/NET/"/>
    
      <category term="Xamarin" scheme="https://yanghaku.github.io/tags/Xamarin/"/>
    
      <category term=".NET Core" scheme="https://yanghaku.github.io/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>失踪半年人口回归</title>
    <link href="https://yanghaku.github.io/2020/01/29/%E5%A4%B1%E8%B8%AA%E5%8D%8A%E5%B9%B4%E4%BA%BA%E5%8F%A3%E5%9B%9E%E5%BD%92/"/>
    <id>https://yanghaku.github.io/2020/01/29/%E5%A4%B1%E8%B8%AA%E5%8D%8A%E5%B9%B4%E4%BA%BA%E5%8F%A3%E5%9B%9E%E5%BD%92/</id>
    <published>2020-01-29T03:00:00.000Z</published>
    <updated>2020-01-29T13:29:00.195Z</updated>
    
    <content type="html"><![CDATA[<p>今天是大年初五，2010.1.29， 在家连续玩了四天了，要开始继续学习了呀。</p><p>自从电脑从linux 换成 windows ，就没有再重新配置hexo的环境（说白了太懒了），昨天折腾了一整天，把电脑里的文件整理、清理，升级或者卸载不用的软件，外加更新几个linux的虚拟机，整整折腾了一整天。昨天又下了nodejs，重新搞了一下hexo，继续写吧，每天学学学，总得留下什么吧。</p><p>还是没有养成写点东西的习惯，许多东西学得快，忘得也快。还有一些算法或者什么思想啦，只在脑中形成一些概念而已，没有经过系统的思考，慢慢也会忘掉的。记笔记尤其是写markdown，总能梳理出一个清晰的思路来。就比如过年之前花费了十几天<a id="more"></a>学习了java的SSM框架，虽然学了写了好多，但是现在就感觉全部忘掉了····· 也许是记忆力也出了点小问题叭。不管怎样，我还是要记下来，每天都记一记。</p><p>首先还是要好好反思自己，作为一名现役的ACM队员，19年下半年做的题量还不如我大一的一个月做的多，这是非常不正常的，银川回来之后，原想努把力去上海冲个金，结果才拿了铜，ccpc-final和ec-final相继打铁。想想也是太丢人了，我的状态不对呀！ 及时改变自己吧，生活还是可以回到正轨上来的。下个赛季，大四再打一个赛季，把在赛场上丢的脸捡回来，证明自己。</p><p>确实不应该，放弃了最好的一个学期去做了自己都知道没有结果的事情。冷静下来一想，是自己没有把握好度，失去了理智像飞蛾扑火般，不管怎样，都是一段很好的回忆叭。 自己也是在不断成长的呢，明白了许多的道理，看到了自己以前没有看到的方面，知道了自己的不足，也算是一种提高，一种阅历吧。</p><p>总之，悟已往之不谏，知来者之可追！！</p><p>1000题的小目标还没开始做呢，不要老想着明天啦，明日复明日，明日何其多嘛，现在就开始！</p><p>我的数论模版还没整理完呢，希望能在开学前整理完~~</p><p>java的SSM框架的工程才写了一半，希望也能抽空写完~~（idea intellij 太好用了，吹爆！jb-mono字体也很棒哦）</p><p>昨天晚上突然看了一眼 .net , 学着用c#写了一个hello world，感觉还挺有意思，希望能有空学一学~~</p><p>当然 linux内核的源码也想学学，这本书放桌面上几个月了还没看……</p><p>还是挺多东西学习的，继续加油叭，奥利给！！</p><p>奥利给！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是大年初五，2010.1.29， 在家连续玩了四天了，要开始继续学习了呀。&lt;/p&gt;
&lt;p&gt;自从电脑从linux 换成 windows ，就没有再重新配置hexo的环境（说白了太懒了），昨天折腾了一整天，把电脑里的文件整理、清理，升级或者卸载不用的软件，外加更新几个linux的虚拟机，整整折腾了一整天。昨天又下了nodejs，重新搞了一下hexo，继续写吧，每天学学学，总得留下什么吧。&lt;/p&gt;
&lt;p&gt;还是没有养成写点东西的习惯，许多东西学得快，忘得也快。还有一些算法或者什么思想啦，只在脑中形成一些概念而已，没有经过系统的思考，慢慢也会忘掉的。记笔记尤其是写markdown，总能梳理出一个清晰的思路来。就比如过年之前花费了十几天
    
    </summary>
    
    
      <category term="日常碎碎念" scheme="https://yanghaku.github.io/categories/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>2019东北地区四省赛</title>
    <link href="https://yanghaku.github.io/2019/05/22/2019%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%9B%9B%E7%9C%81%E8%B5%9B/"/>
    <id>https://yanghaku.github.io/2019/05/22/2019%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%9B%9B%E7%9C%81%E8%B5%9B/</id>
    <published>2019-05-22T06:00:00.000Z</published>
    <updated>2019-06-04T13:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102220/attachments/download/8734/the-13th-northeast-collegiate-programming-contest-en.pdf" target="_blank">题目pdf链接</a></p><p><a href="https://codeforces.com/gym/102220" target="_blank">提交链接(codeforces)</a></p><a id="more"></a><p><del>在现场(我)写崩了C题，虽然最后救回来了（队友带飞），但是还差一点，差一题才到金</del></p><hr><p>概览：</p><ul><li><a href="#A">A. Apple Business</a></li><li><a href="#B">B. Balanced Diet</a></li><li><a href="#C">C. Line-line Intersection</a></li><li><a href="#D">D. Master of Data Structure</a></li><li><a href="#E">E. Minimum Spanning Tree</a></li><li><a href="#F">F. Mini-game Before Contest</a></li><li><a href="#G">G. Radar Scanner</a></li><li><a href="#H">H. Skyscraper</a></li><li><a href="#I">I. Temperature Survey</a></li><li><a href="#J">J. Time Limit</a></li></ul><hr><h3 id="A">A. Apple Business</h3><p>pending（暂时不会）</p><hr><hr/><h3 id="B">B. Balanced Diet</h3>题意：给你n个糖果，每个糖果有价值$a_i$,属于种类$b_i$,让选择一些糖果，使得 (总价值/选择种类最大的个数) 尽量大，第j种糖果如果选择，选择的个数就应该大于等于$l_j$,(1<j<=m)思路：枚举分母(可以证明分母的取值只能是l[]中的取值)，对每一种糖果按照价值从大到小排个序，当分母枚举到l[j]的时候，就将当前种类糖果的前l[j]个值加起来，如果还有剩下的，就将这个j放入一个队列中，等枚举到l[i]>l[j]的时候，就将队列中的值遍历一遍，将之前没有加完的再加上。（需要对分母排个序，让分母升序枚举）。每次更新最大的答案即可（会爆int，不要忘取gcd）。具体看代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> l[x]&lt;l[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;ve[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">int</span> p[maxn],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l[i]);</span><br><span class="line">r[i]=i;</span><br><span class="line">ve[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">sort(r,r+m,cmpr);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">ve[b<span class="number">-1</span>].push_back(ll(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)sort(ve[i].<span class="built_in">begin</span>(),ve[i].<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">ll ans1=<span class="number">0</span>,ans2=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,k;i&lt;m;i=k)&#123;</span><br><span class="line"><span class="keyword">int</span> id=r[i];</span><br><span class="line"><span class="keyword">int</span> num=q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">while</span>(num--)&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line"><span class="keyword">while</span>(p[x]&lt;l[id]&amp;&amp;p[x]&lt;ve[x].<span class="built_in">size</span>())&#123;</span><br><span class="line">sum+=ve[x][p[x]];</span><br><span class="line">++p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[x]&lt;ve[x].<span class="built_in">size</span>())q.push(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k=i;</span><br><span class="line"><span class="keyword">while</span>(k&lt;m&amp;&amp;l[r[k]]==l[id])&#123;</span><br><span class="line"><span class="keyword">int</span> len=ve[r[k]].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">min</span>(l[r[k]],len);++j)sum+=ve[r[k]][j];</span><br><span class="line"><span class="keyword">if</span>(l[r[k]]&lt;len)&#123;</span><br><span class="line">q.push(r[k]);</span><br><span class="line">p[r[k]]=l[r[k]];</span><br><span class="line">&#125;</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans1*l[id]&lt;ans2*sum)&#123;</span><br><span class="line">ans1=sum;</span><br><span class="line">ans2=l[id];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll d=__gcd(ans1,ans2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans1/d&lt;&lt;<span class="string">'/'</span>&lt;&lt;ans2/d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="C">C. Line-line Intersection</h3>题目大意： 给你n个直线，问有多少对直线有公共点。思路：直接用容斥原理， ans=n个直线的对数-平行的直线对+平行的直线中重合的对数虽然思路好想，但是这个不好写。<p>第一种写法，将每一个直线化成$y=kx+b$的形式（没有k的单独放一起），然后将这些直线按照k和b排个序，最后计算相同的个数即可<br>这种写法最重要的是要处理精度问题，<strong>因为k有可能会到 1e-9，所以eps需要设置在1e-11左右才能分辨！！！</strong><br><del>(但是在现场赛我写的忘了加sort了，怎么调都不对，太菜了～～）</del><br>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> k,b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> T&amp; x)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(k-x.k)&lt;eps)<span class="keyword">return</span> b&lt;x.b;</span><br><span class="line"><span class="keyword">return</span> k&lt;x.k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;p[<span class="number">100000</span>+<span class="number">100</span>],p2[<span class="number">100000</span>+<span class="number">100</span>];</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">double</span> xx1,yy1,xx2,yy2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">ll n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">ll tot=<span class="number">0</span>,tot1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;xx1,&amp;yy1,&amp;xx2,&amp;yy2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(xx1-xx2)&lt;eps)&#123;</span><br><span class="line">p2[tot1].k=<span class="number">0</span>;</span><br><span class="line">p2[tot1].b=xx1;</span><br><span class="line">++tot1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p[tot].k=(yy2-yy1)/(xx2-xx1);</span><br><span class="line">p[tot].b=yy1-p[tot].k*xx1;</span><br><span class="line">++tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(p,p+tot);</span><br><span class="line">sort(p2,p2+tot1);</span><br><span class="line">ll ans=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;tot&amp;&amp;<span class="built_in">fabs</span>(p[i].k-p[j].k)&lt;eps)++j;</span><br><span class="line">ll leni=j-i;</span><br><span class="line">ans-=leni*(leni<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;i&lt;&lt;"  "&lt;&lt;leni&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;++k)&#123;</span><br><span class="line"><span class="keyword">int</span> kk=k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(kk&lt;j&amp;&amp;<span class="built_in">fabs</span>(p[k].b-p[kk].b)&lt;eps)++kk;</span><br><span class="line">ll lenk=kk-k;</span><br><span class="line">ans+=lenk*(lenk<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"lenk:  "&lt;&lt;lenk&lt;&lt;" "&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">k=kk<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans-=tot1*(tot1<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot1;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;tot1&amp;&amp;<span class="built_in">fabs</span>(p2[i].b-p2[j].b)&lt;eps)++j;</span><br><span class="line">ll len=j-i;</span><br><span class="line">ans+=len*(len<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种写法（标程思路），将直线表示成Ax+By+C=0的形式（注意long long），判断平行就判断A1×B2==A2×B1是否成立即可，平行的时候看C是否相等就行。<br>对于点(x1,y1),(x2,y2), A(x1-x2)+B(y1-y2)=0, 令A=y1-y2,则B=x2-x1, 代入求C即可，计数用map保存就行<br><strong>1.不要忘了斜率比较的时候注意正负</strong><br><strong>2.不要忘了把A，B约分后再求C!!!</strong>，比如 x+y+1=0 和2x+2y+2=0两条直线，虽然c不同，但是其实这是同一条直线</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">K</span>&#123;</span></span><br><span class="line">ll A,B;</span><br><span class="line">K(ll a,ll b):A(a),B(b)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> K&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> A*x.B&lt;x.A*B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> K&amp;x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> A*x.B==x.A*B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">ll A,B,C;</span><br><span class="line">Line(ll a,ll b,ll c):A(a),B(b),C(c)&#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Line&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(A*x.B==B*x.A)<span class="keyword">return</span> C&lt;x.C;</span><br><span class="line"><span class="keyword">return</span> A*x.B&lt;B*x.A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Line&amp; x)<span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(A*x.B!=B*x.A)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> C==x.C;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;K,ll&gt;mp1;</span><br><span class="line"><span class="built_in">map</span>&lt;Line,ll&gt;mp2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">mp1.<span class="built_in">clear</span>();mp2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">int</span> n,a1,a2,b1,b2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">ll ans=n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a1,&amp;b1,&amp;a2,&amp;b2);</span><br><span class="line">K tmp=K(b1-b2,a2-a1);</span><br><span class="line">ll d=__gcd(tmp.A,tmp.B);</span><br><span class="line">tmp.A/=d,tmp.B/=d;</span><br><span class="line">ll c=-tmp.A*a1-tmp.B*b1;</span><br><span class="line"><span class="keyword">if</span>(tmp.B&lt;<span class="number">0</span>)tmp.A=-tmp.A,tmp.B=-tmp.B;</span><br><span class="line">++mp1[tmp];</span><br><span class="line">++mp2[Line(tmp.A,tmp.B,c)];</span><br><span class="line">&#125;</span><br><span class="line">ans=ans*(ans<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp1.<span class="built_in">begin</span>();it!=mp1.<span class="built_in">end</span>();++it)ans-=(it-&gt;y)*((it-&gt;y)<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=mp2.<span class="built_in">begin</span>();it!=mp2.<span class="built_in">end</span>();++it)&#123;</span><br><span class="line">ans+=(it-&gt;y)*((it-&gt;y)<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="D">D. Master of Data Structure</h3>题意：给你一个n（1<=n<=500000)个点的树，初始的点权都是0，然后给你m（1<=m<=2000)个操作，每次操作都是给定两个节点，对这两个节点之间的路径来操作，操作共有七种:1. u v k (1≤u,v≤n,1≤k≤105), for all nodes x∈p(u,v), change wx to wx+k.2. u v k (1≤u,v≤n,1≤k≤108), for all nodes x∈p(u,v), change wx to wx⊕k, where "⊕" denotes the bitwise XOR operation.3. u v k (1≤u,v≤n,1≤k≤108), for all nodes x∈p(u,v), change wx to wx−k. Note that if wx<k, ignore such x.4. u v (1≤u,v≤n), ask for the sum of wx where x∈p(u,v).5. u v (1≤u,v≤n), ask for the bitwise XOR sum of wx where x∈p(u,v).6. u v (1≤u,v≤n), ask for max{wx|x∈p(u,v)}−min{wx|x∈p(u,v)}.7. u v k (1≤u,v≤n,1≤k≤108), ask for min{|wx−k||x∈p(u,v)}.<p>思路：看到这个首先想到的思路就是树链剖分然后线段树来做，但是第7个操作没法维护(可能是我太菜了没法做），然后某一个值改变后区间的异或和我也不会，所以这个方法应该行不通了……<br>首先可以想这样一个问题：如果一个rmq的问题，这个区间非常大，但是操作和询问1e3数量级的，那么是不是可以离散化缩点然后大模拟来做？<br>在树上也一样可以缩点来模拟，首先在一维的时候，所有的操作的线段的端点可以把一个区间分成x份(没有交集)，而其中不是线段端点上的点都是无用的点(即可以跟其他无用点合并），在树上也一样，这些查询的路径端点可以把树分成x份个不相交的线段，设操作的两个端点u，v为关键点，那么树上的划分就是由这些关键点和这些关键点两两LCA组成的，这些点组成一个新树，新树的边就表示线段里被压缩的若干点(可能为0)</p><p>这个新树叫做<strong>虚树</strong>，就是可以将无用的点删去（或压缩）生成的，而且m个关键点时，这些点的LCA会不多于m-1个，（虚树也是看这个题解刚学的，讲解：<a href="https://www.cnblogs.com/zwfymqz/p/9175152.html">链接</a>）因此将数据离线化后建的图节点数是O(m)的，直接大模拟就行(好像只能大模拟）。</p><p>下面还有一个问题，就是对关键点两两LCA是$m^2log(n)$的复杂度，倍增法直接就T了，O(1)的LCA算法我没有试（主要是太菜了不会写），在大腿学长的指点下，才知道O(mlog(n)）就可以解决：将关键点按dfs序排序，两个<strong>相邻</strong>关键点的LCA就属于虚树里面的点，而其他的LCA一定包括在内。（这也就是前面的结论，新增加的点不会超过m-1个）。</p><p>求出所有的关键点之后，就建立一个新图就行了，每个节点与父节点的边就是缩点(<strong>注意为0</strong>)，然后就是大模拟了。</p><p>总复杂度$O(n+mlog(n)+m^2)$。</p><p>ac代码(写的有点丑,历时一天提交17次)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define debug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;</span><br><span class="line"><span class="keyword">if</span>(p1 == pend) &#123;</span><br><span class="line">p1 = buf;</span><br><span class="line">pend = buf + fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(pend == p1) &#123;</span><br><span class="line">IOerror = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(blank(ch = nc()));</span><br><span class="line"><span class="keyword">if</span>(IOerror)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> fastIO::<span class="built_in">read</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxQ=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> op,u,v,k;</span><br><span class="line">&#125;q[maxQ];</span><br><span class="line"><span class="keyword">bool</span> is_key[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn][<span class="number">24</span>],ceng[maxn],n,m,edge_num[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> node[maxn],edge_w[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;old_tree[maxn],tree[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)&#123;</span><br><span class="line">is_key[i]=<span class="number">0</span>;</span><br><span class="line">old_tree[i].<span class="built_in">clear</span>();</span><br><span class="line">tree[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_lca</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(is_key[now])st.push(now);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;old_tree[now].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; son=old_tree[now][i];</span><br><span class="line"><span class="keyword">if</span>(son!=fa[now][<span class="number">0</span>])&#123;</span><br><span class="line">fa[son][<span class="number">0</span>]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;<span class="number">23</span>;++j)fa[son][j]=fa[fa[son][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">ceng[son]=ceng[now]+<span class="number">1</span>;</span><br><span class="line">dfs_lca(son);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ceng[x]&lt;ceng[y])swap(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">22</span>;++i)<span class="keyword">if</span>((ceng[x]-ceng[y])&amp;(<span class="number">1</span>&lt;&lt;i))x=fa[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">22</span>;i&gt;<span class="number">-1</span>;--i)<span class="keyword">if</span>(fa[x][i]!=fa[y][i])x=fa[x][i],y=fa[y][i];</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_tree</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[now].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line"><span class="keyword">int</span>&amp; son=tree[now][i];</span><br><span class="line"><span class="keyword">if</span>(fa[now][<span class="number">0</span>]!=son)&#123;</span><br><span class="line">ceng[son]=ceng[now]+<span class="number">1</span>;</span><br><span class="line">fa[son][<span class="number">0</span>]=now;</span><br><span class="line">dfs_tree(son);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_tree</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!st.empty())st.pop();</span><br><span class="line">ceng[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">23</span>;++i)fa[<span class="number">0</span>][i]=fa[<span class="number">1</span>][i]=<span class="number">0</span>;</span><br><span class="line">is_key[<span class="number">0</span>]=is_key[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">dfs_lca(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x=st.top();st.pop();</span><br><span class="line"><span class="keyword">while</span>(!st.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> y=st.top();st.pop();</span><br><span class="line">is_key[lca(x,y)]=<span class="number">1</span>;</span><br><span class="line">x=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(is_key[i])&#123;</span><br><span class="line">edge_num[i]=<span class="number">0</span>;node[i]=edge_w[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x=fa[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">while</span>(is_key[x]==<span class="number">0</span>)&#123;</span><br><span class="line">x=fa[x][<span class="number">0</span>],++edge_num[i];</span><br><span class="line">&#125;</span><br><span class="line">tree[i].push_back(x);</span><br><span class="line">tree[x].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">ceng[<span class="number">1</span>]=<span class="number">0</span>;fa[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">dfs_tree(<span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)<span class="keyword">if</span>(is_key[i])&#123;</span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;i&lt;&lt;<span class="string">"  fa: "</span>&lt;&lt;fa[i][<span class="number">0</span>]&lt;&lt;<span class="string">"  ceng: "</span>&lt;&lt;ceng[i]&lt;&lt;<span class="string">" edge_num: "</span>&lt;&lt;edge_num[i]&lt;&lt;<span class="string">"  son: "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tree[i].<span class="built_in">size</span>();++j)<span class="built_in">cerr</span>&lt;&lt;tree[i][j]&lt;&lt;<span class="string">' '</span>;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">node[u]+=k;</span><br><span class="line">edge_w[u]+=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">node[u]+=k;</span><br><span class="line">edge_w[u]+=k;</span><br><span class="line">node[v]+=k;</span><br><span class="line">edge_w[v]+=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">node[u]+=k;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(is_key[i])<span class="built_in">cerr</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>&lt;&lt;node[i]&lt;&lt;<span class="string">","</span>&lt;&lt;edge_w[i]&lt;&lt;<span class="string">") "</span>;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">node[u]^=k;</span><br><span class="line">edge_w[u]^=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">node[u]^=k;</span><br><span class="line">edge_w[u]^=k;</span><br><span class="line">node[v]^=k;</span><br><span class="line">edge_w[v]^=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">node[u]^=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_3</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(node[u]&gt;=k)node[u]-=k;</span><br><span class="line"><span class="keyword">if</span>(edge_w[u]&gt;=k)edge_w[u]-=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(node[u]&gt;=k)node[u]-=k;</span><br><span class="line"><span class="keyword">if</span>(edge_w[u]&gt;=k)edge_w[u]-=k;</span><br><span class="line"><span class="keyword">if</span>(node[v]&gt;=k)node[v]-=k;</span><br><span class="line"><span class="keyword">if</span>(edge_w[v]&gt;=k)edge_w[v]-=k;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node[u]&gt;=k)node[u]-=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_4</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">sum=sum+node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sum=sum+edge_w[u]*((<span class="keyword">long</span> <span class="keyword">long</span>)edge_num[u]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">sum=sum+node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sum=sum+edge_w[u]*((<span class="keyword">long</span> <span class="keyword">long</span>)edge_num[u]);</span><br><span class="line">&#125;</span><br><span class="line">sum=sum+node[v];</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sum=sum+edge_w[v]*((<span class="keyword">long</span> <span class="keyword">long</span>)edge_num[v]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">sum=sum+node[u];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_5</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">sum=sum^node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&amp;<span class="number">1</span>)sum=sum^edge_w[u];</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">sum=sum^node[u];</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&amp;<span class="number">1</span>)sum=sum^edge_w[u];</span><br><span class="line">sum=sum^node[v];</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&amp;<span class="number">1</span>)sum=sum^edge_w[v];</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">sum=sum^node[u];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_6</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> maxx=<span class="number">0</span>,minn=<span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[u]);</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,edge_w[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,edge_w[u]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[u]);</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,edge_w[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,edge_w[u]);</span><br><span class="line">&#125;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[v]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[v]);</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,edge_w[v]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,edge_w[v]);</span><br><span class="line">&#125;</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,node[u]);</span><br><span class="line">minn=<span class="built_in">min</span>(minn,node[u]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,maxx-minn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">my_abs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op_7</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u=q[x].u,v=q[x].v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k=q[x].k;</span><br><span class="line"><span class="keyword">if</span>(ceng[u]&lt;ceng[v])swap(u,v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> minV=<span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">while</span>(ceng[u]&gt;ceng[v])&#123;</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[u]-k));</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)minV=<span class="built_in">min</span>(minV,my_abs(edge_w[u]-k));</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u!=v)&#123;</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[u]-k));</span><br><span class="line"><span class="keyword">if</span>(edge_num[u]&gt;<span class="number">0</span>)minV=<span class="built_in">min</span>(minV,my_abs(edge_w[u]-k));</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[v]-k));</span><br><span class="line"><span class="keyword">if</span>(edge_num[v]&gt;<span class="number">0</span>)minV=<span class="built_in">min</span>(minV,my_abs(edge_w[v]-k));</span><br><span class="line">u=fa[u][<span class="number">0</span>];</span><br><span class="line">v=fa[v][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">minV=<span class="built_in">min</span>(minV,my_abs(node[u]-k));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,minV);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">read</span>(t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">read</span>(n);<span class="built_in">read</span>(m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">read</span>(u);<span class="built_in">read</span>(v);</span><br><span class="line">old_tree[u].push_back(v);</span><br><span class="line">old_tree[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">read</span>(q[i].op);<span class="built_in">read</span>(q[i].u);<span class="built_in">read</span>(q[i].v);</span><br><span class="line"><span class="keyword">if</span>(q[i].op==<span class="number">1</span>||q[i].op==<span class="number">2</span>||q[i].op==<span class="number">3</span>||q[i].op==<span class="number">7</span>)<span class="built_in">read</span>(q[i].k);</span><br><span class="line">is_key[q[i].u]=is_key[q[i].v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">init_tree();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].op==<span class="number">1</span>)op_1(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">2</span>)op_2(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">3</span>)op_3(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">4</span>)op_4(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">5</span>)op_5(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">6</span>)op_6(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i].op==<span class="number">7</span>)op_7(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="E">E. Minimum Spanning Tree</h3>温暖の签到题，虽然思路不太好想，但是代码非常好写。题意：给你一棵**树**,将树的边变成新图的节点，原来树中的两个有公共节点的边在新图上变成一条边，边权为原先树上的这两条边的和，求生成的新图的最小生成树。思路：对于原先树的每一个节点，相连的边会两两生成一个新边，也就是在新图上对应着一个完全图，(新图上)完全图的边权是两个节点的和，那么这个的最小生成树就是节点最小的和其他的连接起来形成的。所以，记录每个节点的度数num，连的边的边权和sum，最小的边的权值min，这一个节点生成的新图的最小生成树就是min*(num-1)+(sum-min)。因为原来的图是一棵树，所以生成的新图是许多完全图组合来的(不会交叉)，最后的答案就是每个节点生成的完全图的和即可。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e12</span>;</span><br><span class="line">ll minv[maxn],sum[maxn],num[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,u,v,w;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">minv[i]=inf;</span><br><span class="line">sum[i]=num[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">ll ww=w;</span><br><span class="line">++num[u];</span><br><span class="line">++num[v];</span><br><span class="line">sum[u]+=ww;</span><br><span class="line">sum[v]+=ww;</span><br><span class="line">minv[v]=<span class="built_in">min</span>(minv[v],ww);</span><br><span class="line">minv[u]=<span class="built_in">min</span>(minv[u],ww);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">ans+=(num[i]<span class="number">-2</span>)*minv[i]+sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="F">F. Mini-game Before Contest</h3>题意：给你一个有向图，图上放一枚棋子，让六个人轮流移动，六个人中分成两队，每三人一队，当某个人不能移动的时候这个队就输了。每个队里有想赢的人，也有演员（想自己队输），如果赢(输)不了，也会尽可能达到平局。问棋子从1到n每一点开始，最终的结果是什么。思路： (博弈dp)设$dp[i][j]$为第i个节点上轮到第j个人移动时的最终结果，（设1为A队赢，-1为B队赢，0为平局），则想要A赢的人转移方程为$dp[i][j]=max( dp[v][j+1] )  $其中v为i节点的所有下一个节点，想要B赢的转移方程为$dp[i][j]=min( dp[v][j+1])$（因为每一个决策只能通过下一个人的决策来确定）。 <p>然后就是状态转移更新的问题了： 首先把所有的dp值都赋为0，可以把图反向建边，每个入度为零的节点是可以直接确定的节点（无论怎样决策都是输），然后将这些节点放入队列，以SPFA的方式进行松弛，直到队列为空，因为每个节点只会在1,0，-1之间更新常数次，所以时间复杂度O（n+m）。</p><p>但是还有最后一个问题，就是更新一个状态的复杂度的问题：对于每一个状态，需要遍历所有的后继节点才能获取当前的dp值(复杂度有点高)，可以用三个cnt数组进行优化，记录每个状态后继状态的1,0,-1的数量，这样每次更新就是O（1）的复杂度。对于每个状态，只在出队列的时候更新dp值，同时记录之前的dp值，然后将所有后继状态的cnt值更新即可。</p><p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define debug</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,next;</span><br><span class="line">&#125;edge[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn],n,m;</span><br><span class="line"><span class="keyword">int</span> indegree[maxn],cnt0[maxn][<span class="number">6</span>],cnt1[maxn][<span class="number">6</span>],cnt_1[maxn][<span class="number">6</span>],dp[maxn][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">bool</span> inqueue[maxn][<span class="number">6</span>],vis[maxn],a_win[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">char</span> team[<span class="number">7</span>],action[<span class="number">7</span>],buf[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">head[i]=<span class="number">-1</span>;</span><br><span class="line">indegree[i]=<span class="number">0</span>;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)&#123;</span><br><span class="line">dp[i][j]=<span class="number">0</span>;</span><br><span class="line">inqueue[i][j]=<span class="number">0</span>;</span><br><span class="line">cnt1[i][j]=cnt_1[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">update_dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;cnt1[x][y]&lt;&lt;<span class="string">"  "</span>&lt;&lt;cnt0[x][y]&lt;&lt;<span class="string">"  "</span>&lt;&lt;cnt_1[x][y]&lt;&lt;<span class="string">"  "</span>&lt;&lt;indegree[x]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span>(a_win[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt1[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt0[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt_1[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt0[x][y]&gt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)cnt0[i][j]=indegree[i];</span><br><span class="line"><span class="keyword">if</span>(indegree[i]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)&#123;</span><br><span class="line"><span class="comment">//if(team[j]=='A')dp[i][j]=-1;</span></span><br><span class="line"><span class="comment">//else dp[i][j]=1;</span></span><br><span class="line"><span class="keyword">if</span>(team[j]==<span class="string">'A'</span>)cnt_1[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cnt1[i][j]=<span class="number">1</span>;</span><br><span class="line">q.emplace(i,j);</span><br><span class="line">inqueue[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().x;</span><br><span class="line"><span class="keyword">int</span> y=q.front().y;</span><br><span class="line">q.pop();</span><br><span class="line">inqueue[x][y]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> old=dp[x][y];</span><br><span class="line">dp[x][y]=update_dp(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];~i;i=edge[i].next)&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[i].v;</span><br><span class="line">vis[v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> id=(y+<span class="number">5</span>)%<span class="number">6</span>;</span><br><span class="line"><span class="keyword">bool</span> update=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(old==<span class="number">1</span>)--cnt1[v][id];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(old==<span class="number">0</span>)--cnt0[v][id];</span><br><span class="line"><span class="keyword">else</span> --cnt_1[v][id];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dp[x][y]==<span class="number">1</span>)++cnt1[v][id];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[x][y]==<span class="number">0</span>)++cnt0[v][id];</span><br><span class="line"><span class="keyword">else</span> ++cnt_1[v][id];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(update_dp(v,id)!=dp[v][id] &amp;&amp; inqueue[v][id]==<span class="number">0</span>)&#123;</span><br><span class="line">inqueue[v][id]=<span class="number">1</span>;</span><br><span class="line">q.emplace(v,id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;x&lt;&lt;<span class="string">"   "</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;i&lt;&lt;<span class="string">": "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;++j)<span class="built_in">cerr</span>&lt;&lt;update_dp(i,j)&lt;&lt;<span class="string">' '</span>;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,u;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;edge[i].v,&amp;u);</span><br><span class="line">edge[i].next=head[u];</span><br><span class="line">head[u]=i;</span><br><span class="line">++indegree[edge[i].v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,team,action);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(team[i]==<span class="string">'A'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(action[i]==<span class="string">'0'</span>)a_win[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> a_win[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(action[i]==<span class="string">'0'</span>)a_win[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> a_win[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</span><br><span class="line">buf[i]=<span class="string">'D'</span>;<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[i][<span class="number">0</span>]==<span class="number">1</span>)buf[i]=<span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[i][<span class="number">0</span>]==<span class="number">0</span>)buf[i]=<span class="string">'D'</span>;</span><br><span class="line"><span class="keyword">else</span> buf[i]=<span class="string">'B'</span>;</span><br><span class="line">&#125;buf[n+<span class="number">1</span>]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,buf+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="G">G. Radar Scanner</h3>题意：给你n个矩形，找到一个点使得n个矩形都在这个点重合并且移动距离最小，输出最小的距离思路：明显x和y两个方向之间没有关系，所以只考虑一维的即可。对于x方向，假设点的坐标为$x_0$,那么$x_0$从左到右的时候总移动距离是先减后增的，所以三分出来这个最低点即可得到答案（y轴一样）。<p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">point</span> a1[maxn],a2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="built_in">point</span> a[],<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].x&gt;x)ans+=ll(a[i].x)-x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i].y&lt;x)ans+=ll(x)-a[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">point</span> a[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid,midmid;</span><br><span class="line"><span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">mid=(r+l)/<span class="number">2</span>;</span><br><span class="line">midmid=(mid+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;"  "&lt;&lt;mid&lt;&lt;"  "&lt;&lt;midmid&lt;&lt;"  "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(sum(a,mid)&lt;sum(a,midmid))r=midmid;</span><br><span class="line"><span class="keyword">else</span> l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> min1=<span class="number">1e9</span>+<span class="number">1</span>,min2=<span class="number">1e9</span>+<span class="number">1</span>,max1=<span class="number">0</span>,max2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a1[i].x,&amp;a2[i].x,&amp;a1[i].y,&amp;a2[i].y);</span><br><span class="line">min1=<span class="built_in">min</span>(min1,a1[i].x);</span><br><span class="line">max1=<span class="built_in">max</span>(max1,a1[i].y);</span><br><span class="line">min2=<span class="built_in">min</span>(min1,a2[i].x);</span><br><span class="line">max2=<span class="built_in">max</span>(max2,a2[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=solve(a1,min1,max1);</span><br><span class="line"><span class="keyword">int</span> y=solve(a2,min2,max2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum(a1,x)+sum(a2,y)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>标程思路</strong>：对于每一维，线段$[l_i,r_i]$移动到$x_0$的移动距离是$(|l_i-x_0|+|r_i-x_0|-|r_i-l_i|)/2$ ,那么只要最小化$\sum|r_i-x_0|+|l_i-x_0|$就行了，要使最小，$x_0$就是所有l，r的中位数，然后答案就出来了。</p><hr/><h3 id="H">H. Skyscraper</h3>题意：给你n个数a[]，对于h[]数组起始都是0，每次可以进行一次操作，让h数组里的[l,r]区间的数加一，问最少需要多少次使得h[i]==a[i]{i<=1<=n}(h[i]等于a[i]后就不能再加了)。a是动态变化的，给q个询问， 1 l r k 表示把a数组[l,r]都加k， 2 l r 表示询问最少多少次使[l,r]区间内所有h[i]==a[i](h初始都为0)。<p>思路：从l到r增加，首先l的位置需要增加a[l]次，到l+1的时候，分两种情况: 1. 如果a[l+1]&gt;a[l],那么操作次数就增加h[l+1]-h[l]. 2. 如果a[l+1]&lt;=a[l], 那么不需要增加额外的操作，跟着h[l]就可以一起操作完了。<br>设x[i]为a[i+1]-a[i],那么最小的操作次数就是$a[l]+\sum_{i=l}^{r-1}max(x[i],0)$,因此，维护一个正的差分序列sum1即可(为了方便操作在a序列前面加一个0和在a序列的后面也加一个0), 但是这个a是动态的，所以可以维护一个差分的树状数组sum，对a数组的区间修改就相当于点修改(l点和r+1点),修改完之后判断正负再对正差分树状数组sum1进行两个点修改，每次查询的答案就是sum[l]+(sum1[r]-sum[l])</p><p>附：<a href="https://wudaoyunqi.github.io/2018/10/16/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/" target="_blank">Wudaoyunqiの树状数组讲解</a></p><p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line">ll sum[maxn],sum1[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll s[],<span class="keyword">int</span> x,ll val)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">s[x]+=val;</span><br><span class="line">x=x+lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll s[],<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">ans+=s[x];</span><br><span class="line">x=x-lowbit(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,q,tmp;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(ll)*(n+<span class="number">500</span>));</span><br><span class="line"><span class="built_in">memset</span>(sum1,<span class="number">0</span>,<span class="keyword">sizeof</span>(ll)*(n+<span class="number">500</span>));</span><br><span class="line">n+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>;add(sum,<span class="number">1</span>,<span class="number">0</span>);add(sum1,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">add(sum,i,tmp-last);</span><br><span class="line"><span class="keyword">if</span>(tmp-last&gt;<span class="number">0</span>)add(sum1,i,tmp-last);</span><br><span class="line">last=tmp;</span><br><span class="line">&#125;</span><br><span class="line">add(sum,n,<span class="number">0</span>);add(sum1,n,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> op,l,r,k;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op,&amp;l,&amp;r);</span><br><span class="line">++l,++r;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">++r;</span><br><span class="line">ll last_l=query(sum1,l)-query(sum1,l<span class="number">-1</span>);</span><br><span class="line">ll last_r=query(sum1,r)-query(sum1,r<span class="number">-1</span>);</span><br><span class="line">add(sum1,l,-last_l);</span><br><span class="line">add(sum1,r,-last_r);</span><br><span class="line">add(sum,l,k);</span><br><span class="line">add(sum,r,-k);</span><br><span class="line">last_l=query(sum,l)-query(sum,l<span class="number">-1</span>);</span><br><span class="line">last_r=query(sum,r)-query(sum,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(last_l&gt;<span class="number">0</span>)add(sum1,l,last_l);</span><br><span class="line"><span class="keyword">if</span>(last_r&gt;<span class="number">0</span>)add(sum1,r,last_r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(sum1,r)-query(sum1,l)+query(sum,l)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="I">I. Temperature Survey</h3><p>题意：给你一个长度为n的不下降数组a,问有多少个不下降的数组b，使得$b_i &lt;= a_i [1&lt;=i&lt;=n]$.</p><p>思路(根据题解)：<br>比如当测试数据为n=10,a[]={3,3,4,4,6,6,6,7,10,10};的时候<br>首先可以把这个问题抽象成一个二维的走格子的问题(如图)<img src="I_1.png" alt="I_1"><br>每次从(0,1)点出发，每次只能向上走1格或者向右走i格，问要到达(a[x],n)点(1&lt;=x&lt;=n)，经过的路径有多少种（灰色是不可以经过的点)。  可以向上加一行，问题就变成了要到达$a[n][n+1]$的路径数。<br>设$dp[i][j]$为到达第i行第j列的路径数，可以推出$dp[i][j]=dp[i-1][j]+dp[i][j-1]$，显然这样$O(n^2)$的做法会超时，所以可以考虑将这个dp优化。<br>如果在一个矩形中，知道了左边界和下边界，那么上边界和右边界就可以用左和下边界与组合式的系数表示，可以用卷积进行优化。<br>所以将原来的图形划分为若干互不相交的矩形，从左下到右上，矩形的左边界可以由之前的矩形的右边界下边界暴力求出来，矩形内部用NTT卷积得出上边界和右边界，然后继续下一个，直到最后一个矩形：<br>如图，矩形的划分<img src="I_2.png" alt=""></p><p>所以剩下的最复杂的地方就是推卷积公式了，我推了好长时间都没有找到公式，问大腿学长的时候他马上就推出来了，我才知道我推不出来的原因是没有<strong>建系</strong>！！建立坐标系，就可以直接用组合数得到公式了！<br>设横向为1-m，纵向为1-n<br>公式：<br>$$<br>up: dp[n-1][k]=\sum_{i=1}^{n-1}dp[i][0]C_{k-1+n-i-1}^{k-1}+\sum_{j=1}^{k}dp[0][j]C_{n-2+k-j}^{n-2}<br>$$<br>$$<br>right: dp[k][m-1]=\sum_{i=1}^{k}dp[i][0]C_{m-2+k-i}^{m-2}+\sum_{j=1}^{m-1}dp[0][j]C_{m-j-1+k-1}^{k-1}<br>$$</p><p>dp值的存储可以用二维的map，也可以用邻接表然后二分查找(因为是升序插入的)<br>写的时候卡好多地方的常数，比如ntt用的g^x需要预处理出来等（看qls的代码才知道），T了好几天终于过了！<br>第一次AC是卡着时限过的(服务器跑的稍微慢一点就T了)：<img src="I_3.png" alt=""></p><p>最终ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxX=(<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> G=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define debug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fastIO &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;</span><br><span class="line"><span class="keyword">if</span>(p1 == pend) &#123;</span><br><span class="line">p1 = buf;</span><br><span class="line">pend = buf + fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(pend == p1) &#123;</span><br><span class="line">IOerror = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(blank(ch = nc()));</span><br><span class="line"><span class="keyword">if</span>(IOerror)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ll fac[maxn&lt;&lt;<span class="number">1</span>],fac_inv[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">q_pow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">ll po[maxX],inpo[maxX],inv[maxX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[maxX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> j=__builtin_ctz(n)<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)pos[i]=pos[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;j);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)<span class="keyword">if</span>(i&lt;pos[i])swap(a[i],a[pos[i]]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;d)&lt;n;d++)&#123;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">1</span>&lt;&lt;d,m2=m&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    ll*_w= t==<span class="number">1</span>?po:inpo;</span><br><span class="line">    _w+=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=m2)&#123;</span><br><span class="line">      ll* w = _w;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;m+i;j++,w++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=(*w)*a[j+m]%mod;</span><br><span class="line">        a[j+m]=a[j]-x;</span><br><span class="line"><span class="keyword">if</span>(a[j+m]&lt;<span class="number">0</span>)a[j+m]+=mod;</span><br><span class="line">        a[j]+=x;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;=mod)a[j]-=mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;</span><br><span class="line">    ll j=inv[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)a[i]=a[i]*j%mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dp_pair</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,dp;</span><br><span class="line">dp_pair(<span class="keyword">int</span> yy,<span class="keyword">int</span> dpp):y(yy),dp(dpp)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;dp_pair&gt;ve[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=ve[x].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(r&gt;=l)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ve[x][mid].y==y)<span class="keyword">return</span> ve[x][mid].dp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ve[x][mid].y&gt;y)r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> A[],<span class="keyword">int</span> B[],<span class="keyword">int</span> alen,<span class="keyword">int</span> blen)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(alen+blen&lt;<span class="number">129</span>)&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> C[<span class="number">257</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alen;++i)C[i]=A[i];</span><br><span class="line"><span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(alen+blen));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;alen;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;blen;++j)&#123;</span><br><span class="line">A[i+j]=A[i+j]+ll(C[i])*B[j]%mod;</span><br><span class="line"><span class="keyword">if</span>(A[i+j]&gt;=mod)A[i+j]-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,len=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(alen==blen)x=(alen&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> x=blen;</span><br><span class="line"><span class="keyword">while</span>(len&lt;x)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(A+alen,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(len-alen));</span><br><span class="line"><span class="built_in">memset</span>(B+blen,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(len-blen));</span><br><span class="line">NTT(A,len,<span class="number">1</span>);NTT(B,len,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i]=ll(A[i])*B[i]%mod;</span><br><span class="line">NTT(A,len,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuck</span><span class="params">(<span class="keyword">int</span> xl,<span class="keyword">int</span> yl,<span class="keyword">int</span> xr,<span class="keyword">int</span> yr)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> A[maxX],X[maxX],Left[maxX],Down[maxX],Up[maxX],Right[maxX];</span><br><span class="line"><span class="keyword">int</span> n=yr-yl+<span class="number">1</span>,m=xr-xl+<span class="number">1</span>,len;</span><br><span class="line">Down[<span class="number">0</span>]=get_dp(xl<span class="number">-1</span>,yl)+get_dp(xl,yl<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(Down[<span class="number">0</span>]&gt;=mod)Down[<span class="number">0</span>]-=mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=xl+<span class="number">1</span>,k=<span class="number">1</span>;i&lt;=xr;++i,++k)&#123;</span><br><span class="line">Down[k]=(get_dp(i,yl<span class="number">-1</span>)+Down[k<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(Down[k]&gt;=mod)Down[k]-=mod;</span><br><span class="line">&#125;</span><br><span class="line">Left[<span class="number">0</span>]=Down[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=yl+<span class="number">1</span>,k=<span class="number">1</span>;i&lt;=yr;++i,++k)&#123;</span><br><span class="line">Left[k]=Left[k<span class="number">-1</span>]+get_dp(xl<span class="number">-1</span>,i);</span><br><span class="line"><span class="keyword">if</span>(Left[k]&gt;=mod)Left[k]-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">Down[<span class="number">0</span>]=Left[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">len=m+n<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)X[i]=(ll(Left[i])*fac_inv[n-i<span class="number">-1</span>])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i]=fac[i];</span><br><span class="line">mul(X,A,n,len);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>,k=<span class="number">1</span>;i&lt;len;++i,++k)Up[k]=ll(X[i])*fac_inv[k<span class="number">-1</span>]%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)X[i]=Down[i],A[i]=fac[i+n<span class="number">-2</span>]*fac_inv[n<span class="number">-2</span>]%mod*fac_inv[i]%mod;</span><br><span class="line">mul(X,A,m,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;++i)Up[i]=(Up[i]+X[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;++i)Up[i]=Down[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Up[<span class="number">0</span>]=Left[n<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)X[i]=Left[i],A[i]=fac[m<span class="number">-2</span>+i]*fac_inv[m<span class="number">-2</span>]%mod*fac_inv[i]%mod;</span><br><span class="line">mul(X,A,n,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)Right[i]=X[i];</span><br><span class="line"></span><br><span class="line">len=m+n<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)X[i]=(ll(Down[i])*fac_inv[m<span class="number">-1</span>-i])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i]=fac[i];</span><br><span class="line">mul(X,A,m,len);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>,k=<span class="number">1</span>;i&lt;len;++i,++k)Right[k]=(Right[k]+X[i]*fac_inv[k<span class="number">-1</span>]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)Right[i]=Left[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Right[<span class="number">0</span>]=Down[m<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)ve[xr].pb(i+yl,Right[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;++i)ve[i+xl].pb(yr,Up[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide_rectangle</span><span class="params">(<span class="keyword">int</span> xl,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r&amp;&amp;a[l]&lt;xl)++l;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(mid&gt;<span class="number">1</span>&amp;&amp;a[mid<span class="number">-1</span>]==a[mid])--mid;</span><br><span class="line"><span class="keyword">if</span>(l&lt;mid)divide_rectangle(xl,l,mid<span class="number">-1</span>);</span><br><span class="line">fuck(xl,mid,a[mid],r);</span><br><span class="line">divide_rectangle(a[mid]+<span class="number">1</span>,((l+r)&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">clock_t</span> t1=clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">static</span> ll g[<span class="number">30</span>],ng[<span class="number">30</span>];</span><br><span class="line">g[<span class="number">20</span>]=q_pow(G,(mod<span class="number">-1</span>)/(<span class="number">1</span>&lt;&lt;<span class="number">21</span>));</span><br><span class="line">ng[<span class="number">20</span>]=q_pow(g[<span class="number">20</span>],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;~i;--i)g[i]=g[i+<span class="number">1</span>]*g[i+<span class="number">1</span>]%mod,ng[i]=ng[i+<span class="number">1</span>]*ng[i+<span class="number">1</span>]%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">inv[x]=q_pow(x,mod<span class="number">-2</span>);</span><br><span class="line">po[x]=inpo[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;x;++j)&#123;</span><br><span class="line">po[x+j]=po[x+j<span class="number">-1</span>]*g[i]%mod;</span><br><span class="line">inpo[x+j]=inpo[x+j<span class="number">-1</span>]*ng[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">po[<span class="number">1</span>&lt;&lt;<span class="number">20</span>]=inpo[<span class="number">1</span>&lt;&lt;<span class="number">20</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> T=maxn&lt;&lt;<span class="number">1</span>;</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;T;++i)fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">fac_inv[T<span class="number">-1</span>]=q_pow(fac[T<span class="number">-1</span>],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=T<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)fac_inv[i]=fac_inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line"></span><br><span class="line">fastIO::<span class="built_in">read</span>(T);</span><br><span class="line">ve[<span class="number">0</span>].pb(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">fastIO::<span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">fastIO::<span class="built_in">read</span>(a[i]);</span><br><span class="line">ve[i].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">++n;a[n]=a[n<span class="number">-1</span>];</span><br><span class="line">divide_rectangle(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> x=get_dp(a[n],n);</span><br><span class="line"><span class="keyword">if</span>(x&gt;=mod)x-=mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> debug</span></span><br><span class="line"><span class="keyword">clock_t</span> t2=clock();</span><br><span class="line"><span class="built_in">cerr</span>&lt;&lt;<span class="string">"time: "</span>&lt;&lt;<span class="keyword">double</span>(t2-t1)/CLOCKS_PER_SEC&lt;&lt;<span class="string">" s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="J">J. Time Limit</h3>第一道签到题，求第一个大于等于 min(3*a[1],a[i]) {2<=i<=n} 的偶数<p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,x,tmp;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;x);</span><br><span class="line">x*=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">x=<span class="built_in">max</span>(x,tmp+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&amp;<span class="number">1</span>)++x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p style="text-align:center;font-size:28px;color:red">**END**</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102220/attachments/download/8734/the-13th-northeast-collegiate-programming-contest-en.pdf&quot; target=&quot;_blank&quot;&gt;题目pdf链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102220&quot; target=&quot;_blank&quot;&gt;提交链接(codeforces)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="现场赛の补题" scheme="https://yanghaku.github.io/categories/%E7%8E%B0%E5%9C%BA%E8%B5%9B%E3%81%AE%E8%A1%A5%E9%A2%98/"/>
    
    
      <category term="codeforces" scheme="https://yanghaku.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019 ICPC, NEERC, Southern Subregional Contest </title>
    <link href="https://yanghaku.github.io/2019/05/20/2018-2019-ICPC-NEERC-Southern-Subregional-Contest/"/>
    <id>https://yanghaku.github.io/2019/05/20/2018-2019-ICPC-NEERC-Southern-Subregional-Contest/</id>
    <published>2019-05-20T00:54:00.000Z</published>
    <updated>2020-01-29T02:25:45.829Z</updated>
    
    <content type="html"><![CDATA[<p>这套题目难度适中吧，<del>只不过我们队还没做到自己的最好，自闭了好几个小时的题目竟然是水题</del></p><p><a href="https://assets.codeforces.com/rounds/1070/statements-9762-en.pdf" target="_blank">题目pdf链接</a></p><p><a href="https://codeforces.com/contest/1070" target="_blank">codeforce提交链接</a></p><a id="more"></a><hr><p>概览：</p><ul><li><a href="#A">A. Find a Number</a></li><li><a href="#B">B. Berkomnadzor</a></li><li><a href="#C">C. Cloud Computing</a></li><li><a href="#D">D. Garbage Disposal</a></li><li><a href="#E">E. Getting Deals Done</a></li><li><a href="#F">F. Debate</a></li><li><a href="#G">G. Monsters and Potions</a></li><li><a href="#H">H. BerOS File Suggestion</a></li><li><a href="#I">I. Privatization of Roads in Berland</a></li><li><a href="#J">J. Streets and Avenues in Berhattan</a></li><li><a href="#K">K. Video Posts</a></li><li><a href="#L">L. Odd Federalization</a></li><li><a href="#M">M. Algoland and Berland</a></li></ul><hr><h3 id="A">A. Find a Number</h3><p>题目大意： 给你一个d(1&lt;=d&lt;=500),和s(1&lt;=s&lt;=5000)，找到一个最小的整数n使得n是d的倍数并且各数位之和为s，不存在就输出-1。</p><p><del>这个题自闭了四个小时还没做出来，其实就是一个简单的bfs！！</del></p><p>思路：记 dp[x][y] 为余数为x，各数位之和为y的数的最小值，因为数位太大，所以可以用一个string保存。<br/>状态转移方程是： dp[(x<em>10+k)%d][y+k]=dp[x][y]+string(k) (0&lt;=k&lt;=9) //其中＋为字符串的连接操作。<br/>所以只要找到dp[0][s]即可，初始的状态为dp[k%d][k] (1&lt;=k&lt;=9) (即只有一位的时候）<br/> 直接用记忆化的BFS搜索即可，而且这样可以保证每次第一次访问到的状态都是最小的，因为加入队列的顺序是*</em>从小到大**的。<br/>（有一个与此题非常相似的题，就是因为这个从小到大的特性才能AC–&gt;<a href="https://codeforces.com/gym/101889/attachments">题目链接：Enigma</a>）。</p><p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d,S;</span><br><span class="line"><span class="comment">//string str[501][5001];</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">T(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy,<span class="built_in">string</span> ss):x(xx),y(yy),s(ss)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">q.emplace(i%d,i,<span class="built_in">string</span>(<span class="number">1</span>,<span class="keyword">char</span>(i+<span class="string">'0'</span>)));</span><br><span class="line">vis[i%d][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().x;</span><br><span class="line"><span class="keyword">int</span> y=q.front().y;</span><br><span class="line"><span class="built_in">string</span> s=q.front().s;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==S)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(y+i&gt;S)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> id=(x*<span class="number">10</span>+i)%d;</span><br><span class="line"><span class="keyword">if</span>(vis[id][y+i]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[id][y+i]=<span class="number">1</span>;</span><br><span class="line">q.emplace(id,y+i,s+<span class="keyword">char</span>(i+<span class="string">'0'</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;d&gt;&gt;S;</span><br><span class="line"><span class="keyword">if</span>(solve())<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化：</strong> 上面的代码跑了1200多ms，虽说没有超时，但是还是完全可以优化的。<br/>考虑到每次的状态都需要一个string保存，每次状态转移都是前一个的string复制后再添上一个字符（而其中的复制和动态内存的分配与释放消耗的时间非常多），所以说这个地方可以有很大的优化。<br/>考虑到每次状态转移都是只添加一个字符，而其他字符就可以直接用上一个状态的就行，所以可以做成一个链表，每一个状态都保存它上一个状态的地址（两个坐标），就能生成最后的字符串，这样可以节省所有的字符串复制的时间。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d,S;</span><br><span class="line"><span class="comment">//string str[501][5001];</span></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="keyword">int</span> lastx[<span class="number">501</span>][<span class="number">5001</span>],lasty[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">501</span>][<span class="number">5001</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">T(<span class="keyword">int</span> xx,<span class="keyword">int</span> yy):x(xx),y(yy)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getString</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">-1</span>)&#123;</span><br><span class="line">s=s+ch[x][y];</span><br><span class="line">tmp=lastx[x][y];</span><br><span class="line">y=lasty[x][y];</span><br><span class="line">x=tmp;</span><br><span class="line">&#125;</span><br><span class="line">reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line">q.emplace(i%d,i);</span><br><span class="line">vis[i%d][i]=<span class="number">1</span>;</span><br><span class="line">lastx[i%d][i]=<span class="number">-1</span>;</span><br><span class="line">lasty[i%d][i]=<span class="number">-1</span>;</span><br><span class="line">ch[i%d][i]=i+<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().x;</span><br><span class="line"><span class="keyword">int</span> y=q.front().y;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==S)&#123;</span><br><span class="line">getString(x,y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(y+i&gt;S)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> id=(x*<span class="number">10</span>+i)%d;</span><br><span class="line"><span class="keyword">if</span>(vis[id][y+i]==<span class="number">0</span>)&#123;</span><br><span class="line">vis[id][y+i]=<span class="number">1</span>;</span><br><span class="line">q.emplace(id,y+i);</span><br><span class="line">ch[id][y+i]=i+<span class="string">'0'</span>;</span><br><span class="line">lastx[id][y+i]=x;</span><br><span class="line">lasty[id][y+i]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;d&gt;&gt;S;</span><br><span class="line"><span class="keyword">if</span>(solve())<span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次运行时间对比：(可以发现少了将近1s）<img src="A_staus.png" alt="A submission"></p><hr><h3 id="B">B. Berkomnadzor</h3>(mid) 字典树大模拟，题目大意：给你n个ip地址(也可能是一个划分的子网）都是使用点分十进制表示法，这n个ip有的属于白名单，有的属于黑名单，然后就是让你把黑名单合并，要求在白名单中的不能属于黑名单，不在白名单中的ip也可以进入黑名单，让你合并后的黑名单个数尽量少。（如果某个ip既在黑名单又在白名单，那么就输出-1。<p>思路：首先写好点分十进制和二进制ip的相互转化函数，字典树里面只包括0,1字符即可，每个节点要维护当前ip地址(或者子网)是否属于黑名单或者白名单，当前节点之后的子网有没有属于白名单的，有没有属于黑名单的即可。检查冲突：如果下面的所有子网地址都属于一个确定的黑(白)名单，那么就可以判断是否与当前正在插入的ip有冲突，如果到达当前ip的子网掩码长度，就可以判断下面的子网中有没有与此冲突。</p><p>注意有子网掩码为0的情况，也就是包括所有的ip的情况。</p><p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> ip[<span class="number">100</span>],white;</span><br><span class="line"><span class="keyword">int</span> len,subnet_len,ans,black_num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">node* next[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> has_white[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> has_black[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> all_white;</span><br><span class="line"><span class="keyword">bool</span> all_black;</span><br><span class="line">node()&#123;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line"><span class="built_in">memset</span>(has_white,<span class="number">0</span>,<span class="keyword">sizeof</span>(has_white));</span><br><span class="line"><span class="built_in">memset</span>(has_black,<span class="number">0</span>,<span class="keyword">sizeof</span>(has_black));</span><br><span class="line">all_white=all_black=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">~node()&#123;</span><br><span class="line"><span class="keyword">if</span>(next[<span class="number">0</span>])<span class="keyword">delete</span> next[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(next[<span class="number">1</span>])<span class="keyword">delete</span> next[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;*root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_binary</span><span class="params">()</span></span>&#123;<span class="comment">//将点分十进制变为二进制</span></span><br><span class="line"><span class="keyword">if</span>(buf[<span class="number">0</span>]==<span class="string">'+'</span>)white=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> white=<span class="number">0</span>,++black_num;</span><br><span class="line">len=<span class="built_in">strlen</span>(buf);</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">subnet_len=<span class="number">32</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;len&amp;&amp;buf[i]&gt;=<span class="string">'0'</span>&amp;&amp;buf[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=x*<span class="number">10</span>+buf[i]-<span class="string">'0'</span>;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot==<span class="number">32</span>)&#123;</span><br><span class="line">subnet_len=x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">8</span>;++k)&#123;</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;(<span class="number">7</span>-k))&amp;<span class="number">1</span>)ip[tot]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ip[tot]=<span class="number">0</span>;</span><br><span class="line">++tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_binary</span><span class="params">()</span></span>&#123;<span class="comment">//将二进制变为点分十进制</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">8</span>;j&lt;(i+<span class="number">1</span>)*<span class="number">8</span>&amp;&amp;j&lt;subnet_len;++j)&#123;</span><br><span class="line">x=x|(ip[j]&lt;&lt;(<span class="number">7</span>-j+i*<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(subnet_len!=<span class="number">32</span>)<span class="built_in">printf</span>(<span class="string">"/%d\n"</span>,subnet_len);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">node* p=root;</span><br><span class="line"><span class="keyword">if</span>(subnet_len==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_black[<span class="number">0</span>]||p-&gt;has_black[<span class="number">1</span>]||p-&gt;all_black)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;all_white=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_white[<span class="number">0</span>]||p-&gt;has_white[<span class="number">1</span>]||p-&gt;all_white)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;all_black=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)p-&gt;has_white[ip[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> p-&gt;has_black[ip[i]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!p-&gt;next[ip[i]])p-&gt;next[ip[i]]=<span class="keyword">new</span> node();</span><br><span class="line">p=p-&gt;next[ip[i]];</span><br><span class="line"><span class="keyword">if</span>(p-&gt;all_white)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//黑白冲突</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;all_black)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==subnet_len<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(white)&#123;</span><br><span class="line">p-&gt;all_white=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_black[<span class="number">0</span>]||p-&gt;has_black[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;all_black=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;has_white[<span class="number">0</span>]||p-&gt;has_white[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_num</span><span class="params">(node* now,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_white)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_black|| (!now-&gt;has_white[<span class="number">0</span>]&amp;&amp;!now-&gt;has_white[<span class="number">1</span>]))&#123;</span><br><span class="line">++ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">0</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">0</span>;</span><br><span class="line">dfs_num(now-&gt;next[<span class="number">0</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">1</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">1</span>;</span><br><span class="line">dfs_num(now-&gt;next[<span class="number">1</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node* now,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_white)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;all_black || (!now-&gt;has_white[<span class="number">0</span>]&amp;&amp;!now-&gt;has_white[<span class="number">1</span>]))&#123;</span><br><span class="line">subnet_len=num;</span><br><span class="line">change_binary();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">0</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">0</span>;</span><br><span class="line">dfs(now-&gt;next[<span class="number">0</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now-&gt;next[<span class="number">1</span>])&#123;</span><br><span class="line">ip[num]=<span class="number">1</span>;</span><br><span class="line">dfs(now-&gt;next[<span class="number">1</span>],num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">new</span> node();</span><br><span class="line"><span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">get_binary();</span><br><span class="line"><span class="keyword">if</span>(!insert())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(black_num==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">dfs_num(root,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">dfs(root,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="C">C. Cloud Computing</h3>pending<hr><h3 id="D">D. Garbage Disposal</h3><p>签到题一枚，题目大意是给你n天的每天的垃圾量，每个垃圾只能在当天或者第二天扔掉（<strong>不能放到第三天</strong>），垃圾只能装到包里才能扔，所以给你一个k，表示每个包最多能盛放多少垃圾。问最小需要多少个包。<br>思路：直接贪心即可，每天把当天需要扔的垃圾整除k（装包扔掉），余数（即剩下不够装满一个包）就放到第二天扔。但是要注意垃圾不能存到第三天，所以只要保证当天扔的垃圾大于前一天剩下的即可。<br>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,k,last=<span class="number">0</span>,a,ans=<span class="number">0</span>,tmp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">a+=last;</span><br><span class="line">tmp=a/k;</span><br><span class="line">a%=k;</span><br><span class="line"><span class="keyword">if</span>(tmp*k&lt;last)&#123;</span><br><span class="line"><span class="comment">//如果当天扔的小于昨天剩下的，也要强制扔去</span></span><br><span class="line">++tmp;</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=tmp;</span><br><span class="line">last=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(last)++ans;<span class="comment">//如果最后还剩下，就直接装包扔掉</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="E">E. Getting Deals Done</h3>pending<hr><h3 id="F">F. Debate</h3>题目大意：给你n（1<=n<=4e5）个人，每个人有一个两位的数字（第一位1代表支持A，0代表不支持A，第二位1代表支持B，代表不支持B）和一个影响值。让你在这些人中选择m个人满足限制条件并且使得这些人的影响力和最大，限制是选择的人中A，B的支持数×2不能小于m。思路：直接贪心就行，把这些人分成四类，11的直接加即可，10和01的按影响力值从大到小排个序，然后按01和10一对一对地选择，最后把剩下的和00类的人混合在一起排个序，从大到小选择直到不能满足限制条件。<p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a10[maxn],a01[maxn],a0[maxn];</span><br><span class="line"><span class="keyword">int</span> n,l10=<span class="number">0</span>,l01=<span class="number">0</span>,l0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tota=<span class="number">0</span>,tot=<span class="number">0</span>,totb=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>,&amp;t,&amp;tmp);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">11</span>)&#123;</span><br><span class="line">++tot;++tota;++totb;</span><br><span class="line">ans+=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">10</span>)a10[l10++]=tmp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">1</span>)a01[l01++]=tmp;</span><br><span class="line"><span class="keyword">else</span> a0[l0++]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">sort(a10,a10+l10,cmp);</span><br><span class="line">sort(a01,a01+l01,cmp);</span><br><span class="line"><span class="comment">//sort(a0,a0+l0,cmp);</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;l01&amp;&amp;b&lt;l10)&#123;</span><br><span class="line">++tota,++totb;</span><br><span class="line">tot+=<span class="number">2</span>;</span><br><span class="line">ans+=a01[a]+a10[b];</span><br><span class="line">++a,++b;</span><br><span class="line">&#125;</span><br><span class="line">assert(a==l01||b==l10);</span><br><span class="line">assert(tota==totb);</span><br><span class="line"><span class="keyword">while</span>(a&lt;l01)&#123;</span><br><span class="line">a0[l0++]=a01[a];</span><br><span class="line">++a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(b&lt;l10)&#123;</span><br><span class="line">a0[l0++]=a10[b];</span><br><span class="line">++b;</span><br><span class="line">&#125;</span><br><span class="line">sort(a0,a0+l0,cmp);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p=tota*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l0;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(p&gt;tot)&#123;</span><br><span class="line">ans+=a0[i];</span><br><span class="line">++tot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="G">G. Monsters and Potions</h3>(mid)大模拟题，看懂题意直接模拟就行<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">150</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hero;</span><br><span class="line"><span class="keyword">int</span> Cell[maxn],n,m;</span><br><span class="line">hero Hero[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> rally)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cell[maxn];</span><br><span class="line"><span class="keyword">static</span> hero h[maxn];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> ok[maxn];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cell[i]=Cell[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)h[i]=Hero[i],ok[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;m;++p)&#123;</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ok[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(h[i].x==rally)&#123;</span><br><span class="line">id=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(h[i].x&lt;rally)&#123;</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">move</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> hp=h[i].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&lt;=rally;++j)&#123;</span><br><span class="line">hp+=cell[j];</span><br><span class="line"><span class="keyword">if</span>(hp&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">move</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">move</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&lt;=rally;++j)cell[j]=<span class="number">0</span>;</span><br><span class="line">id=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">bool</span> <span class="built_in">move</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> hp=h[i].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&gt;=rally;--j)&#123;</span><br><span class="line">hp+=cell[j];</span><br><span class="line"><span class="keyword">if</span>(hp&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">move</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">move</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i].x;j&gt;=rally;--j)cell[j]=<span class="number">0</span>;</span><br><span class="line">id=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(id==<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">ans[p]=id;</span><br><span class="line">ok[id]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rally);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[j],j==m<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;Hero[i].x,&amp;Hero[i].y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Cell[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(solve(i))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="H">H. BerOS File Suggestion</h3>(easy)题目大意：给你n个字符串（1<=n<=10000),字符串长度小于9，只包括小写字母、数字和‘.'，然后是q（1<=q<=50000)，每次给一个字符串，问有多少个字符串的子串是当前的询问，如果有，输出任意一个。我觉得直接拿字典树搞就行，但是要注意一个子串会在同一个字符串中多次出现，但是**计数只能记一次**！<p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10000</span>+<span class="number">1</span>][<span class="number">8</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n,q,ans,ans_id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> indx,num,last_str;</span><br><span class="line"><span class="comment">//last_str 记录上次插入的字符串，避免一个字符串多次插入</span></span><br><span class="line">node* next[<span class="number">37</span>];</span><br><span class="line">node(<span class="keyword">int</span> id)&#123;</span><br><span class="line">num=<span class="number">0</span>;indx=id,last_str=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(next,<span class="number">0</span>,<span class="keyword">sizeof</span>(next));</span><br><span class="line">&#125;</span><br><span class="line">~node()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">37</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(next[i])<span class="keyword">delete</span> next[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;*root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'.'</span>)<span class="keyword">return</span> <span class="number">36</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)<span class="keyword">return</span> ch-<span class="string">'0'</span>+<span class="number">26</span>;</span><br><span class="line"><span class="keyword">return</span> ch-<span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">node* p=root;</span><br><span class="line"><span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line"><span class="keyword">int</span> x=getid(buf[id][i]);</span><br><span class="line"><span class="keyword">if</span>(!p-&gt;next[x])p-&gt;next[x]=<span class="keyword">new</span> node(id);</span><br><span class="line">p=p-&gt;next[x];</span><br><span class="line"><span class="keyword">if</span>(p-&gt;last_str!=id)&#123;</span><br><span class="line">++p-&gt;num;</span><br><span class="line">p-&gt;last_str=id;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">node* p=root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> x=getid(buf[n][i]);</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next[x])p=p-&gt;next[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=p-&gt;num;</span><br><span class="line">ans_id=p-&gt;indx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">new</span> node(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf[i]);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;++j)insert(i,j,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf[n]);</span><br><span class="line">query(<span class="built_in">strlen</span>(buf[n]));</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">"0 -\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>,ans,buf[ans_id]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="I">I. Privatization of Roads in Berland</h3>pending<hr><h3 id="J">J. Streets and Avenues in Berhattan</h3>pending<hr><h3 id="K">K. Video Posts</h3><p>简单的一道签到题，题目大意就是给你n个数，然后划分成k块，让每一块的和都相等，不能划分就输出”No”<br>限制很强，所以直接搞就行。</p><p>ac代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>+<span class="number">100</span>],ans[<span class="number">100000</span>+<span class="number">100</span>],n,sum,k,ava;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">ava=sum/k;</span><br><span class="line"><span class="keyword">if</span>(sum%k)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;n&amp;&amp;a[i]&lt;ava)&#123;</span><br><span class="line">a[i]+=a[j];</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]==ava)ans[tot++]=j-i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">i=j<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(solve())&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)<span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i],i==k<span class="number">-1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="L">L. Odd Federalization</h3>pending<hr><h3 id="M">M. Algoland and Berland</h3>pending<hr><p style="text-align:center;font-size:28px;color:red">**END**</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这套题目难度适中吧，&lt;del&gt;只不过我们队还没做到自己的最好，自闭了好几个小时的题目竟然是水题&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assets.codeforces.com/rounds/1070/statements-9762-en.pdf&quot; target=&quot;_blank&quot;&gt;题目pdf链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1070&quot; target=&quot;_blank&quot;&gt;codeforce提交链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="平时训练の补题" scheme="https://yanghaku.github.io/categories/%E5%B9%B3%E6%97%B6%E8%AE%AD%E7%BB%83%E3%81%AE%E8%A1%A5%E9%A2%98/"/>
    
    
      <category term="codeforces" scheme="https://yanghaku.github.io/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="https://yanghaku.github.io/2019/05/20/my-first-blog/"/>
    <id>https://yanghaku.github.io/2019/05/20/my-first-blog/</id>
    <published>2019-05-20T00:30:00.000Z</published>
    <updated>2019-05-20T00:52:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>从现在开始，2019.5.20，我将拥有自己的博客了。</p><p>对我来说写博客的用处有一下几点：</p><a id="more"></a><ol><li>每天总结自己做过的题目，加深思考。</li><li>为自己写过的代码做备份，之前一直保存在本地，虽然都用文件夹做了分类，但是还是查找不方便，而且有时又懒得保存。</li><li>克服自己的懒惰，到了现在，看了自己的github，自己已经有半年没有好好写代码了，不仅仅是手懒，脑子也变得懒了，记得前几天教练还说过：我们已经停止了思考。对，就是停止了思考！现在的程度，是对许多的算法都知道，但是却不能静下心来仔细研究其中的原理和更深层的应用。没有了思考，也就没有了提高，只靠板子是做不了题的！</li></ol><p>所以从此，加油，克服自己的懒惰，才能提高！</p><hr><p>博客名字以后再想吧……</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从现在开始，2019.5.20，我将拥有自己的博客了。&lt;/p&gt;
&lt;p&gt;对我来说写博客的用处有一下几点：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
